{
  "GuiUserManuals/loggingtool/signalplotfiguremanipulation.html": {
    "href": "GuiUserManuals/loggingtool/signalplotfiguremanipulation.html",
    "title": "LoggManXml | SAMBA19x Website",
    "keywords": "Integraded Dynamics Engineering Signals Plots and Figures Manipulation Operation AUTHOR(S): Moneer Shatat-Herres REVISION: 00 DATE OF PRINT: December 12, 2020 DOCUMENT CHANGE & HISTORY RECORD Name Last Update Status Version ECR/PR/IP Comment MSHAT 12.12.2020 Released 00 -- LoggManXml To prepare and plot a logged data set generated by the SAMBA19x LoggingTool there is a convenient way to use a data manipulation and plotting script file .LoggManXml . The .LoggManXml file has xml format and consists of a various actions like SignalActions to prepare respectively manipulate the logged data, SubplotActions to plot the prepared data or the raw data and to config the plot property and FigureActions to config all plots inside the figure with the same properties. There are basically a couple of operations, SignalOperation is used by SignalActions , PlotProperty , Annotation are used by SubplotActions and FigureActions and FigureOperation used by FigureActions . Optionally there are PostOperations to save figures and plot to pictures after finishing tha plotting. Log manipulation SignalOperation operation value The SignalOperation lmpo-operation contains a varios actions. It's value consists of a collection of signal manipulation commands lmpo-cmd . A \" lmpo-cmd \" consists of cmd-name \" italic , polt \" and list of cmd-config seperated by a semicolon \";\" or semicolon+space \"; \". A cmd-config consists of a keyword \" polt \" and a value, they are seperated by a colon \":\" or by a colon+space \": \". Some cmd_configs are valueless. The following table describes all possible lmpo-cmds of the Operation lmpo-operation . sam-cmd Description { remove-points ; sig1 :x; sig2 :x; ...; sign :x; first :x; last :x; index1 :x; index2 :x } removes points from the listed signals (sig1 ... sign). { title ; sig :x; title :title; } changes the title of sig. { clone ; sig :x; newsig :x; [ title :x;] } clones sig to newsig and set title to newsig. { remove ; sig1 :x; sig2 :x; ...; sign :x} removes all listed signals (sig1 ... sign) from signals dictionary. { add-from-csv ; file :filepath; sig :x; } export sig from signals dictionary to a csv file. { export-to-csv ; file :x; sig :x; [ title :x;] } add newsig from a csv file to signals dictionary and set title to newsig. The newsig will be labeled with title . { xysig ; xsig :x; ysig :x; newsig :x; [ title :x;] } build new signal (x: xsig y-axis, y: ysig y-axis). The newsig will be labeled with title . { add ; sig :x; factor :x; [ newsig :x;] [ title :x] } add factor to sig and optional save the resultto newsig .The newsig will be labeled with title . If newsig ist ommitted the sig will be overwritten. { mult ; sig :x; factor :x; [ newsig :x;] } multiply factor with sig and optional save the result to newsig . If newsig is ommitted the sig will be overwritten. { divide ; sig :x; factor :x; [ newsig :x;] } divide sig through factor and optional save the result to newsig . If newsig is ommitted the sig will be overwritten. { subt ; sig :x; factor :x; [ newsig :x;] } subtracts factor from sig and optional save the result to newsig . If newsig is ommitted the sig will be overwritten. { avg ; sig :x; param :x; [ mult :x]} build the average value of sig y-value-serie then optionally multiply the result with mult and save the result to param in the parameter dictionary. { max ; sig :x; param :x; ; [ mult :x]} build the maximum value of sig y-value-serie then optionally multiply the result with mult and save the result to param in the parameter dictionary. { min ; sig :x; param :x; [ mult :x]} build the minimum value of sig y-value-serie then optionally multiply the result with mult and save the result to param in the parameter dictionary. { std ; sig :x; param :x; [ mult :x]} build the standard diviation value of sig y-value-serie then optionally multiply the result with mult and save the result to param in the parameter dictionary. { pkpk ; sig :x; param :x; [ mult :x]} build the peak-to-peak value of sig y-value-serie then optionally multiply the result with mult and save the result to param in the parameter dictionary. { median ; sig :x; length :x; [ newsig :x;] [ title :x;] } calculate the median (with the length length ) of the sig y-values and optionally save the result to newsig . The newsig is labeled with title . If newsig is ommitted the sig will be overwritten. { average ; sig :x; length :x; [ newsig :x;] [ title :x;] } calculate the average (with the length length ) of the sig y-values and optionally save the result to newsig . The newsig is labeled with title . If newsig is ommitted the sig will be overwritten. { rms ; sig :x; length :x; [ newsig :x;] [ title :x;] } calculate the root mean square \"rms\" (with the length length ) of the sig y-values and optionally save the result to newsig . The newsig will be labeled with title . If newsig is ommitted the sig will be overwritten. { derivative ; sig :x; length :x; [ newsig :x;] [ title :x;] } calculate the derivative of the sig y-values and optionally save the result to newsig . The newsig will be labeled with title . If newsig is ommitted the sig will be overwritten. { integrate ; sig :x; length :x; [ newsig :x;] [ title :x;] } integrates the sig y-values and optionally save the result to newsig . The newsig will be labeled with title . If newsig is ommitted the sig will be overwritten. { add-2sig ; sig1 :x; sig2 :x; [ newsig :x;] [ title :x;]} add sig1 with sig2 and optionally save the result to newsig . If newsig is ommitted the sig1 will be overwritten. The newsig will be labeled with title . { mult-2sig ; sig1 :x; sig2 :x; [ newsig :x;] [ title :x;]} multiply sig1 with sig2 and optionally save the result to newsig . If newsig is ommitted the sig1 will be overwritten. The newsig will be labeled with title . { subt-2sig ; sig1 :x; sig2 :x; [ newsig :x;] [ title :x;]} subract sig2 from sig1 and optionally save the result to newsig . If newsig is ommitted the sig1 will be overwritten. The newsig will be labeled with title . { divide-2sig ; sig1 :x; sig2 :x; [ newsig :x;] [ title :x;]} divide sig1 through sig1 and optionally save the result to newsig . If newsig is ommitted the sig1 will be overwritten. The newsig will be labeled with title . { derivative-2sig ; sig1 :x; sig2 :x; [ newsig :x;] [ title :x;]} calculate the derivative of the sig1 y-values using sig2 y-axis as x-axis and optionally save the result to newsig . If newsig is ommitted the sig1 will be overwritten. The newsig will be labeled with title . { integrate-2sig ; sig1 :x; sig2 :x; [ newsig :x;] [ title :x;]} integarte sig1 y-values using sig2 x-axis and optionally save the result to newsig . If newsig is ommitted the sig1 will be overwritten. The newsig will be labeled with title . Examples Example1 The following operation actions listed below measures the open/closed force mobilty transfer function of the Yrot axis. <Operation Name=\"SignalOperation\"> <Value> <anyType xsi:type=\"xsd:string\">remove-points;last:2; sig1:F1S1; sig2:F1S2; sig3:F1S3; sig4:F1S4; sig5:F1S5</anyType> <anyType xsi:type=\"xsd:string\">remove-points;first:2; sig1:F1S1; sig2:F1S2; sig3:F1S3; sig4:F1S4; sig5:F1S5</anyType> <anyType xsi:type=\"xsd:string\">remove-points;index1:20;index2:40; sig1:F1S1; sig2:F1S2; sig3:F1S3; sig4:F1S4; sig5:F1S5</anyType> <anyType xsi:type=\"xsd:string\">xysig; ysig:F1S2; xsig:F1S1; newsig:F1S2M</anyType> <anyType xsi:type=\"xsd:string\">xysig; ysig:F1S3; xsig:F1S1; newsig:F1S3M; title:Polyout-Excitation</anyType> <anyType xsi:type=\"xsd:string\">xysig; ysig:F1S4; xsig:F1S1; newsig:F1S4M</anyType> </Value> </Operation> Example2 <!-- Yrot Axis--> <AutoMeasurent Name=\"FMYrotRawOCL\" IsEnabled=\"true\"> <OperationList> <Operation Name=\"Operation\"> <Value> <anyType xsi:type=\"xsd:string\">individual-loopstatus; velocity:101111</anyType> <anyType xsi:type=\"xsd:string\">clear-cached-measurements;</anyType> <anyType xsi:type=\"xsd:string\">trace-sig;signum:2; type:2; mainindex:4; subindex:-1</anyType> <anyType xsi:type=\"xsd:string\">excit-sig;type:4; mainindex:4; </anyType> <anyType xsi:type=\"xsd:string\">waitms; time:2000;</anyType> <anyType xsi:type=\"xsd:string\">measure;</anyType> <anyType xsi:type=\"xsd:string\">cache-measurement;</anyType> <anyType xsi:type=\"xsd:string\">individual-loopstatus; velocity:111111</anyType> <anyType xsi:type=\"xsd:string\">waitms; time:2000;</anyType> <anyType xsi:type=\"xsd:string\">measure;</anyType> </Value> </Operation> <Operation Name=\"Save\"> <Value> <anyType xsi:type=\"xsd:string\">frf2fig;file:Yrot_Raw_OCL_AW_FRF.idefigure</anyType> <anyType xsi:type=\"xsd:string\">time2fig;file:Yrot_Raw_OCL_AW_TimeSpec.idefigure</anyType> <anyType xsi:type=\"xsd:string\">frf2pic;file:Yrot_Raw_OCL_AW_FRF.png</anyType> <anyType xsi:type=\"xsd:string\">time2pic;file:Yrot_Raw_OCL_AW_TimeSpec.png</anyType> <anyType xsi:type=\"xsd:string\">raw;file:Yrot_Raw_OCL_AW.sidimat19x</anyType> </Value> </Operation> <Operation Name=\"CheckSpec_#FMYr0OCLAW\"> <Value> <anyType xsi:type=\"xsd:string\">cache;file:Yrot_Raw_OCL_AW_FRF.idefigure</anyType> <anyType xsi:type=\"xsd:string\">max; sig:F1P1S2; specmin:18.5; specmax:23.7;rmin:1;rmax:15</anyType> <anyType xsi:type=\"xsd:string\">max-pos; sig:F1P1S2; specmin:2.0; specmax:3.0; rmin:1; rmax:15</anyType> <anyType xsi:type=\"xsd:string\">ocl-lbw; olsig:F1P1S2; clsig:F1P1S1; rmin:1; rmax:14; specmax:1.5</anyType> <anyType xsi:type=\"xsd:string\">ocl-hbw;olsig:F1P1S2; clsig:F1P1S1; specmin:11; rmin:1; rmax:14;</anyType> <anyType xsi:type=\"xsd:string\">ocl-damp;olsig:F1P1S2; clsig:F1P1S1; specmin:17; rmin:1; rmax:14;</anyType> </Value> </Operation> <Operation Name=\"Report\"> <Value> <anyType xsi:type=\"xsd:string\">para3;Yrot Force Mobility at raw input Open/Close Loop</anyType> <anyType xsi:type=\"xsd:string\">text;Here are the force mobility measurements. Measured at the velocity axes raw input</anyType> <anyType xsi:type=\"xsd:string\">pic;Measurements\\ForceMobility\\Raw_OCL_AW\\Yrot_Raw_OCL_AW_FRF.png</anyType> </Value> </Operation> </OperationList> </AutoMeasurent> Plot manipulation PlotProperty operation The PlotProperty lmpo-operation contains a varios actions. It's value consists of a collection of signal manipulation commands lmpo-cmd . A \" lmpo-cmd \" consists of cmd-name \" italic , polt \" and list of cmd-config seperated by a semicolon \";\" or semicolon+space \"; \". A cmd-config consists of a keyword \" polt \" and a value, they are seperated by a colon \":\" or by a colon+space \": \". Some cmd_configs are valueless. The following table describes all possible lmpo-cmds of the Operation lmpo-operation . lmpo-cmd Description { curves ; curve#1 :x; curve#2 :x; ... ; curve#n :x } add the listed signals \"curves\" from the signals dictionary to the plot. { plot ; plot properties } set the plot's properties. { tracker-string-format ; format :x; } set the format of the plot's tracker. { add-curve-from-csv ; file :x; } add a signal from csv file to the signals dictionary. { default-curves-color ; curve#1 :x; curve#1 :x; ...; curve#x :x } specifies the default curves colors of the plot. { curves-remove ; curve#1 :; curve#1 :; ...; curve#x : } chnages the curves colors of listed curves. { curves-line-color or curves-color ; curve#1 :color; curve#2 :color; ... ; curve#n :color } sets the curve line color of the listed curves. Color's value format is ARGB (#FFFFFFFF)} { curves-line-style ; curve#1 :style; curve#2 :style; ... ; curve#n :style } sets the curve line style, style values are {\"automatic\",\"dash\",\"dashdashdot\",\"dashdashdotdot\",\"dashdot\",\"dashdotdot\",\"dot\",\"longdash\",\"longdashdot\",\"longdashdotdot\"}. { curves-line-thickness ; curve#1 :thick; curve#2 :thick; ... ; curve#n :thick } sets the curve line thickness of the listed curves.} { curves-title ; curve#1 :title; curve#2 :title; ...; curve#n :title } sets the curve title of the listed curves.} { xaxis ; x-axis properties } | set the x-axis properties. { yaxis ; y-axis properties } | set the y-axis properties. plot lmpo-cmd configuration cmd-config using the plot cmd one could set the plot properties listed in the following table. plot property Description { title :x } changes the plot title. { title-color :x } changes the title's color of the plot. Color's value format is ARGB (#FFFFFFFF). { title-fontsize :x } set the title font size. { title-font :x } set the title font type. possible font types () { title-fontweight :x } set the title font weight. possible font weights () { legend-style :x } set the legend style x{inside,outside}. { legend : x switch legend on off x{on,off} { grid : x switch grid on off x{on,off} { background :x } set the background color of the plot. Color's value format is ARGB (#FFFFFFFF). { legend-text-color :x } set the legend text color . Color's value format is ARGB (#FFFFFFFF). { legend-background :x } set the legend text color . Color's value format is ARGB (#FFFFFFFF). { legend-text-fontsize :x } set the legend text font size. { border-thickness :x } set the thickniss of the plot's border. the thickniss is given in pixel. { border-color :x } set the color of the plot's border. Color's value format is ARGB (#FFFFFFFF). { rescale :x } rescale the plot. X-Axis properties using the plot cmd one could set some plot properties listed in the following table. x-axis property Description { log : {on|off} } set the y-axis label. { label :x } set the x-axis label. { label-fontsize :x } set the x-axis label font size. { label-color :x } set the x-axis label color. Color's value format is ARGB (#FFFFFFFF). { fontsize :x } set the x-axis font size. possible font x{\"Arial\", \"Calibri\", ...} { min :x } set the x-axis minimum. { max :x } set the x-axis maximim. { text-color :x } set the x-axis text color . Color's value format is ARGB (#FFFFFFFF). { major-grid-width :x } set the x-axis major grid width. { minor-grid-width :x } set the x-axis minor grid width. { major-grid-color :x } set the x-axis major grid color. Color's value format is ARGB (#FFFFFFFF). { minor-grid-color :x } set the x-axis minor grid color.color's value format is ARGB (#FFFFFFFF). { tick-color :x } set the x-axis tick color.color's value format is ARGB (#FFFFFFFF). { line-color :x } set the x-axis line color.color's value format is ARGB (#FFFFFFFF). Y-Axis properties using the plot cmd one could set some plot properties listed in the following table. y-axis property Description { log : {on|off} } set the y-axis label. { label :x } set the y-axis label. { label-fontsize :x } set the y-axis label font size. { label-color :x } set the y-axis label color. Color's value format is ARGB (#FFFFFFFF). { fontsize :x } set the y-axis font size. possible font types () { min :x } set the y-axis minimum. { max :x } set the y-axis maximim. { text-color :x } set the x-axis text color . Color's value format is ARGB (#FFFFFFFF). { major-grid-width :x } set the y-axis major grid width. { minor-grid-width :x } set the y-axis minor grid width. { major-grid-color :x } set the y-axis major grid color. Color's value format is ARGB (#FFFFFFFF). { minor-grid-color :x } set the y-axis minor grid color.color's value format is ARGB (#FFFFFFFF). { tick-color :x } set the y-axis tick color.color's value format is ARGB (#FFFFFFFF). { line-color :x } set the y-axis line color.color's value format is ARGB (#FFFFFFFF). <Operation Name=\"PlotProperty\"> <Value> <anyType xsi:type=\"xsd:string\">yaxis; label:ProxV2[um]; major-grid-width:5; minor-grid-width:1;</anyType> <anyType xsi:type=\"xsd:string\">xaxis; label:Time[sec]; major-grid-width:10; minor-grid-width:5;</anyType> <anyType xsi:type=\"xsd:string\">curves; sig:F1S2</anyType> <anyType xsi:type=\"xsd:string\">plot; grid:on; title:PlotTitle; title-font-size:14; title-font-color: #FFFF0000; legend: on; legend-style: inside</anyType> </Value> </Operation> Plot manipulation Annotation operation The Annotation lmpo-operation contains a varios actions. It's value consists of a collection of signal manipulation commands lmpo-cmd . A \" lmpo-cmd \" consists of cmd-name \" italic , polt \" and list of cmd-config seperated by a semicolon \";\" or semicolon+space \"; \". A cmd-config consists of a keyword \" polt \" and a value, they are seperated by a colon \":\" or by a colon+space \": \". Some cmd_configs are valueless. The following table describes all possible lmpo-cmds of the Operation lmpo-operation . lmpo-cmd Description { add ; Annotation types } add annotation to the plot. { textann ; ann#1 :x; Text annotation properties } set the properties of the x-th text annotation. { pointann ; ann#1 :x; Text annotation properties } set the properties of the x-th point annotation. { lineann ; ann#1 :x; Line annotation properties } set the properties of the x-th line annotation. Anotation types using the add cmd one could set annotation listed in the following table. Anotation type Description { type: : text ; xpos :x; ypos :x; text-content :x } add a text annotation at ( xpos , ypos )-position to the plot title. { type: : point ; xpos :x; text-content :x } add a point annotation at xpos -position to the plot title. { type: : hline ; ypos :x } add a horizontal line annotation at ypos -position to the plot title. { type: : vline ; xpos :x } add a horizontal line annotation at xpos -position to the plot title. Text annotation properties Text annotation properties are listed in the following table. Property Description { text-color :x } set text color of the text annotation. Color has the hex format #ffffff00. { background :x } set background of the text annotation. Color has the hex format #ffffff00. { text-fontsize :x } set text fontsize of the text annotation. { text-content :x } set text of the text annotation. Point annotation properties Point annotation properties are listed in the following table. Property Description { text-color :x } set text color of the point annotation. Color has the hex format #ffffff00. { color :x } set color of the point annotation. Color has the hex format #ffffff00. { text-fontsize :x } set text font size of the point annotation. { text-content :x } set text of the point annotation. Line annotation properties Line annotation properties are listed in the following table. Property Description { text-color :x } set text color of the line annotation. Color has the hex format #ffffff00. { color :x } set color of the line. Color has the hex format #ffffff00. { text-fontsize :x } set text font size of the line annotation. { text-orientation :{horizontal,vertical} } set the text orientation of the line annotation. { line-style :x } set text of the line annotation. { line-thickness :x } set line thickniss of the line annotation. <Operation Name=\"Annotation\"> <Value> <anyType xsi:type=\"xsd:string\">add; type:text;xpos:5;text-content:Centered Text</anyType> <anyType xsi:type=\"xsd:string\">add; type:text;xpos:7;text-content:topleft Text</anyType> <anyType xsi:type=\"xsd:string\">add; type:point;xpos1:3;xpos2:7</anyType> <anyType xsi:type=\"xsd:string\">add; type:hline;ypos1:-1000;ypos2:1000</anyType> <anyType xsi:type=\"xsd:string\">add; type:vline;xpos1:2;xpos2:6</anyType> <anyType xsi:type=\"xsd:string\">textann; ann#:1; text-color:#ff0000ff; text-fontsize:12 </anyType> <anyType xsi:type=\"xsd:string\">textann; ann#:2; text-color:#ff00ff00; text-fontsize:12 </anyType> <anyType xsi:type=\"xsd:string\">textann; ann#:3; text-color:#ffff0000; text-fontsize:12 </anyType> <anyType xsi:type=\"xsd:string\">textann; ann#:4; text-color:#ff800000; text-fontsize:12 </anyType> <anyType xsi:type=\"xsd:string\">lineann; ann#:1; color:#ff0000ff; text-color:#ff0000ff; text-fontsize:12 </anyType> <anyType xsi:type=\"xsd:string\">lineann; ann#:2; color:#ff00ff00; text-color:#ff00ff00; text-fontsize:12 </anyType> <anyType xsi:type=\"xsd:string\">lineann; ann#:3; color:#ffff0000; text-color:#ffff0000; text-fontsize:12 </anyType> <anyType xsi:type=\"xsd:string\">lineann; ann#:4; color:#ff800000; text-color:#ff800000; text-fontsize:12 </anyType> <anyType xsi:type=\"xsd:string\">pointann; ann#:1; color:#ff0000ff; text-color:#ff0000ff; text-fontsize:12 </anyType> <anyType xsi:type=\"xsd:string\">pointann; ann#:2; color:#ff00ff00; text-color:#ff00ff00; text-fontsize:12 </anyType> <anyType xsi:type=\"xsd:string\">pointann; ann#:3; color:#ffff0000; text-color:#ffff0000; text-fontsize:12 </anyType> <anyType xsi:type=\"xsd:string\">pointann; ann#:4; color:#ff800000; text-color:#ff800000; text-fontsize:12 </anyType> </Value> </Operation> Figure manipulation FigureOperation operation The FigureProperty lmpo-operation contains a varios actions. It's value consists of a collection of signal manipulation commands lmpo-cmd . A \" lmpo-cmd \" consists of cmd-name \" italic , polt \" and list of cmd-config seperated by a semicolon \";\" or semicolon+space \"; \". A cmd-config consists of a keyword \" polt \" and a value, they are seperated by a colon \":\" or by a colon+space \": \". Some cmd_configs are valueless. The following table describes all possible lmpo-cmds of the Figure lmpo-operation . lmpo-cmd Description { figure ; figure properties } set the figure's properties. Figure properties using the plot cmd one could set some plot properties listed in the following table. figure property Description { title :x } changes the figure title. { title-color :x } changes the title's color of the figure. Color's value format is ARGB (#FFFFFFFF). { title-fontsize :x } set the title font size. { title-font :x } set the title font type. possible font types (not implemented) { title-fontweight :x } set the title font weight. possible font weights x{bold,normal}. { title-background :x } set the title background color. Color's value format is ARGB (#FFFFFFFF). { window-title :x } changes the title of the figure window. { background :x } set the background color of the plot. Color's value format is ARGB (#FFFFFFFF). { width :x } set the width of the figure window in pixel. { height :x } set the height of the figure window in pixel. { dark-theme :x } toggle the dark theme on/off x{on,off}. { rescale :x } rescale all figure plots. <FigureActions> <Operation Name=\"FigureProperty\"> <Value> <anyType xsi:type=\"xsd:string\">figure; title:Test file; title-color:#fff0f0f0; title-fontsize:18; title-fontweight:bold; title-background:#ef202020; width:900; height:900 </anyType> </Value> </Operation> <Operation Name=\"PlotProperty\"> <Value> <anyType xsi:type=\"xsd:string\">plot; grid:on;title:Polynom output; title-color:#fff0f0f0; title-fontsize:14; border-color:#ff505050; background:#ef202020; legend-text-color:#fff0f0f0</anyType> <anyType xsi:type=\"xsd:string\">tracker-string-format;format: {0}\\n{1}: {2:0.00####}\\n{3}: {4:0.00###} </anyType> <anyType xsi:type=\"xsd:string\">curves-color; curve#1:#ff0000ff; curve#2:#ff00ff00; curve#3:#ffff0000; curve#4:#ff800000; curve#5:#ffff00ff; curve#6:#ff0080ff; curve#7:#ffffff00; curve#8:#ff8080ff; curve#9:#30408080; curve#10:#ff808000</anyType> <anyType xsi:type=\"xsd:string\">curve; curve#:1;line-style:dash</anyType> <anyType xsi:type=\"xsd:string\">add-curve-from-csv;file:\\\\rafs05\\transfer\\mshat\\ToDelete\\Samba19x Data\\LoggingTool Data\\\\Book1.csv</anyType> <anyType xsi:type=\"xsd:string\">xaxis; fontsize: 12; text-color:#fff0f0f0; label-color: #fff0f0f0; label-fontsize: 12 </anyType> <anyType xsi:type=\"xsd:string\">xaxis; minor-grid-color:#ff606060; major-grid-color: #ff707070; tick-color: #ff909090 </anyType> <anyType xsi:type=\"xsd:string\">yaxis; fontsize: 12; text-color:#fff0f0f0; label-color: #fff0f0f0; label-fontsize: 12 </anyType> <anyType xsi:type=\"xsd:string\">yaxis; minor-grid-color:#ff606060; major-grid-color: #ff707070; tick-color: #ff909090 </anyType> </Value> </Operation> <Operation Name=\"Annotation\"> <Value> <anyType xsi:type=\"xsd:string\">add; type:text;xpos:5;text-content:Centered Text</anyType> <anyType xsi:type=\"xsd:string\">add; type:text;xpos:7;text-content:topleft Text</anyType> <anyType xsi:type=\"xsd:string\">add; type:point;xpos1:3;xpos2:7</anyType> <anyType xsi:type=\"xsd:string\">add; type:hline;ypos1:-1000;ypos2:1000</anyType> <anyType xsi:type=\"xsd:string\">add; type:vline;xpos1:2;xpos2:6</anyType> <anyType xsi:type=\"xsd:string\">textann; ann#:1; text-color:#ff0000ff; text-fontsize:12 </anyType> <anyType xsi:type=\"xsd:string\">textann; ann#:2; text-color:#ff00ff00; text-fontsize:12 </anyType> <anyType xsi:type=\"xsd:string\">textann; ann#:3; text-color:#ffff0000; text-fontsize:12 </anyType> <anyType xsi:type=\"xsd:string\">textann; ann#:4; text-color:#ff800000; text-fontsize:12 </anyType> <anyType xsi:type=\"xsd:string\">lineann; ann#:1; color:#ff0000ff; text-color:#ff0000ff; text-fontsize:12 </anyType> <anyType xsi:type=\"xsd:string\">lineann; ann#:2; color:#ff00ff00; text-color:#ff00ff00; text-fontsize:12 </anyType> <anyType xsi:type=\"xsd:string\">lineann; ann#:3; color:#ffff0000; text-color:#ffff0000; text-fontsize:12 </anyType> <anyType xsi:type=\"xsd:string\">lineann; ann#:4; color:#ff800000; text-color:#ff800000; text-fontsize:12 </anyType> <anyType xsi:type=\"xsd:string\">pointann; ann#:1; color:#ff0000ff; text-color:#ff0000ff; text-fontsize:12 </anyType> <anyType xsi:type=\"xsd:string\">pointann; ann#:2; color:#ff00ff00; text-color:#ff00ff00; text-fontsize:12 </anyType> <anyType xsi:type=\"xsd:string\">pointann; ann#:3; color:#ffff0000; text-color:#ffff0000; text-fontsize:12 </anyType> <anyType xsi:type=\"xsd:string\">pointann; ann#:4; color:#ff800000; text-color:#ff800000; text-fontsize:12 </anyType> </Value> </Operation> </FigureActions> Appendix Definitions spfm-operation spfm : \" S ignals P lots and F igures M anipulation\". Note spfm-operation : contains different auto measurement actions. It basically consists of a collection of operation-name and optionally a value. It's value contains a list of spfm commands \" spfm-cmd \". Note Some spfm-operation are valueless. They don't have value. spfm-cmd Note spfm-cmd : consists of cmd-name \" italic , polt \" and optionally a list of cmd-config objects seperated by a semicolon \";\" or semicolon+space \"; \". cmd-name and cmd_config objects are seperated by a semicolon \";\" or semicolon+space \"; \". Note Some spfm-cmd are cmd-config-less. They don't have any cmd-configs. cmd-config Note cmd-config : consists of config-keyword \" polt \" and its config-value. The config-keyword and its value are seperated by colon \":\" or colon+space \": \". Some cmd_configs are valueless. They don't have a value. .LoggManXml file complete example This is a sample file for .LoggManXml file. <?xml version=\"1.0\" encoding=\"utf-8\"?> <SignalAndFigureConfiguration xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" FileVersion=\"1\"> <OpenMultiDataFile>false</OpenMultiDataFile> <!-- Number of logged data files to open--> <DataFilesNumber>1</DataFilesNumber> <Signals IsActive=\"true\"> <SignalActions> <Operation Name=\"SignalOperation\"> <Value> <!-- multiply the first logged signal of first opened file with 0.10526--> <anyType xsi:type=\"xsd:string\">mult; sig: F1S1; factor: 0.10526</anyType> <anyType xsi:type=\"xsd:string\">mult; sig: F1S2; factor: 0.10526</anyType> <anyType xsi:type=\"xsd:string\">mult; sig: F1S3; factor: 0.10526</anyType> <anyType xsi:type=\"xsd:string\">mult; sig: F1S4; factor: 0.10526</anyType> <anyType xsi:type=\"xsd:string\">mult; sig: F1S5; factor: 0.10526</anyType> <anyType xsi:type=\"xsd:string\">mult; sig: F1S6; factor: 0.10526</anyType> <anyType xsi:type=\"xsd:string\">mult; sig: F1S7; factor: 3.0525e-4</anyType> <anyType xsi:type=\"xsd:string\">mult; sig: F1S8; factor: 3.0525e-4</anyType> <anyType xsi:type=\"xsd:string\">mult; sig: F1S9; factor: 3.0525e-4</anyType> <anyType xsi:type=\"xsd:string\">mult; sig: F1S10; factor: 3.0525e-4</anyType> <anyType xsi:type=\"xsd:string\">mult; sig: F1S11; factor: 3.0525e-4</anyType> <!-- build average (average length = 3) of signal F1S1 and save the result to newsig AvgProxV1--> <anyType xsi:type=\"xsd:string\">average; sig: F1S1; length: 3; newsig: AvgProxV1</anyType> <anyType xsi:type=\"xsd:string\">average; sig: F1S2; length: 3; newsig: AvgProxV2</anyType> <anyType xsi:type=\"xsd:string\">average; sig: F1S3; length: 3; newsig: AvgProxV3</anyType> <anyType xsi:type=\"xsd:string\">std; sig: F1S1; param: $3SigmaProxV1; mult: 3</anyType> <anyType xsi:type=\"xsd:string\">std; sig: F1S2; param: $3SigmaProxV2; mult: 3</anyType> <anyType xsi:type=\"xsd:string\">std; sig: F1S3; param: $3SigmaProxV3; mult: 3</anyType> <anyType xsi:type=\"xsd:string\">std; sig: AvgProxV1; param: $3SigmaAvgProxV1; mult: 3</anyType> <anyType xsi:type=\"xsd:string\">std; sig: AvgProxV2; param: $3SigmaAvgProxV2; mult: 3</anyType> <anyType xsi:type=\"xsd:string\">std; sig: AvgProxV3; param: $3SigmaAvgProxV3; mult: 3</anyType> </Value> </Operation> </SignalActions> </Signals> <Figures> <!--Fugure#1 !--> <Figure IsActive=\"true\" Title=\"Proximity Sensor\" RowNumber=\"3\" ColumnNumber=\"2\"> <Subplots> <Subplot Row=\"1\" Column=\"1\"> <SubPlotActions> <Operation Name=\"PlotProperty\"> <Value> <anyType xsi:type=\"xsd:string\">yaxis; label:ProxV1[um]; major-grid-width:5; minor-grid-width:1;</anyType> <anyType xsi:type=\"xsd:string\">curves; sig:F1S1</anyType> </Value> </Operation> <Operation Name=\"Annotation\"> <Value> <anyType xsi:type=\"xsd:string\">add; type: text; xpos: 10000; ypos: -11; text-content: ProxV1 3Sigma[um]= $3SigmaProxV1</anyType> <anyType xsi:type=\"xsd:string\">textann; ann#: 1; text-color:#FF0000FF; text-fontsize: 15; background: #40505050; </anyType> </Value> </Operation> </SubPlotActions> </Subplot> <Subplot Row=\"1\" Column=\"2\"> <SubPlotActions> <Operation Name=\"PlotProperty\"> <Value> <anyType xsi:type=\"xsd:string\">yaxis; label:ProxH1[um]</anyType> <anyType xsi:type=\"xsd:string\">curves; sig:F1S4</anyType> </Value> </Operation> </SubPlotActions> </Subplot> <Subplot Row=\"2\" Column=\"1\"> <SubPlotActions> <Operation Name=\"PlotProperty\"> <Value> <anyType xsi:type=\"xsd:string\">yaxis; label:ProxV2[um]; major-grid-width:5; minor-grid-width:1;</anyType> <anyType xsi:type=\"xsd:string\">curves; sig:F1S2</anyType> </Value> </Operation> <Operation Name=\"Annotation\"> <Value> <anyType xsi:type=\"xsd:string\">add; type: text; xpos: 10000; ypos: -11; text-content: ProxV2 3Sigma[um]= $3SigmaProxV2</anyType> <anyType xsi:type=\"xsd:string\">textann; ann#: 1; text-color:#FF0000FF; text-fontsize: 15; background: #40505050; </anyType> </Value> </Operation> </SubPlotActions> </Subplot> <Subplot Row=\"2\" Column=\"2\"> <SubPlotActions> <Operation Name=\"PlotProperty\"> <Value> <anyType xsi:type=\"xsd:string\">yaxis; label:ProxH2[um]</anyType> <anyType xsi:type=\"xsd:string\">curves; sig:F1S5</anyType> </Value> </Operation> </SubPlotActions> </Subplot> <Subplot Row=\"3\" Column=\"1\"> <SubPlotActions> <Operation Name=\"PlotProperty\"> <Value> <anyType xsi:type=\"xsd:string\">yaxis; label:ProxV3[um]; major-grid-width:5; minor-grid-width:1;</anyType> <anyType xsi:type=\"xsd:string\">curves; sig:F1S3</anyType> </Value> </Operation> <Operation Name=\"Annotation\"> <Value> <anyType xsi:type=\"xsd:string\">add; type: text; xpos: 10000; ypos: -11; text-content: ProxV3 3Sigma[um]= $3SigmaProxV3</anyType> <anyType xsi:type=\"xsd:string\">textann; ann#: 1; text-color:#FF0000FF; text-fontsize: 15; background: #40505050; </anyType> </Value> </Operation> </SubPlotActions> </Subplot> <Subplot Row=\"3\" Column=\"2\"> <SubPlotActions> <Operation Name=\"PlotProperty\"> <Value> <anyType xsi:type=\"xsd:string\">yaxis; label:ProxH3[um]</anyType> <anyType xsi:type=\"xsd:string\">curves; sig:F1S6</anyType> </Value> </Operation> </SubPlotActions> </Subplot> </Subplots> <FigureActions> <Operation Name=\"PlotProperty\"> <Value> <anyType xsi:type=\"xsd:string\">plot; grid:on</anyType> <anyType xsi:type=\"xsd:string\">xaxis; label:time[sec.];min:0</anyType> </Value> </Operation> </FigureActions> </Figure> <!--2 figure !--> <Figure IsActive=\"true\" Title=\"Valve Output\" RowNumber=\"5\" ColumnNumber=\"1\"> <Subplots> <Subplot Row=\"1\" Column=\"1\"> <SubPlotActions> <Operation Name=\"PlotProperty\"> <Value> <anyType xsi:type=\"xsd:string\">curves; sig:F1S7</anyType> <anyType xsi:type=\"xsd:string\">yaxis; label:Valve1[V]</anyType> </Value> </Operation> </SubPlotActions> </Subplot> <Subplot Row=\"2\" Column=\"1\"> <SubPlotActions> <Operation Name=\"PlotProperty\"> <Value> <anyType xsi:type=\"xsd:string\">yaxis; label:Valve2[V]</anyType> <anyType xsi:type=\"xsd:string\">curves; sig:F1S8</anyType> </Value> </Operation> </SubPlotActions> </Subplot> <Subplot Row=\"3\" Column=\"1\"> <SubPlotActions> <Operation Name=\"PlotProperty\"> <Value> <anyType xsi:type=\"xsd:string\">yaxis; label:Valve3[V]</anyType> <anyType xsi:type=\"xsd:string\">curves; sig:F1S9</anyType> </Value> </Operation> </SubPlotActions> </Subplot> <Subplot Row=\"4\" Column=\"1\"> <SubPlotActions> <Operation Name=\"PlotProperty\"> <Value> <anyType xsi:type=\"xsd:string\">yaxis; label:Pvout[bar]</anyType> <anyType xsi:type=\"xsd:string\">curves; sig:F1S10</anyType> </Value> </Operation> </SubPlotActions> </Subplot> <Subplot Row=\"5\" Column=\"1\"> <SubPlotActions> <Operation Name=\"PlotProperty\"> <Value> <anyType xsi:type=\"xsd:string\">yaxis; label:Pin3[bar]</anyType> <anyType xsi:type=\"xsd:string\">curves; sig:F1S11</anyType> </Value> </Operation> </SubPlotActions> </Subplot> </Subplots> <FigureActions> <Operation Name=\"PlotProperty\"> <Value> <anyType xsi:type=\"xsd:string\">plot; grid:on</anyType> <anyType xsi:type=\"xsd:string\">xaxis; label:time[sec.];min:0</anyType> </Value> </Operation> </FigureActions> </Figure> <!--3 figure !--> <Figure IsActive=\"true\" Title=\"Average Vertical Proximity Sensor\" RowNumber=\"3\" ColumnNumber=\"1\"> <Subplots> <Subplot Row=\"1\" Column=\"1\"> <SubPlotActions> <Operation Name=\"PlotProperty\"> <Value> <anyType xsi:type=\"xsd:string\">yaxis; label:Avg ProxV1[um]; major-grid-width:5; minor-grid-width:1</anyType> <anyType xsi:type=\"xsd:string\">curves; sig:AvgProxV1</anyType> </Value> </Operation> <Operation Name=\"Annotation\"> <Value> <anyType xsi:type=\"xsd:string\">add; type: text; xpos: 10000; ypos: -11; text-content: ProxV1 3Sigma[um]= $3SigmaAvgProxV1</anyType> <anyType xsi:type=\"xsd:string\">textann; ann#: 1; text-color:#FF0000FF; text-fontsize: 15; background: #40505050; </anyType> </Value> </Operation> </SubPlotActions> </Subplot> <Subplot Row=\"2\" Column=\"1\"> <SubPlotActions> <Operation Name=\"PlotProperty\"> <Value> <anyType xsi:type=\"xsd:string\">yaxis; label:Avg ProxV2[um]; major-grid-width:5; minor-grid-width:1</anyType> <anyType xsi:type=\"xsd:string\">curves; sig:AvgProxV2</anyType> </Value> </Operation> <Operation Name=\"Annotation\"> <Value> <anyType xsi:type=\"xsd:string\">add; type: text; xpos: 10000; ypos: -11; text-content: ProxV2 3Sigma[um]= $3SigmaAvgProxV2</anyType> <anyType xsi:type=\"xsd:string\">textann; ann#: 1; text-color:#FF0000FF; text-fontsize: 15; background: #40505050; </anyType> </Value> </Operation> </SubPlotActions> </Subplot> <Subplot Row=\"3\" Column=\"1\"> <SubPlotActions> <Operation Name=\"PlotProperty\"> <Value> <anyType xsi:type=\"xsd:string\">yaxis; label:Avg ProxV3[um]; major-grid-width:5; minor-grid-width:1</anyType> <anyType xsi:type=\"xsd:string\">curves; sig:AvgProxV3</anyType> </Value> </Operation> <Operation Name=\"Annotation\"> <Value> <anyType xsi:type=\"xsd:string\">add; type: text; xpos: 10000; ypos: -11; text-content: ProxV3 3Sigma[um]= $3SigmaAvgProxV3</anyType> <anyType xsi:type=\"xsd:string\">textann; ann#: 1; text-color:#FF0000FF; text-fontsize: 15; background: #40505050; </anyType> </Value> </Operation> </SubPlotActions> </Subplot> </Subplots> <FigureActions> <Operation Name=\"PlotProperty\"> <Value> <anyType xsi:type=\"xsd:string\">plot; grid:on</anyType> <anyType xsi:type=\"xsd:string\">xaxis; label:time[sec.];min:0</anyType> </Value> </Operation> </FigureActions> </Figure> </Figures> </SignalAndFigureConfiguration> '''"
  },
  "GuiUserManuals/idefigureviewer/idefigureviewer_um.html": {
    "href": "GuiUserManuals/idefigureviewer/idefigureviewer_um.html",
    "title": "Language | SAMBA19x Website",
    "keywords": "Integrated Dynamics Engineering IDEFigureViewer User Manual AUTHOR(S): Moneer Shatat-Herres REVISION: 00 DATE OF PRINT: December 12, 2017 DOCUMENT CHANGE & HISTORY RECORD Name Last Update Status Version ECR/PR/IP Comment MSHAT 12.12.2017 Draft 00 Modification related to IDEFigureViewer RC02 1.0.0.0 Note Although this document has been prepared with the utmost care, errors of any kind cannot be totally discounted. The contents of this document may be periodically revised, amended or changed otherwise by the originator without notice. You are invited to report any deficiencies / recommendations to IDE. Note Windows 7 ®, Windows 8 ® are registered trademarks of the Microsoft Corporation, USA. © Copyright 2017, Integrated Dynamics Engineering GmbH The IDEFigureViewer tool has been built to visualize the *.idefigure files. The idefigure file are plot-files generated by the various SAMBA19x applications (Sidimat19x, Sidimat19xA, View3D19x and LoggingTool). Furthermore it allows modifying the plots and then to save it. Language This manual is originally written in English language. Introduction This document describes how to use the IDEFigureViewer tool, open and modify an idefigure plot file. Intended Audience The software and this document is intended for users of an IDE vibration isolation system. Requirements In order to run this software, the following requirements must be met: Windows 7®, Windows 8®, or later version. Personal computer with x86- or x64-based microprocessor 2.8 GHz or higher and 4GB RAM or higher are recommended. SVGA-resolution with a minimum of 1600x900 pixel and 16-Bits high colors. Mouse or compatible pointing device Microsoft .Net Frame work 4.5.2 or higher. Contact Integrated Dynamics Engineering GmbH Hermannstrasse 9-13 65479 Raunheim, GERMANY Phone: +49 (0)6142 9400-0 INSTALLATION Copy the installation package from the CD to your PC. Read the SAMBA19x Installation Guide document. Getting Started Your already install the last SAMBA19x version and your PC meets the reguirements above Start the IDEFigureViewer program with a right-click on the IDEFigureViewer desktop shortcut and select Run as Admin. Alternative you could start it from the window start menu. Start-Up [!Note] Idefigure files could be opened by drag and drop the file or by using the open file toolbar button. Description The new IDEFigureViewer tools basically consists of two main panels “Control buttons toolbar and Graphs panel”. The control panel contains settings and the graphs panel displays the plots of the measured signal. (See figure 4.1.1) Control Panel The control panel contains on the top a control buttons and a few setting tabs “Connection, Graphs, Excitation, Trace Setting …etc”. Figure 4.1.1: Control Panel Overview. Control Buttons Toolbar The control buttons bar consists of a few buttons to save, open idefigure file and to modify plots. Control Item Description Auto rescales all plots. Opens an idefigure file. Saves the opened idefigure file. Copies graph panel to clipboard. Saves the graph panel to jpg file. Toggles the grid of all plots on/off. Toggles the plot context menu on/off. Opens this user manual. Table 4.1.1: Control buttons bar How to open file There are three way to open an idefigure with the IDEFigureViewer: By drag and drop the idefigure file on the IDEFigureViewer desktop symbol “link”. This will start the IDEFigureViewer and open the dropped file. Using the “open ifefigure file” toolbar button (see table above). By drag and drop a file on an already started IDEFigureViewer window. When a file is successful opened then its path appears in the title bar. Figure 4.1.2: Open idefigure. Plot context menu The context menu is disabled by default. To enable it toggles the plot context menu button from toolbar on. Figure 4.1.3: plot menu enabled. Figure 4.1.4: Plot Context Menu. Context Menu Item Description Manipulate Curves Allows modifying a curve by using a polynomial equation first order. Curves Toggles displaying the curves on/off. Delete curve Deletes a curve. Add marker Adds a new point marker to a curve. Add line marker Adds a new line marker t a curve. Delete markers Deletes all markers of the plot. Add Curve from CSV Adds a curve from a csv file to the plot. The CSV consists of two column separated by space, semicolon or comma. Legend Toggles displaying the legned of the plot on/off. Rescale Rescales the plot. Table 4.1.2: Plot Context Menu Items. Plot Operations The next table contains some plots operations key shortcuts. Note : The mouse right button operations in the next table are enabled only when the plot context menu is disabled. Control Item Key shortcut Add marker Left shift key+ left mouse button double click. Select/deselect marker Left shift key + left mouse button click. Delete selected marker Del key. Move selected marker Left shift key+ left/right arrow key. Move marker Left mouse down + mouse move Plot panning Right mouse down + mouse move Zooming Mouse wheel. Zoom out Ctrl key + right mouse button double click. Zoom selected plot area Ctrl key + right mouse button down + mouse move. Open plot properties dialog Left mouse button double click. Table 4.1.4: Plot operation key shortcuts. Plot Properties Dialog The plot property dialog allows the user to modify the plot properties of the selected plot or all plots. Control Item Description Changes the figure title and its font size. Changes plot title and its font size. Toggles the legend on/off. Toggles grid on/off. Toggles accepting the changes for all figure plots on/off. Axis label. Axis scale minimum. Axis scale maximum. Axis grid minor step. Axis grid major step. Axis font size. Axis scale type. Table 4.1.6: Plot Property Window Control Items. Figure 4.1.7: Plot property window. idefigure mat files structure The IDEFigures (*.sidimat19x are saved in matlab format. .idefigure matlab structure Description IDEFigure consist of MxN Graph-Matrix (Plot-Matrix, Model-Matrix) where M is the RowNumber and N is the ColumnNumber of the iDEFigure. Graph-Matrix Structure by 3x3 Graph-Matrix: Model0 Model1 Model2 Model3 Model4 Model5 Model6 Model7 Model8 >> xx=load(\"xrot_raw_frf_ol_m.idefigure\") xx = //IDEFigure structure scalar structure containing the fields: MeasurementType = IdeFigure //this is the measurement type Version = 1 // IDEFigure Structure version FigureTitle = //this is title of the figure FigureTitleFontSize = 14 //font size of the figure title RowNumber = 3 //Row numbers in figure ColumnNumber = 1 //column number in figure, the graph number Model0 = // Graph-Structure, first graph in the 3x1 Graph-Matrix scalar structure containing the fields: Version = 1 // Graph structure Version Title = //Title of the Graph LogX = 1 //Logarithmic x-axis (1: logarithmic, 0:linear) LogY = 0 //Logarithmic x-axis (1: logarithmic, 0:linear) Grid = on //Grid status (on,off) Legend = 1 //Legend status (0,1) Xaxis = //x-axis structure scalar structure containing the fields: Version: 1x1 scalar //Version of the axis structure Title: 0x0 sq_string //Label of the x-axis TitleFontSize: 1x1 scalar //title font size Prop: 1x4 matrix //Axis Scale Properties containing Scale {min max minorstep majorstep} Yaxis = //Y-axis structure (see x-axis) scalar structure containing the fields: Version: 1x1 scalar Title: 1x14 sq_string TitleFontSize: 1x1 scalar Prop: 1x4 matrix Annotations = //Annotation structure scalar structure containing the fields: Version: 1x1 scalar // Annotations structure Version Annotation0: 1x1 scalar struct //Annotation structure Annotation1: 1x1 scalar struct //Annotation structure Annotation2: 1x1 scalar struct //Annotation structure Series = //Series “Curves” structure scalar structure containing the fields: Serie1: 1x1 scalar struct //Serie “Curve” structure Model1 = Table 5.1.1: IDEFigure matlab structure. >> xx.Model0.Series.Serie1 ans = scalar structure containing the fields: Title = Vel Xrot Raw/Excitation //Serie Title Serie = //2 dimensional array containing the (x,y) pairs. Columns 1 through 9: 0.00000 0.24000 0.48000 0.72000 0.96000 1.20000 1.44000 1.68000 1.92000 -47.01777 -19.74275 -27.61559 -13.96998 -4.44243 -1.02031 -1.81286 -3.54399 4.22259 Columns 10 through 18: 2.16000 2.40000 2.64000 2.88000 3.12000 3.36000 3.60000 3.84000 4.08000 8.07258 16.54702 19.15587 19.87028 20.90579 21.40222 22.44204 20.61854 17.68427 Columns 19 through 27: 4.32000 4.56000 4.80000 5.04000 5.28000 5.52000 5.76000 6.00000 6.24000 15.69454 14.56121 13.44503 12.86091 12.07755 11.50960 10.28915 9.97069 9.78908 Columns 28 through 36: 6.48000 6.72000 6.96000 7.20000 7.44000 7.68000 7.92000 8.16000 8.40000 8.78665 8.44608 8.06616 7.70098 7.56921 7.34422 6.54481 6.27385 5.96678 Table 5.1.2: Serie matlab structure. >> xx.Model0.Annotations ans = scalar structure containing the fields: Version = 1 //Structure Version Annotation0 = scalar structure containing the fields: Type = Point //Annotation type Position = //Annotation Position in graph 3.6000 22.4420 //Annotation Text to display Text = X:3.6 Y:22.442 Table 5.1.3: Annotation matlab Structure. Troubleshooting Can’t run IDEFigureViewer Ensure that the .Net framework 4.5.2 or higher is installed. Run the IDEFigureViewer as administrator. If a failure occurs that cannot be solved, contact our technical support. Phone: +49 (0) 6142 94000 Known Bugs and Problems The following section lists the currently known bugs. These bugs will be resolved in future versions of the software. Description Date Version Status Solved"
  },
  "GuiUserManuals/sidimat19xa/sidimat19xa_um.html": {
    "href": "GuiUserManuals/sidimat19xa/sidimat19xa_um.html",
    "title": "Introduction | SAMBA19x Website",
    "keywords": "Integraded Dynamics Engineering SiDiMaT19xA User Manual SiDiMaT19xA AUTHOR(S): Moneer Shatat-Herres REVISION: 00 DATE OF PRINT: December 12, 2017 DOCUMENT CHANGE & HISTORY RECORD Name Last Update Status Version ECR/PR/IP Comment MSHAT 12.12.2017 Released 00 Modification related to SiDiMaT19xA RC02 1.0.0.0 Notice! Although this document has been prepared with the utmost care, errors of any kind cannot be totally discounted. The contents of this document may be periodically revised, amended or changed otherwise by the originator without notice. You are invited to report any deficiencies / recommendations to IDE. Windows 7 ®, Windows 8 ® are registered trademarks of the Microsoft Corporation, USA. © Copyright 2017, Integrated Dynamics Engineering GmbH Introduction The SiDiMaT19xA tool has been built to visualize the IDE-Opticon controller signals supported by the opticon firmware. Furthermore SiDiMaT19xA allows to start an auto measurement containing of my SiDiMaT19xAa measurements. Remark : SiDiMaT19xA is not compatible for controller with a running firmware version older than 3.3.xx. Language This manual is originally written in English language. Document This document describes how to use the SiDiMaT19xA tool for the opticon controller. It services to display nearly all opticon firmware I/O-Signals. Furthermore it allows auto measuring using an auto-measurement file. Intended Audience The software and this document is intended for users of an IDE vibration isolation system. Requirements In order to run this software, the following requirements must be met: Windows 7®, Windows 8®, or later version. Personal computer with x86- or x64-based microprocessor 2.8 GHz or higher and 4GB RAM or higher are recommended. SVGA-resolution with a minimum of 1600x900 pixel and 16-Bits high colors. Mouse or compatible pointing device Microsoft .Net Frame work 4.5.2 or higher. Contact Integrated Dynamics Engineering GmbH Hermannstrasse 9-13 65479 Raunheim, GERMANY Phone: +49 (0)6142 9400-0 INSTALLATION Copy the installation package from the CD to your PC. Read the SAMBA19x Installation Guide document. Getting Started Your PC can communicate with the opticon controller with a USB connection or serial (RS232) connection. Use an A/B USB cable or a null modem cable. Make sure that the FTDI USB-To-Serial converter driver is installed. Start the SiDiMaT19xA program with a double click on the SiDiMaT19xA desktop shortcut. Alternative you could start it from the window start menu. Start-Up After the start of the program choose the connection device and confirm it with the “Connect” button. To talk to the controller SiDiMaT19xA uses the communication server like the other SAMBA software package tools. Note Ensure that the selected com port number is configured by the “Communication Server Configuration Tool”. Otherwise the connection will not be established. Figure 3.1.1: Communication Server Configuration Tool Note If you connect via the USB port, the port will be shown as an additional com port (Virtual Com Port). Figure 3.1.2: Connection with a controller. Description The new SiDiMaT19xA tools basically consists of two main panels “Control panel and Graphs panel”. The control panel contains settings and the graphs panel displays the plots of the measured signal. (See figure 4.1.1) Control Panel The control panel contains on the top a control buttons and a few setting tabs “Connection, Graphs, Excitation, Trace Setting …etc”. Figure 4.1.1: Control Panel Overview. Control Buttons Bar The control buttons bar consists of a few buttons to switch the between time and frequency response plots and to save, cache, open, save and add sidimat19xa measurement. Control Item Description Toggles to the time/spectrum plot view. Toggles to the frequency response plot view. Caches the current sidimat19x measurement. Deletes the last cached sidimat19x measurement. Adds a sidimat19x measurement to the current one. Opens a sidimat19x measurement. Saves the current sidimat19x measurement. Opens an auto measurement file and executes it. Table 4.1.1: Control buttons bar Connection Tab The “Connection” tab allows you to connect or disconnect to a controller. Figure 4.1.2: Connection tab. Com Server Ports shows the selected com ports could be used to talk to controller. Firmware Version Info contains the Firmware version info. System Config Info contains system respectevily firmware global parameter and features. About? contains info about third party software license, a link to open the gui user manual \"Help\" and GUI-Software info \"About?\". Use “ Connect ” button to establish the connection with the controller. Use “ Disconnect ” button to disconnect the communication. Use “ Terminate Comm Server and Connect ” button to close the Comm Server session, if one is already started and to connect with a new session. This option is recommended after a communication trouble. Use “ Update Comm Ports list ” button to refresh lists of the available com ports. Figure 4.1.3: Connect Page after a successful connection with controller. Excitation/Diag Tab Using the excitation tab the noise injection point, the excitation setting “type and parameters” and the excitation filter settings and usage could be adjusted. Figure 4.1.5: Excitation/Diag Tab. Control Item Description Click “Accept Change” button to accept the modification of the excitation setting and to send it to the controller. Specifies the excitation signal type. Toggles the noise filter usage On/Off and specifies the excitation filters. Specifies the injection node “signal” of the excitation signal. Table 4.1.2: Excitation Tab Control Items. Excitation Type Parameters White Noise “Gain [-1,+1]” the gain range [-1,+1] corresponds to [-32000, +32000 digits]. Sine Wave “Gain [-1,+1]” the gain range [-1,+1] corresponds to [-32000, +32000 digits]. Sine wave frequency in Hz. Duty Cycle “Gain [-1,+1]” the gain range [-1,+1] corresponds to [-32000, +32000 digits]. High Period in millisecond. During this period the signal amplitude equals the adjusted “Gain” Low Period in millisecond. During this period the signal amplitude is set to zero Chirp Sine “recursive” “Gain [-1,+1]” the gain range [-1,+1] corresponds to [-32000, +32000 digits]. Start “lowest” frequency of the chirp sine. End “Highest” frequency of the chirp sine. Time Period of the chirp sine in second. Table 4.1.3: Excitation Types and their Parameters. Trace Setting Tab The trace setting tab allows to configure all the trace parameter. Control Item Description Click “Channel0” button to select the first signal to be traced. Click “Channel1” button to select the second signal to be traced. Specifies the trace length. Specifies under sampling rate. Toggles the usage of the Anti-Aliasing filter On/Off. Specifies the average number of the measurement. Starts/Stops the measurement. This option appears only for firmware with fast data acquiring support. Enables this option to accelerate the trace data acquiring. Table 4.1.4: Trace Setting Tab Control Item. Figure 4.1.6: Trace Setting Tab. Figure 4.1.7: Trace Setting Tab with fast Data Load Support. Open/Save Sidimat Parameter Setting Tab Control Item Description Click to load sidimat parameters from a sidimat configuration file “ SiDiMaT19xAConfig ”. Click to save the actual sidimat parameters to a sidimat configuration file “ SiDiMaT19xAConfig ”. Table 4.1.6: Save/Load Sidimat Parameter Setting Control Items. Figure 4.1.9: Save/Load Sidimat Parameter Setting Tab. System Setting Figure 4.1.10: System Setting Tab. Measuring Helping Hand The measuring helping hand is a useful feature. It supports the user by measuring the axis of the control loop of the opticon firmware. Control Item Description Specifies the loop types of the axis which will be measured. Specifies after which stage “filter” the axis will be measured. Specifies the axis which will be measured. Table 4.1.7: Measuring Helping Hand Control Items. Figure 4.1.11: Measuring Helping Hand Tab. Offline Tuner The offline tuner gives the possibility to measure a FB-Loop axis raw input, to change its filters and to simulate its closed loop. When the user is satisfied with the result the adjusted filters setting could be accepted for the corresponding axis. Attention : The offline tuner is modelling the close-loop mathematically. By unsuitable filter setting (e.g. too high magnification) it has a wrong result. Be care full before accepting the filter setting. The offline tuner should only be used from trained persons. Figure 4.1.12: Offline Tuner. Control Item Description Activates the offline tuner. Measures the selected axis. Sends the filters setting of the selected axis to the controller. Generates open loop for testing purposes. Changes the filter setting of the selected axis. Table 4.1.8: Offline Tuner Control Items. Auto Tuning Procedure Follow the next step for to tune an FB-Loop axis offline: Measure the frequency response of the axis raw input (transfer function of the unfiltered axis). Activate the Offline Tuner check box. The filters of the measured axis will be loaded from the controller and the filtered and close-loop frequency response will be generated and displayed. The user could then change the filter setting and observe the result of the simulated close-loop until the desired result is reached. The found filters setting could be accepted and sent to controller by clicking the “Accept Filters” button. Help Figure 4.1.12: Help Tab. Graphs Panel There are three different graphs types which could be displayed in the graphs panel. The graph which will be displayed is adjustable by the graphs tab on the control panel. Time/Spectrum Graph Click time/spectrum button to display the time/spectrum graph. The time/spectrum graph consist of 4 plots. The two plots at the left side are showing the time signals of the measured “trace” signals. The two plots at the right display the spectrum of the measured signals. Figure 4.2.1: Time/Spectrum Graph. FRF/Phase/Coherence Graph Click frf/phase/coherence button to display the frf/phase/coherence graph. The frf/phase/coherence graph consists of 3 plots. The first one displays the transfer function “frequency response function” of the second trace signal above the first trace signal. The second plot displays the phase the frequency response. The third one shows the coherence of the two measured “trace” signal. Figure 4.2.2: FRF/Phase/Coherence Graph. Graphs Panel Toolbar menu Measurement mat files structure All sidimat measurement (*.sidimat19x, *.idefigure) will be saved in matlab format. .idefigure matlab structure Description IDEFigure consist of MxN Graph-Matrix (Plot-Matrix, Model-Matrix) where M is the RowNumber and N is the ColumnNumber of the iDEFigure. Graph-Matrix Structure by 3x3 Graph-Matrix: Model0 Model1 Model2 Model3 Model4 Model5 Model6 Model7 Model8 xx=load(\"xrot_raw_frf_ol_m.idefigure\") xx = //IDEFigure structure scalar structure containing the fields: MeasurementType = IdeFigure //this is the measurement type Version = 1 // IDEFigure Structure version FigureTitle = //this is title of the figure FigureTitleFontSize = 14 //font size of the figure title RowNumber = 3 //Row numbers in figure ColumnNumber = 1 //column number in figure, the graph number Model0 = // Graph-Structure, first graph in the 3x1 Graph-Matrix scalar structure containing the fields: Version = 1 // Graph structure Version Title = //Title of the Graph LogX = 1 //Logarithmic x-axis (1: logarithmic, 0:linear) LogY = 0 //Logarithmic x-axis (1: logarithmic, 0:linear) Grid = on //Grid status (on,off) Legend = 1 //Legend status (0,1) Xaxis = //x-axis structure scalar structure containing the fields: Version: 1x1 scalar //Version of the axis structure Title: 0x0 sq_string //Label of the x-axis TitleFontSize: 1x1 scalar //title font size Prop: 1x4 matrix //Axis Scale Properties containing Scale {min max minorstep majorstep} Yaxis = //Y-axis structure (see x-axis) scalar structure containing the fields: Version: 1x1 scalar Title: 1x14 sq_string TitleFontSize: 1x1 scalar Prop: 1x4 matrix Annotations = //Annotation structure scalar structure containing the fields: Version: 1x1 scalar // Annotations structure Version Annotation0: 1x1 scalar struct //Annotation structure Annotation1: 1x1 scalar struct //Annotation structure Annotation2: 1x1 scalar struct //Annotation structure Series = //Series “Curves” structure scalar structure containing the fields: Serie1: 1x1 scalar struct //Serie “Curve” structure Model1 = Table 5.1.1: IDEFigure matlab structure. >> xx.Model0.Series.Serie1 ans = scalar structure containing the fields: Title = Vel Xrot Raw/Excitation //Serie Title Serie = //2 dimensional array containing the (x,y) pairs. Columns 1 through 9: 0.00000 0.24000 0.48000 0.72000 0.96000 1.20000 1.44000 1.68000 1.92000 -47.01777 -19.74275 -27.61559 -13.96998 -4.44243 -1.02031 -1.81286 -3.54399 4.22259 Columns 10 through 18: 2.16000 2.40000 2.64000 2.88000 3.12000 3.36000 3.60000 3.84000 4.08000 8.07258 16.54702 19.15587 19.87028 20.90579 21.40222 22.44204 20.61854 17.68427 Columns 19 through 27: 4.32000 4.56000 4.80000 5.04000 5.28000 5.52000 5.76000 6.00000 6.24000 15.69454 14.56121 13.44503 12.86091 12.07755 11.50960 10.28915 9.97069 9.78908 Columns 28 through 36: 6.48000 6.72000 6.96000 7.20000 7.44000 7.68000 7.92000 8.16000 8.40000 8.78665 8.44608 8.06616 7.70098 7.56921 7.34422 6.54481 6.27385 5.96678 Table 5.1.2: Serie matlab structure. >> xx.Model0.Annotations ans = scalar structure containing the fields: Version = 1 //Structure Version Annotation0 = scalar structure containing the fields: Type = Point //Annotation type Position = //Annotation Position in graph 3.6000 22.4420 //Annotation Text to display Text = X:3.6 Y:22.442 Table 5.1.3: Annotation matlab Structure. .sidimat19x matlab structure Description IDEFigure consists of one or more of opticon trace data “RawDat** x **”. >> xx=load(\"xrot_stage7_ocl.sidimat19x\") xx = scalar structure containing the fields: MeasurementType = SiDiMat19x Version = 1 RawDat1 = scalar structure containing the fields: Version = 1 //Structure version SampleRate = 6000 //controller sample rate during tracing UnderSample = 5 //trace under sample number SampleNumber = 5000 // traced data number AverageNumber = 4 // trace averages SignalName = //Trace signals name scalar structure containing the fields: Sig0: 1x12 sq_string Sig1: 1x15 sq_string DataSet = //Trace data array 2x(sampleNumber*AverageNumber)-array. This array contains the traced data of the two trace signals. Columns 1 through 8: -2.7344e+003 -2.9265e+003 -2.6285e+003 -2.6919e+003 -2.8300e+003 -2.6299e+003 -2.6821e+003 -2.4236e+003 -2.7434e+003 -2.7056e+003 -2.6472e+003 -2.6658e+003 -2.6704e+003 -2.6295e+003 -2.6498e+003 -2.6562e+003 Columns 9 through 16: -2.0755e+003 -2.4358e+003 -2.8244e+003 -2.5403e+003 -2.3636e+003 -2.9963e+003 -2.9254e+003 -2.5269e+003 -2.6239e+003 -2.6445e+003 -2.6592e+003 -2.6326e+003 -2.5962e+003 -2.6090e+003 -2.5843e+003 -2.5773e+003 Columns 17 through 24: Table 5.2.1: .sidimat19x matlab structure. Troubleshooting Can’t run SiDiMaT19xA Ensure that the .Net framework 4.5.2 or higher is installed. Run the SiDiMaT19xA as administrator. No Communication. Check if the controller is powered on and the monitor LED is blinking. Check if either a USB cable or a serial cable connects the controller with the PC. Check if the used com port is selected by the “Communication Server ” Use “ Terminate Comm Server and Connect ” button to establish the connection. If a failure occurs that cannot be solved, contact our technical support. Phone: +49 (0) 6142 94000 Known Bugs and Problems The following section lists the currently known bugs. These bugs will be resolved in future versions of the software. Description Date Version Status Solved"
  },
  "firmware/RCI1/rci1_doc.html": {
    "href": "firmware/RCI1/rci1_doc.html",
    "title": "INTRODUCTION | SAMBA19x Website",
    "keywords": "Integrated Dynamics Engineering Remote command Interface (RCI1) Description This document describes the remote commands interface “RCI” used to communicate with the firmware running on the IDE embedded controller “OPTICON”. The OPTICON controller is usually using to control the IDE active isolation vibration system. Through the remote commands interface the user can control the AVIS and to ask its status. Furthermore, all in the firmware supported parameters are accessible through the RCI. AUTHOR(S): Moneer Shatat-Herres REVISION: 01 DATE OF PRINT: December 12, 2020 DOCUMENT CHANGE & HISTORY RECORD Name Last Update Status Version ECR/PR/IP Comment MSHAT 28.01.2016 Draft 00 First version MSHAT 14.09.2016 Draft 01 Modification related to SAMBA19xUI 1.9.0.5, which is a part of the SAMBA1.9.x installation package. MSHAT 02.11.2016 Released 02 Modification related to SAMBA19xUI 1.9.0.6. Note Although this document has been prepared with the utmost care, errors of any kind cannot be totally discounted. The contents of this document may be periodically revised, amended or changed otherwise by the originator without notice. You are invited to report any deficiencies / recommendations to IDE. Note Windows 7 ®, Windows 8 ® are registered trademarks of the Microsoft Corporation, USA. © Copyright 2020, Integrated Dynamics Engineering GmbH Applicable documents Controlling documents Ref. Title, author Doc. Id/Version Filename Last update Status Subsidiary documents Ref. Title, author Doc. Id/Version Filename Last update Status Reference documents Ref. Title, author Description Digital Filter in TC standard Firmware Rev 2.4.pdf This document describes the digital filters implemented in the firmware. Firmware’s functionality parameter description.pdf It describes the firmware algorithm and parameters C67monitor tool user manual.pdf This document contains a description of the monitor tool to upload the firmware on the opticon controller. Abbreviations ECR Engineering Change Request IP Improvement Proposal AVIS Active Vibration Isolation System Opticon The standard embedded controller used to control the AVIS Firmware The software running on the embedded controller that consists the implementation of all control-algorithm needed for the controlling the AVIS CRC Check sum INTRODUCTION This document describes how the IDE active Vibration Isolation System “AVIS”, which is equipped with an OPTICON controller, could be controlled by a remote host. While the AVIS is designed to be a standalone system, it is also designed to be flexible with regard to its operating parameters. This allows the AVIS to be fully field tunable. As a standalone system these parameters are programmed via a menu-driven user interface “SAMBA-UI” over a com port Interface to an ANSI CRT terminal or PC running a terminal program. As an embedded subsystem, however, it is necessary to provide a machine interface for a remote system controller to get and set these parameters. Furthermore, the AVIS is capable of detecting and reporting its operating status. This information is vital for a system controller that needs to know the state of all of its subsystems. The general method of communication is based on a master/slave relationship between a host and a device. The method utilizes a message protocol which provides an “envelope” by which messages are passed to and from the controlled device. With the exception of some basic command requirements, the content of the command set is specific to the controlled device. The main purpose of this document is to specify the commands land resulting responses that can be sent to and received by the isolation system over this protocol. COMMUNICATIONS HARDWARE The OPTICON controller contents two connectors for the communication with a host program a RS232- and a USB-connector. Those two connectors are a standard connectors and they are always present. Furthermore the Opticon controller could be equipped optional with a Communication-Module “OCM”. The OCM is able to support Ethernet, USB, RS232 and CAM-Bus interface. The controller operates as a slave, the controller only responses the received commands from the host, and the host program operates as a master. RS232 Port Physical Connection The RS232 serial interface connector is a male DSub-9 connector that is wired in DTE (Data Terminal Equipment) configuration. The pin-out for the connector is shown below: Table 2.1: RS232-Connector pin-out. PIN number PIN label Description 2 Tx Transmit Data 3 Rx Receive Data 5 GND Ground Default Parameters At reset, the serial port is initialized for 57600 baud, whereas the baud rate is configurable, 8bits, no parity, 1 stop bit. Line Control Line control protocols such as XON/XOFF (software) or CTS/RTS (hardware) are not supported. USB PORT The controller contents a standard DFT device for supporting the communication using the USB connector. The DFT device is an USB->COM converter, the host still communicates to the USB-Connector using a virtual COM-PORT. It is necessary to install the DFT-Device driver before using the USB-Connector. Physical connection The USB interface connector is a standard female USB connector type B “see picture bellow”. The pin-out of this connector is shown in the next table. Table 2.2: USB-Connector pinning. PIN number PIN label Description 1 VCC +5 VDC 2 D- Data- 3 D+ Data+ 4 GND Ground COMMAND PROTOCOL AND FORMAT Protocol Overview The remote command interface for the OPTICON controller adheres to the com port control protocol for \"simple\" devices. The definition for a simple device is defined as follows: A “simple” device only performs a limited number of actions. All actions can be performed independently. Each action is initiated by a single command. The duration of an action is relatively short related to its environment. A failure, either functional or caused by communication has only limited impact and recovery is done by just retrying. No harm is done if the device executes the command twice in a row, due to this retry. Communication is straight forward, a command is confirmed, by the device after the completion of the requested action by a reply. The OPTICON will accept commands from the host. Each command from the host will elicit a response from the OPTICON. The OPTICON will never send an unsolicited message to the host. Any message from the OPTICON to the host is the result of a command that has been sent from the host to the OPTICON. The next two sub-sections summarize the defined syntax of the message protocol and the OPTICON command and response data format. Message Layouts Command messages are sent in the following telegram format: Field: prefix length msg_id data CRC terminator # Chars: 1 2 1 length-3 2 1 Where: prefix is the colon character (‘:’, ASCII 58d). It indicates the start byte of the telegram. length is the two byte hexadecimal representation of the number of 1 byte characters in the command string between the prefix (excluding) and the CRC (excluding). The value must be < F8h. Note that the specification of length as a hexadecimal representation has been inferred by IDE. Due to the 255d byte total message length limitation a two byte hexadecimal representation is assumed. The two length bytes could be replaced with “##”, in this case transmission error based on checking this value is bypassed. In other words the firmware doesn’t check the length of the telegram. msg_id and data must be readable ASCII character bytes such that they fall between (including) the space (‘ ‘) and tilde (‘~’) characters in the ASCII table (20h .. 7Eh). In fact, this is true of the entire command message with the exception of the terminator . CRC is the XOR sum of the bytes between the prefix and the CRC fields. Note that the prefix and CRC fields are not including in the calculation of CRC. As like the length the two bytes of CRC fields could be replaced with “##”, what forces the controller to ignore checking the CRC of this telegram. terminator is the carriage return character (CR, ASCII 13d). The response message format is similar to the command message format except that it includes a status field to indicate command transmission success or failure. Field: prefix length msg_id status data CRC terminator # Chars: 1 2 1 1 length-4 2 4 Where all fields are the same as the command format except: Status can be either ‘0’ for accept (No Error), ‘1’ for reject response message or equal to status-code (see 3.4). Reject response means that some aspect of the command string violated a protocol requirement. The data portion of a reject response message contains a brief textual description of the violation. These are listed in the next section. Status values greater than 0x9 are displayed in alphabetic format. ( for example: 10= ‘A’ , 11=’B’, 17=’H’ etc.). Terminator the terminator of the controller response differs from the terminator of command message. It consists of the character sequence <\\r\\n\\r\\r>. The last 3 characters are redundant and could be ignored. The last 3 characters are needed just for the SAMBA-Communication. Reject Response Messages A reject response message is one in which the status field is ‘1'. The occur in response to a command that is illformed and, as a result, violates a requirement of the protocol. All reject response messages include a brief textual reason string that explains the condition that caused the rejection. These reason strings are listed below in the order in which they are detected. In other words, if “CRC ERROR” and ”BAD DATA” are both applicable, “CRC ERROR” would be reported because it is detected first. BAD MESSAGE - indicates that the command message was not long enough to meet the minimum message field requirements. A message that includes a null data field will be 5 characters long (not including the prefix and the terminator). BUFFER OVERFLOW - indicates that the command message exceeded the maximum allowable message buffer length of 255d bytes (prefix and terminator included). CRC ERROR - The data field will contain this string “CRC ERROR” when the received CRC does not match the one that is calculated from the message content. BAD DATA - This response will occur if non-printable bytes (<20h or > 7Eh …see above) are received between and not including the prefix and the terminator. The TC will use the data field to distinguish between these two conditions. If the CRC does match but non-printable bytes were detected the data field will contain this string. LENGTH NOT HEX - The data field of the reject message will contain this string when the length bytes of the command message being rejected are not valid characters for hexadecimal representation (‘0'..’9', ‘A’..’F’, ‘a’..’f’). LENGTH MISMATCH - This response will occur when the length specified in the command message being rejected does not match the actual length of the message received. RESPONSE TOO LONG - This response will only occur as a result of an internal error in the OPTICON that is caused by an attempt to output a response that will exceed the 255d byte message length (including prefix and terminator) limitation. This message is generated as the result of a sanity check built into the TC remote interface software and should never occur. TIMEOUT - This response will be return if a command starts but does complete. A per character timeout is 1000 milliseconds by default. This response will also be returned if a timeout has occurred during the processing of a command that was successfully received. NOTE: The Firmware supports RCI-Commands and controller responses with a length up to 600 bytes. In this case the command respectively response length contains only the first byte of the real length and therefore it is wrong and should be ignored. There are no RCI-Commands longer then 0xF8. But there are a couple of responses that their length could exceed the 0xF8 like DGLDV , DGTBV and DGMSV . TC Command Format and Conventions This subsection describes the format of the data field within the message layout described above. For a command message from the host, the data field breaks out into three main parts, each separated by a space (SP, ASCII 20h). Leading separators are valid. <crl> <command-string> <command-parameters> Where: <crl> is an unsigned hexadecimal (2 bytes max) command response link. It is used to ensure command and response synchronization. This code will be returned within the response to the command. <command-mnemonic> is a 5 byte string which uniquely defines the command function to the TC controller. Counting left to right: Byte 1 is the command group. Byte 2 is the command type where S=set, G=get, and A=action. Bytes 3-5 is command mnemonic. This only has to be unique within a command group. <command-parameters> is the command specific parameter string. Any required parameters for the command are given in this string. If there is more than one, they are separated by a space character (SP. ASCII 20h). For a response from the controller, the data field has four parts, each separated by a space (SP, ASCII 20h). <crl> <status-code> <command-string> <response-data> Where: <crl> is the unsigned hexadecimal (2 bytes max) command response link code that was specified with the command that solicited the response. <status-code> is an unsigned hex response code (4 bytes max). If the command was completed successfully, TC_SUCCESS (=0) is returned. Note that all status codes are referred to in this document by their mnemonic names. A list of all response code mnemonics and their specific values are given at the end of the document. <command-mnemonic> is the 5 byte command string that solicited the response. <response-data> is the result string. If the command is defined to return data, this is where it will be. Overview of Command Groups There are seven command groups which organize and characterize the command set. They are listed below with the letter that has been designated for that command group: Table 3.1: Command groups. Command Group Designated Letter Code Basic B Control C Velocity V Pneumatic P Feedforward F Diagnostics D Nonvolatile Memory + New commands N Performance monitoring and earth quake detection L Data Types The command descriptions in the subsequent sections of this document reference some constants and common data types that are defined as follows: Table 3.2: Data types used by the rci-commands. DataType “sprintf” format Definition and Content Restrictions int “%d” A decimal value. hex “%x“ An unsigned decimal value in hexadecimal notation float “%e” A floating point value in E notation. char “%c” A printable ASCII character (‘ ’..’~’) string “\\”%s\\”” An aggregate of chars delimited by quotes OnOff “%c” One of two possible characters. ‘N’ for on and ‘F’ for off. ‘n’ resp. (‘f’ also accepted.) IOSignal [IOType MainIndex SubIndex] %u %d %d” IOType dependent on IOType dependent on IOType ftype “%u” This type is a subrange of unsigned. It is used to identify a type of filter. Ranges and Enumerations Range specifier possible values symbolic enumeration OnOff Chars 'N' 'n' 'F' 'f' On Off NumVelAxes 0 1 2 3 4 5 X trans Z rot Y trans Z trans Y rot X rot LastInput 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 InpX1FB (Not used) InpY1FB (horizontal geophone of Isolator#1) InpZ1FB (vertical geophone of Isolator#1) InpX2FB (horizontal geophone of Isolator#2) InpZ2FB (vertical geophone of Isolator#2) InpY3FB (horizontal geophone of Isolator#3) InpZ3FB (vertical geophone of Isolator#3) InpXFF (floor feedforward geophone in x-direction) InpYFF (floor feedforward geophone in y-direction) InpZFF (floor feedforward geophone in z-direction) InpProx1 (vert. Proximity signal of isolator#1) InpProx2 (vert. Proximity signal of isolator#2) InpProx3 (vert. Proximity signal of isolator#3) InpHProx1 (horiz. Proximity signal of isolator#1) InpHProx2 (horiz. Proximity signal of isolator#2) InpHProx3 (horiz. Proximity signal of isolator#3) InpXPOS (stage x-position signal multiplied with the Xpos-multiplier and added to Xpos-offset) InpXACC (acceleration in x-direction) InpYPOS (stage y-position signal multiplied with the Ypos-multiplier and added to Ypos-offset) InpYACC (acceleration in y-direction) InpY2FB (not used) InpX3FB (not used) InpX4FB (not used) InpY4FB (not used) InpZ4FB (not used) Prox1_NO (vert. Proximity of isolator#1 without offset) Prox2_NO (vert. Proximity of isolator#2 without offset) Prox3_NO (vert. Proximity of isolator#3 without offset) ProxH1_NO (horiz. Proximity of isolator#1 without offset) ProxH2_NO (horiz. Proximity of isolator#2 without offset) ProxH3_NO (horiz. Proximity of isolator#3 without offset) Zrff_XACC (calculated Xacc for Zrot axis) Zrff_YACC (calculated Yacc for Zrot axis) Calc_XACC (calculated Xacc dependent on Ypos) Calc_YACC (calculated Yacc dependent on Xpos) InpXPOSraw (stage x-position signal multiplied with the Xpos-multiplier) InpYPOSraw (stage x-position signal multiplied with the Ypos-multiplier) LastOutput 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 OutX1 (horiz. motor of Isolator#1 in x-direction) OutY1 (horiz. motor of Isolator#1 in y-direction) OutZ1 (vert. motor of Isolator#1) OutX2 (horiz. motor of Isolator#2 in x-direction) OutY2 (horiz. motor of Isolator#2 in y-direction) OutZ2 (vert. motor of Isolator#2) OutX3 (horiz. motor of Isolator#3 in x-direction) OutY3 (horiz. motor of Isolator#3 in y-direction) OutZ3 (vert. motor of Isolator#3) OutX4 (horiz. motor of Isolator#4 in x-direction) OutY4 (horiz. motor of Isolator#4 in y-direction) OutZ4 (vert. motor of Isolator#4) OutV1 (vert. valve of Isolator#1) OutV2 (vert. valve of Isolator#2) OutV3 (vert. valve of Isolator#3) OutVH1 (horiz. valve of Isolator#1) OutVH2 (horiz. valve of Isolator#2) OutVH3 (horiz. valve of Isolator#3) NumVelStages 0..6 Stage1 to Stage7 NumPneumStages 0..3 Stage1 to Stage4 AnalysisSigNum 0..2 MonSig0 to MonSig2 AnalysisFilterNum 0..19 AFilter0 to AFilter19 MaxEventNum 10 MaxAnSigNum 3 MaxAnFiltNum 20 Table 3.3: Ranges and enumerations. StatusType Bit Number: Description LoopBit 1 AdaptiveBit 2 FFLoopBit 3 MoveUpAtStartUpBit 4 FloorFFLoopBit 5 FloorFFAdaptiveBit 6 PneuLoopBit 7 NoiseFilterBit 8 UseEtherCatOutput 9 Bit10 10 Bit11 11 NoEtherCatSFFBit 12 UseFBForFFBit…………13 DitherCompBit…………..14 PFFLoopBit……………...15 PFFAdaptiveBit………....16 UseTempSensorsBit …..17 FB Loop Status toggle Stage FF adaptive toggle Stage FF active toggle Move system up after startup Floor FF active toggle(not used) Floor FF adaptive toggle(not used) Pneumatic Loop Active toggle Use Noise filter stages toggle (not used) (not used) (not used) (not used) Use filtered velocity axes for FF Dither compensation active toggle Pneumatic FF active toggle Pneumatic FF adaptive toggle Use temp. sensors Individualloopstatus Bit Number Velocity Axis 1 2 3 4 5 6 Xtrans “Axis1” Zrot “Axis2” Ytrans “Axis3” Ztrans “Axis4” Yrot “Axis5” Xrot “Axis6” PosIndividualLoopStatus Bit Number Position Axis 1 2 3 4 5 6 Xrot “Axis1” Yrot “Axis2” Xtrans “Axis3” Ytrans “Axis4” Zrot “Axis5” Ztrans “Axis6“ PneumIndividualLoopStatus Bit Number Pneumatic Axis 1 2 3 ZtPneu “Axis1” YrPneu “Axis2” XrPneu “Axis3” DigitalInputBitmask Bit Number Description 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 Monitor Key Reset Key Opto-coupler Input1 Opto-coupler Input2 Opto-coupler Input3 Opto-coupler Input4 Amplifier1 Temperatur Error Amplifier1 power Error Amplifier1 connected Amplifier2 Temperatur Error Amplifier2 power Error Amplifier2 connected 24V Power Supply 15V Power Supply Board ID Bit0 Board ID Bit1 Board ID Bit2 Board ID Bit3 Board ID Bit4 Board ID Bit5 DigitalOutputBitMask Bit Number Description 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 Open Collector1 Open Collector2 Open Collector3 Open Collector4 Open Collector5 Open Collector6 Opto coupler1 Opto coupler2 Opto coupler3 Opto coupler4 Amplifier0 enable Amplifier1 enable Monitor LED Reset LED Reserved Reserved Reserved Reserved Reserved Reserved NumPneumAxes 0 1 2 ZtPneum YrPneum XrPneum NumIOTypes 0 1 2 3 4 5 6 7 8 9 10 11 12 SensorType ActuatorType VelocityAxisType NoiseType VelocityAxisOutputType PositionType AllAxesType (not supported) GeoRMSType(not supported) PneumType AnalysisFilterType(not supported) FFType PFFType TemperatureSensorType num_ff_sources = 7 0-6 any input signal num_pff_sources = 4 0-3 any input signal NumGeo 0 1 2 3 4 5 6 InpX1FB InpY1FB InpZ1FB InpX2FB InpZ2FB InpY3FB InpZ3FB NumPosAxes 0 1 2 3 4 5 XpRot YpRot Xtrans Ytrans ZpRot Zptrans NumPosStages 0..3 Stage1 to Stage4 NumIsolators 0 1 2 Isolator1 Vertical Isolator2 Vertical Isolator3 Vertical NumCondition 0 1 2 Up Not used Down NoiseTypes 0 1 2 4 5 No noise Random/White noise Sine wave Duty cycle Chirp sine TSwitchConfig 0 1 2 Automatic switching Always velocity loop Always proximity loop TFFStage 0..2 3..5 6,7 Reference Path Secondary Path Core Filter (Error Filter) num_lags 5 MaxFilter NOFIL 0 LPF1O 1 LPF2O 2 HPF1O 3 HPF2O 4 BPF 5 NOTCH 6 PID 7 HOPT 8 INOTCH 9 VLOOP 10 PLOOP 11 PPID 12 LEADLAG 13 LEADLAG2 14 ANOTCH 15 HPFXX 16 LPFXX 17 STRETCH 18 BPF2E 19 LIMINTEG 20 Var_Filt 21 ANOTCH5P 22 LOPID……………………23 Empty filter Low pass filter, 1 st order Low pass filter, 2 nd order High pass filter, 1 st order High pass filter, 2 nd order Band pass filter Notch filter Low frequency limited PID HOPT filter Inverted Notch filter Velocity loop filter Position loop filter PID filter Lead lag filter 1 st order Lead lag filter 2 nd order asymmetric Notch filter High pass filter with q-factor Low pass filter with q-factor Stretcher filter Band pass filter 2 edition Limited integrator Variable filter ANOTCH with 5 parameters Limited Output PID TraceErrorCode 0 1 2 Trace started Tracing already in progress Too many samples TraceStatus 0 1 Tracing Ready Tracing in progress MotorStatus 0 1 2 3 Normal operation Motor overpowered/overheated Motor disabled Motor shutdown completely VertLoopStati 0 1 2 3 4 5 6 7 down going up to softstop up at softstop (not used) going up (not used) up going down at powerup position vertical loop OK AutoSwitchLoopStatus Bit represenations : AutoSwitch......................1 AlwaysV..........................2 AlwaysP..........................3 AlwaysBoth.....................4 FaultCondition................5 RunningV........................6 RunningP........................7 Auto switch status Always velocity loop Always position loop Always velocity and position loop Fault condition status Velocity loop running status Position loop running status RCI-Command and controller response example Here are some examples of RCI-Commands sent by a host program and the controller responses of those commads. Remark: The controller responses as a terminator the characters sequence <\\r\\n\\r\\r> instead <\\r> . The last 3 characters of the terminator are redundant and could be ignored. Example 1: Host RCI-command: RCI_Command String “ :0B?AA BGVIS##<\\r> ” Field Prefix len Msg_id data CRC term ctrl cmd param Char : 0B ? AA BGVIS NONE ## \\r Controller Response: Response string “ :18?0AA 00 BGVIS 4 0 1 1279<\\r\\n\\r\\r> ” Field Prefix len Msg_id status data CRC term ctrl Status code cmd param char : 18 ? 0 AA 00 BGVIS 4 0 1 12 79 \\r\\n\\r\\r Example 2: Host RCI-command: RCI_Command String “ :0B$1F BGVIS##<\\r> ” Field Prefix len Msg_id data CRC term ctrl cmd param Char : 0B $ 1F BGVIS NONE ## \\r Controller Response: Response string “ :18$01F 00 BGVIS 4 0 1 1215<\\r\\n\\r\\r> ” Field Prefix len Msg_id status data CRC term ctrl Status code cmd param char : 18 $ 0 1F 00 BGVIS 4 0 1 12 15 \\r\\n\\r\\r Example 3: Host RCI-command: RCI_Command String “ :0B$1F DGVIS##<\\r> ” Field Prefix len Msg_id data CRC term ctrl cmd param Char : 0B $ 1F DGVIS NONE ## \\r Controller Response: Response string “ :1E$31F 03 DGVISUNKNOWN COMMAND77<\\r\\n\\r\\r> ” Field Prefix len Msg_id status data CRC term ctrl Status code cmd param char : 1E $ 3 1F 03 DGVIS UNKNOWN COMMAND 77 \\r\\n\\r\\r For more examples see appendix. Remote Command Descriptions The following sections describe the remote commands used to communicate with the controller in detail. Note : Some parameters could be accessed by more than one RCI-Command. BASIC Group BGSTS - get system loop status Description: Get information about the individual loop status in the Feed-back-system (velocity loop) and the overall System configuration. Parameters Type Range Input: none - - Output: Individual Loop Status System Status Word hex hex IndividualLoopStatus StatusType BSSTS - set system loop status Description: Set information about the individual loop status in the Feed-back-system and the overall System configuration. Parameters Type Range Input: Individual Loop Status System Status Word hex hex IndividualLoopStatus StatusType Output: - - - BGVIS - get version information Description: Get version information of the running firmware. Parameters Type Range Input: none - - Output: Majorversion Minorversion Patchlevel LibVersion int int int int - BSOPL - set output limit Description: Set the output limit for the feedback control system. This variable limits the output of the linear motors. Parameters Type Range Input: output limit (%) int 0-100 Output: none - - BGOPL - get output limit Description: Get the output limit of the linear motors. Parameters Type Range Input: none - - Output: output limit (%) int 0-100 BSFFL - set feed-forward output limit Description: Set the output limit for the feed-forward control system. It specifies the threshold value of all FF-axis-output. Parameters Type Range Input: output limit (%) int 0-400 Output: none - - BGFFL - get feedforward output limit Description: Get the output limit for the feed-forward control system. Parameters Type Range Input: none - - Output: output limit (%) int 0-400 BSSWS - set switch signal Description: Set the signal that is monitored for the use of the automatic switching procedure. Parameters Type Range Input: Signal IOSignalType - Output: none - - BGSWS - get switch signal Description: Get the signal that is monitored for the use of the automatic switching procedure. Parameters Type Range Input: none - - Output: Signal IOSignalType - BSOCD - set switch conditions Description: Set the configuration for the automatic loop switching procedure. This includes a triggerlevel that has to be exceeded, a minimum triggering time for this to happen until automatic switching is done. Furthermore, the duration of the switched loop has to be specified. The SwitchConfig contains a bitfield indicating whether to do automatic switching, always velocity or proximity loop. Parameters Type Range Input: Trigger level (%) Min. trigger time (sec.) Switch duration (sec.) SwitchConfig int float float int 0-100 - - TSwitchConfig Output: none - - BGOCD - get switch conditions Description: Get the configuration for the automatic switching procedure. Parameters Type Range Input: none - - Output: Trigger level (%) Min. trigger time (sec.) Switch duration (sec.) SwitchConfig AutoSwitchStatus int float float int int 0-100 - - TSwitchConfig AutoSwitchLoopStatus BGGSC - get global system constants Description: Get some global system constants of the running firmware. Parameters Type Range Input: none - - Output: NumTestmodes NumFBAxes NumPneumAxes NumPosAxes NumGeophones NumProximities NumFBStages NumPosStages NumFFStages NumIsolators Sampling frequency FirmwareConfigInfo int int int int int int int int int int int string NumTestMode num_axes NumPneumAxes NumPosAxes NumGeo NumProx NumVelStages NumPosStages TFFStage NumIsolators - Info about firmware supported new features. Table 4.1: Firmware configuration info phrases. Firmware Config Info phrase Meaning Cascaded The cascaded position control is supported. NAF Analysis filters monitoring is not supported. NALS Automatic loop switching is not supported. EtherCat EtherCat communication module and its features are supported. PneumRamp The pneumatic Ramp routine is supported. TmpSens Firmware is supporting: AD-Mapping of the temperature sensors. AD-Mapping for all AD-Converters signals (physical signals). Input signals are extended to support all physical signals. ZMS This is a customizable performance and safety monitoring routine which is supported. SEQ Performance monitoring and earth quake detection support. BSOCV - set motor Overcurrent/overheating values Description: Configure the motor overcurrent/overheating failsafe subsystem. This includes the specification of whether to disable all motors in case of failure of one individual motor, a reset delay time that specifies the time after the motor gets back into normal state again and an array of overcurrent/temperature thresholds (for each motor). Parameters Type Range Input: DisableAllFlag ResetDelay (sec.) Thresholds[12] (°C) (digit) OnOff float float OnOff Chars - - Output: none - - BGOCV - get motor Overcurrent/overheating values Description: Get the configuration of the failsafe motor overheating procedure. Parameters Type Range Input: none - - Output: DisableAllFlag ResetDelay (sec.) Thresholds[12] (°C) (digit) OnOff float float OnOff Chars - - DisableAllFlag: “On” to disable all linear motors in case of failure of one motor. Otherwise “Off”. ResetDelay: the reset delay time in second. Threshold: In case of UseTempSensorsBit (using temperature sensors) then it demonstrates the linear motor temperature threshold in grad Celsius for (OutX1, OutY1, OutZ1, OutX2, OutY2, OutZ2, OutX3, OutY3, OutZ3, OutX4, OutY4 and OutZ4). In case of not using temperature sensors) then it demonstrates the linear motor overcurrent threshold in digit for (OutX1, OutY1, OutZ1, OutX2, OutY2, OutZ2, OutX3, OutY3, OutZ3, OutX4, OutY4 and OutZ4). BGMPV - get motor Overcurrent/Temperature values Description: Get the actual motor overcurrent “power consumption” respectively temperature values. Parameters Type Range Input: none - - Output: MotorTemp[12] (°C) (digit) float[] - MotorTemp: In case of using temperature sensors this parameter demonstrates the linear motor temperature in grad Celsius for (OutX1, OutY1, OutZ1, OutX2, OutY2, OutZ2, OutX3, OutY3, OutZ3, OutX4, OutY4 and OutZ4). In case of not using temperature sensors this parameter demonstrates the linear motor overcurrent in digit for (OutX1, OutY1, OutZ1, OutX2, OutY2, OutZ2, OutX3, OutY3, OutZ3, OutX4, OutY4 and OutZ4) BGMPS - get motor failsafe stati Description: Get the motor overheating stati. Parameters Type Range Input: none - - Output: MotorStati[12] hex[] MotorStatus BSCOT – set controller type The Firmware doesn’t allow changing the controller type. The controller type is fixed “4”. This command doesn’t have any affect. Description: Set controller type Parameters Type Range Input: ContType int 0 – 4 Output: none - - BGCOT – Get controller type Description: Get controller type Parameters Type Range Input: none - - Output: ContType int 0 - 4 BSADS – Set adcsel sequence Description: Set adcsel sequence, the adcsel seguence contains the numbers of AD-channels for the input signals. This command assigns each physically input signal to its AD-Channel. Parameters Type Range Input: CMapAdcs[25] int 0 – 44 Output: none - - BGADS – Get adcsel sequence Description: Get adcsel sequence Parameters Type Range Input: None - - Output: CMapAdcs[25] int 0 - 44 CMapAdcs: this is the AD-Channel-Mapping for all physical input. (InpX1FB, InpY1FB, InpZ1FB, InpX2FB, InpZ2FB, InpY3FB, InpZ3FB, InpXFF, InpYFF, InpZFF, InpProx1, InpProx2,InpProx3, InpProxH1, InpProxH2, InpProxH3, InpXPOS, InpXACC, InpYPOS, InpYACC, InpY2FB, InpX3FB, InpX4FB, InpY4FB, InpZ4FB). BSTSA – Set Temperature Sensor adc Mapping Description: Set the AD-Converter mapping for the motor temperature sensor input signals. Parameters Type Range Input: TempSensAdcMapp[12] int 0 – 44 Output: None - - BGTSA – Get Temperature Sensor adc Mapping Description: Get the AD-Converter mapping for the motor temperature sensor input signals. Parameters Type Range Input: None - - Output: TempSensAdcMapp [12] int 0 - 44 TempSensAdcMapp: this is the AD-Channel-Mapping for the motor temperature sensor. (X1Motor, Y1Motor, Z1Motor, X2Motor, Y2Motor, Z2Motor, X3Motor, Y3Motor, Z3Motor, X4Motor, Y4Motor, Z4Motor). See appendix for the right AD-Mapping. BSDAS – Set dacs sequence Description: Set dacs sequence, the dacs sequence contains the number of the DA-channel of the output signals. This command assigns each physically output signal to its DA-Channel. Parameters Type Range Input: CMapDac[20] int 0 – 22 Output: None - - BGDAS – Get dacs sequence Description: Get dacs sequence Parameters Type Range Input: None - - Output: CMapdac[20] int 0 - 22 CMapdac: this is the DA-Channel-Mapping for physical outputs. (OutX1, OutY1, OutZ1, OutX2, OutY2, OutZ2, OutX3, OutY3, OutZ3, OutX4, OutY4, OutZ4, OutV1, OutV2, OutV3, OutV1H, OutV2H, OutV3H, DiagInpDac, DiagOutDac) BSFBL – Set FB Limiter Description: Set the desired limiter values for the logical FB-Axis of the velocity loop Parameters Type Range Default Input: FBLimiter[6] (digit) float - 128000.0 - Output: - - - - BGFBL – GET FB LIMITER Description: Get the values of the adjusted FB-Limiters. Parameters Type Range Default Input: - - - - Output: FBLimiter[6] (digit) float - 128000.0 FBLimiter : Those are the logical axis Limiter values in digits. The array values are ordered as following “Xtrans, Zrot, Ytrans, Ztrans, Yrot and Xrot”. The FB-Loop limitation limits the output of the last stage filter of each Velocity axis. The limiter value for each axis is separately adjustable by RCI-Command. Ramp driving at start-up phase Overview The mean intend of the ramp driving is to avoid a suddenly jerk forces caused by the motors at a start-up phase. There are two types of Ramp driving, the first one is based on the actuator output (only linear motors) and the second one is based on the logical velocity axes. During the start-up phase the value of the limitation is reset to zero and increased incrementally until the start-up time is expired. The limitation reaches its adjusted value even when the start-up time is expired. The start-up time is by the user through RCI-Command adjustable. We get a start-up phase by following cases: Turning the controller on Turning the overall loop on After motor overheating state and the overall loop is on After occurrence of the automatic loop switching and the overall loop is on. Logical axes ramp driving In case of logical axes ramp driving the FB-limitation of the velocity logical axis drives a ramp at the start-up phase. The FB-limitation value starts with zero and ends after the start-up time with the adjusted value for each axis. Motor output ramp driving In this case the output-limiter value drives ramp at the start-up phase. The motor output-limiter value starts with zero and ends after the start-up time with the adjusted output-limiter value. BSSUT-Set Start-up time and the ramp type Description: This command set the type of the ramp and the value of the desired start-up-time. Parameters Type Range default Input: RampType StartUpTime (sec.) Int float 0 -1 - 0 1 Output: - - - - BGSUT-get Start-up time and the ramp type Description: This command gets the type of the adjusted ramp and the value of the adjusted start-up-time. Parameters Type Range default Input: - - - - Output: RampType StartUpTime (sec.) Int float 0 -1 - 0 1 RampType : “0” the actuators drive the ramp during startup phase, “1” the velocity logical axes outputs drive the ramp. StartUpTime (RampTime) : This is the start-up-time period in seconds. BGSST - Get Position and Pneumatic Individual loop status Description: Retrieves the individual loop status parameter of velocity loop and the overall system status. Parameters Type Range Input: none - - Output: PositionIndividualLoopStatus PneumaticIndividualLoopStatus DigitalInputWord DigitalOutputWord hex hex hex hex PosIndividualLoopStatus PneumIndividualLoopStatus DigitalInputBitmask DigitalOutputBitMask BSSST - set Position and Pneumatic Individual loop status Description: Specifies the individual loop status value and the overall system status. Parameters Type Range Input: PositionIndividualLoopStatus PneumaticIndividualLoopStatus hex hex PosIndividualLoopStatus PneumIndividualLoopStatus Output: - - - position CONTROL Loop Group CSSMV - set position sensor matrix Description: Set the sensor steering matrix of the position loop. This means, tell the controller how to calculate a logical position axis signal out of the sensor signals. Note that the sensors for the steering matrices has to be set using CSPSD command. Parameters Type Range Input: PosAxis SensorMult[6] int float NumPosAxes - Output: none - - CGSMV - get position sensor matrix Description: Get the sensor steering matrix of the position loop. Parameters Type Range Input: PosAxis int NumPosAxes Output: SensorMult[6] float - CSMMV - set position motor matrix Description: Set the motor steering matrix of the position loop. This means, tell the controller how to calculate motor outputs out of a logical position axis signal. Note that the motor devices have to be set using CSPMD command. Parameters Type Range Input: PosAxis MotorMult[8] int float NumPosAxes - Output: none - - CGMMV - get position motor matrix Description: Set the motor steering matrix of the position loop. Parameters Type Range Input: PosAxis int NumPosAxes Output: MotorMult[8] float - CSPOV - set proximity offset values Description: Set the offsets of the proximity signals. This is essential for the position loop, because it tries to drive the input signal to zero. It is useful to determine these proximity values by experiment or by using CAUCO command when the system is in a correct position. The proximity offset values are used to calculate the 6 virtual input signals Proxx_NO. Parameters Type Range Input: ProxOff[6] (digit) float - Output: none - - CGPOV - get proximity offset values Description: Get the offsets of the proximity signals. Parameters Type Range Input: none - - Output: ProxOff[6] (digit) float - ProxOff: this is the array including the proximity offset values for (InpProx1, InpProx2, InpProx3, InpProxH1, InpProxH2, InpProxH3). CAUCO - use current proximity values as offsets Description: Use the current proximity values as reference offsets. Parameters Type Range Input: none - - Output: none - - CSPFS - set proximity filter stage Description: Set a filter stage for the proximity loop. Parameters Type Range Input: PosAxis PosStage FilterType Parameter1 Parameter2 Parameter3 Parameter4 Parameter5 int int int float float float float float NumPosAxes NumPosStage MaxFilter - - - - - Output: none - - CGPFS - get proximity filter stage Description: Get a filter stage for the proximity loop. Parameters Type Range Input: PosAxis PosStage int int NumPosAxes NumPosStage Output: FilterType Parameter1 Parameter2 Parameter3 Parameter4 Parameter5 int float float float float float MaxFilter - - - - - CSMOV - set motor offset values Description: Set the motor offset values that will be added to the motor output and the PneumProxOffset will be added to the proximity input signals used by the pneumatic loop “vrefupadd”. Parameters Type Range Input: Y1offset (digit) X2offset (digit) Y3offset (digit) X4Offset (digit) Y2Offset (digit) X1Offset (digit) Y4Offset (digit) X3Offset (digit) ProxV1 PneumProxOffset (digit) ProxV2 PneumProxOffset (digit) ProxV3 PneumProxOffset (digit) float float float float float float float float float float float - - - - - - - - - - - Output: - - - CGMOV - get motor offset values Description: Get the motor offset values that will be added to the motor outputs and the PneumProxOffset.. Parameters Type Range Input: - - - Output: Y1offset (digit) X2offset (digit) Y3offset (digit) X4Offset (digit) Y2Offset (digit) X1Offset (digit) Y4Offset (digit) X4Offset (digit) ProxV1 PneumProxOffset (digit) ProxV2 PneumProxOffset (digit) ProxV3 PneumProxOffset (digit) float float float float float float float float float float float - - - - - - - - - - - CSPSD - set Position sensor devices Description: This command specifies which sensor inputs should be used to build the position logical axes. Parameters Type Range Input: PosAxis InputDevices[6] int IOSignal NumPosAxes Only sensor IOType Output: none - - CGPSD - get Position sensor devices Description: Get the sensor input devices of the position loop. Parameters Type Range Input: PosAxis int NumPosAxes Output: InputDevices[6] IOSignal Only sensor IOType CSPMD - set Position MOTOR devices Description: This command specifies which actuator outputs should be used for the specified position loop axis. Parameters Type Range Input: PosAxis OutputDevices[8] int IOSignal NumPosAxes Only actuator IOType Output: none - - CGPMD - get Position MOTOR devices Description: Get actuator outputs of the position loop. Parameters Type Range Input: PosAxis int NumPosAxes Output: OutputDevices[8] IOSignal Only actuator IOType Non Linear Position loop The non-linear position is a special feature which is implemented for a couple of firmware versions. As the name says it is not a linear control loop and intended to stabilize a non-linear system behavior. Basically it is used to help stabilizing a pneumatic loop which is not stable by a big vibration. It uses only the first three position axes. CGSFP - get Switch function parameters Description: Get the configuration parameters of the automatic switch routine of the non-linear position loop. Parameters Type Range Input: none - - Output: AtInput ResetPID DeadBand [digits] RisingRange int int float float [0 2] [0 1] - - CSSFP - set Switch function parameters Description: Get the configuration parameters of the automatic switch routine of the position loop. Parameters Type Range Input: AtInput ResetPID DeadBand [digits] RisingRange int int float float [0 2] [0 1] - - Output: - - - AtInput : The switch function trigger signal. 1: Switching the non-linear position loop On/Off will be triggered by the input of the position logical axes. This means switch trigger signal is axis input. 0: Switching the non-linear position loop On/Off will be triggered by the output of the position logical axes This means switch trigger signal is axis output after last stage. 2: The non-linear position control loop is not used; the position control loop works normal as a linear control loop. ResetPID : the PID-Reset flag, to reset the PID filters by switching off the non-linear position loop. 0: No reset of the PID/PPID filters. 1: Reset PID/PPID. DeadBand : This is a position value. If the switch trigger signal is lower than this value, then non-linear position loop is switched off. Otherwise the non-linear loop is on. RisingRange : This is a position value. The difference between the DeadBand and RisingRange specifies the tangent of the non-linear loop output. DIAGNOSTICS Group DSTMO - set testmode Description: Set a testmode. Note that this feature should not be used since it is only for backward compatibility. Parameters Type Range Input: TestMode int NumTestmode Output: none - - DGTMO - get testmode Description: Get the current testmode. Parameters Type Range Input: none - - Output: TestMode int NumTestmode DSNIP - set noise injection point Description: Set the noise injection point, that means, specify a location where the noise is going to be injected. If you specify a sensor or any impossible injection point, the controller reports a failure. Parameters Type Range Input: NoiseInectPoint IOSignal - Output: none - - DGNIP - get noise injection point Description: Get the point in the control system where the noise is injected. Parameters Type Range Input: none - - Output: NoiseInectPoint IOSignal - The following table gives an overview about the signals could be selected as noise injection point. Table 4.2: Noise injection IOSignal. IOType MainIndex SubIndex ActuatorType « 1 » LastOutput - VelocityAxisType « 2 » NumVelAxes -1: axis raw input NumVelStages: axis signal after filter NumVelStages+1: axis output NoiseType « 3 » - - VelocityAxisOutputType « 4 » NumVelAxes - PositionType « 5 » NumPosAxes -1: axis raw input NumPosStages: axis signal after filter NumPosStages+1: axis output DSESP - set EXCITATION “Noise” SIGNAL Parameters Description: Set the noise signal parameters. Parameters Type Range Input: NoiseType Param1 Param2 Param3 Param4 Int Float Float Float float NoiseType -1.0 – 1.0 - - - Output: none - - DGESP - get Excitation “noise” signal parameters Description: Get noise signal parameters. Parameters Type Range Input: none - - Output: NoiseType Param1 Param2 Param3 Param4 Int Float Float Float float NoiseType -1.0 – 1.0 - - - Table 4.3: Excitation parameter. Noise Type Noise Parameter meaning Parameter Definition White noise Param1 Param2 Param3 Param4 Excitation signal gain - - - Sine wave Param1 Param2 Param3 Param4 Excitation signal gain Sine frequency (Hz) - - Duty Cycle Param1 Param2 Param3 Param4 Excitation signal gain Time period for High in millisecond Time period for low in millisecond - Chirp sine Param1 Param2 Param3 Param4 Excitation signal gain Start frequency (Hz) End frequency (Hz) Chirp sine Time period in millisecond NOTE: The following next 6 RCI-Commands (DSNTY, DSNTY, DSNSG, DGNSG, DSNSF and DGNSF) are used to set respectively get the properties of the noise signal. Those commands are old and they don’t support all parameters needed for the new noise type “Duty cycle and Chirp sine”. Please use “ DSESP and DGESP ” to configure the noise signal. DSNTY - set noise type Description: Set the type of noise going to be injected. Parameters Type Range Input: NoiseType int NoiseTypes Output: none - - DGNTY - get noise type Description: Get the type of noise that is currently used. Parameters Type Range Input: none - - Output: NoiseType int NoiseTypes DSNSG - set test signal gain Description: Set the amplitude of the excitation/noise signal. Parameters Type Range Input: TestGain float 0< x < 1.0 Output: none - - DGNSG - get test signal gain Description: Get the amplitude of the excitation/noise signal. Parameters Type Range Input: none - - Output: TestGain float 0< x < 1.0 Output: Active loop Time elapsed int float SwitchLoop - DSNSF - set test signal frequency Description: Set the frequency for the excitation signal (if sinewave is used). Parameters Type Range Input: TestFreq (Hz) float 0< x <600 Output: none - - DGNSF - get test signal frequency Description: Get the frequency for the excitation signal (if sinewave is used). Parameters Type Range Input: none - - Output: TestFreq (Hz) float 0< x < 600 DSNFU - set noise filter usage Description: Specify whether to use the noise pre-filtering feature. Parameters Type Range Input: UseNoiseFilters OnOff OnOff Chars Output: none - - DGNFU - get noise filter usage Description: Get the current noise pre-filtering feature status. Parameters Type Range Input: none - - Output: UseNoiseFilters OnOff OnOff Chars DSNFS - set noise filter stage Description: Set one stage of filters used for noise pre-filtering. Parameters Type Range Input: Stage FilterType Parameter1 Parameter2 Parameter3 Parameter4 Parameter5 int int float float float float float [0 – 3] MaxFilters - - - - - Output: none - - DGNFS - get noise filter stage Description: Get one stage of the filters used for noise pre-filtering. Parameters Type Range Input: Stage int [0 – 3] Output: FilterType Parameter1 Parameter2 Parameter3 Parameter4 Parameter5 int float float float float float MaxFilter - - - - - DSDOS - set diagnostic output signals Description: Specify the signals to be seen on the analog BNC output connectors of the controller. Parameters Type Range Input: Diag0 Diag1 IOSignal IOSignal - - Output: none - - DGDOS - get diagnostic output signals Description: Get the signals that can be seen on the analog BNC output connectors of the controller. Parameters Type Range Input: none - - Output: Diag0 Diag1 IOSignal IOSignal - - Table 4.4: Diagnostic IOSignal Description. IOType MainIndex SubIndex SensorType « 0 » LastInput - ActuatorType « 1 » LastOutput - VelocityAxisType « 2 » NumVelAxes -1: axis raw input NumVelStages: axis signal after filter NumVelStages+1: axis output NoiseType « 3 » - - VelocityAxisOutputType « 4 » NumVelAxes - PositionType « 5 » NumPosAxes -1: axis raw input NumPosStages: axis signal after filter NumPosStages+1: axis output AllAxesType (not supported) « 6 » - - PneumType « 8 » NumPneumAxes -1: axis raw input NumPneumStages: after filter NumPneumStages+1: axis output FFType « 10 » num_ff_source [0 – 5]: channel signal after filter >6: FF Axis output PFFType « 11 » num_pff_source [0 – 5]: channel signal after filter >6: PFF Axis output TemperatureSensorType « 12 » [0 – 11] - DGCSS - get current switch status Description: Get the current status of the automatic switch procedure. The elapsed time in the current loopstatus is returned as well. In case of not fulfilling the switch criterion the timer gives the period of time of exceeded threshold. In case of fulfilling the criterion, the timer gives the time until the delay time has passed. Parameters Type Range Input: none - - Output: LoopSwitchStatus ElapsedTime (sec.) Int float AutoSwitchLoopStatus - DSTIV - set trace information values Description: Set configuration parameters for the data tracing function. Specify two signals to be digitally traced and the number of samples to acquire. You are able to specify an Undersample parameter. It determines the space between subsequent trace-samples while filling the buffer. (Normal tracing each sample: Undersample=1) Parameters Type Range Input: TraceSig0 TraceSig1 Undersample NumberOfSamples NoTraceFilter IOSignal IOSignal int int int - - 1-65534 1-8192 0-1 (0: use anti-aliasing filter , 1: don’t use anti-aliasing filter) Output: none - - DGTIV - get trace information values Description: Get configuration parameters for the data tracing function. Parameters Type Range Input: none - - Output: TraceSig0 TraceSig1 Undersample NumberOfSamples NoTraceFilter IOSignal IOSignal int int int - - 1-65534 1-8192 0-1 (0: use anti-aliasing filter , 1: don’t use anti-aliasing filter) DASTA - start trace action Description: Start the trace action. Don't forget to set the data trace information values! Parameters Type Range Input: none - - Output: ErrorCode hex TraceErrorCode DGTAS - get trace action status Description: Query the tracing status. Especially of interest may be the status \"Tracing Ready\". Parameters Type Range Input: none - - Output: TraceCode hex TraceStatus DGTBV - get trace buffer values Description: Get the values of the tracing procedure. A ReadOffset of -1 means, get the next values. Any other offset determines the read offset of the internal buffer. Parameters Type Range Input: ReadOffset int -1..8191 Output: NumSamples Ch1[NumSamples] Ch2[NumSamples] int float[] float[] 0-16 - - DSPMV - set performance monitor values Description: Configures the performance monitoring feature parameters. This includes a signal to mointor, a Threshold that gives the limit of the signal, a minimum triggering time in which the signal has to be exceeded and a hold time that specifies how long the failure status is to be held. The minimum trigger time and the hold time are given in second. Parameters Type Range Input: PerfMonitorSig Threshold MinTime (sec.) HoldTime (sec.) IOSignal int float float - [0 – 32767] - - Output: none - - DGPMV - get performance monitor values Description: Read the configuration parameters of the performance monitoring feature. Parameters Type Range Input: none - - Output: PerfMonitorSig Threshold (digit) MinTime (sec.) HoldTime (sec.) IOSignal int float float - [0 – 32767] - - DGPMS - get performance status Description: Get the status of the performance monitoring. If a failure status is detected, this function returns a performance status of 1, meaning Fail. Additionally, the timer of the current status is returned. In case of OK the timer gives the period of time of exceeded threshold. In case of Fail, the timer gives the time until the hold time has passed and state OK is reached again. Parameters Type Range Input: none - - Output: PerformanceStatus Timer (sec.) int float 0/1=OK/Fail - DGLRC - get Last received command Description: Get the last received command. Parameters Type Range Input: none - - Output: LastCommand string - DGSLO - get System Load Description: Get the performance load of the digital signal processor DSP “TMS320C6713B” used to process the control-algorithm. The system load is dependent on the controller configuration “which loops are configured” and the number of the AD-Channel sets number. It shouldn’t exceed the 86%. Parameters Type Range Input: none - - Output: SystemLoad float (0 – 100%) DGADE - get Amplifier Disable Events Description: This command gets the digital status words which are traced in circular buffer to monitor the amplifiers disabling events. Parameters Type Range default Input: - - - - Output: DigitalInputWords[10] uint DigitalInputBitmask 0 Logging Routine The logging routine implemented in the firmware v3.2.66 and higher gives the user the possibility to buffer many signals to on-board external RAM. The max memory space available for buffering the logging data is 8MByte. This means 2.097.152 floating point values could be buffered. Up to 40 signals; called Trace-Signals or Motitor-Signals ; could be simultaneously buffered. The number of the signals to be traced “buffered” is adjustable per RCI-Command as like as the buffer length. There are two types of logging; the first one is events logging. Up to 40 signals “trace-signals” could be buffered circularly until an event occurs. The second type is no event logging; in this case the trace-signals will be logged into the buffer until the buffer length is filled. Event Logging The event logging allows two kinds of events. The first one is a fixed event; when motor over-heating state occurred “ Motor-Overheating-Event-Logging ”; the second event is configurable “ Free-Event-Logging ”. When the event logging is started the trace-signals will be buffered into a circular buffer until the logging will be interrupted by the event occurrence. The logging begins to trace the next “Trace” or stop logging if the max number of possible traces is reached. The buffer length and the trace-signals number are adjustable per RCI commands. Dependent on the buffer length and trace-signals number events could be traced many times “many traces”. The adjustable event could be any signal of the IOSignals. The adjustable event consists of IOSignal, threshold value and trigger time. The event is occurred when the threshold has been exceeded at least for the trigger time period. Stnadard Event Logging The standard-event type services to log the trace-signals using the DSP-Board internal buffer. Only one trace is possible independent on the adjusted buffer length and the trace-signals number. In this case the trace-signals will be logged into the buffer until the buffer length is reached. DSETS – Set Event signal Description: Using this command the adjustable event could be defined. Parameters Type Range Default Input: EventSignal Threshold (digit) TrigTime (samples) IOSignal float int - - - - - - Output: none - - - DGETS – Get Event signal Description: Get the event parameters. Parameters Type Range Default Input: none - - - Output: EventSignal Threshold (digit) TrigTime (samples) IOSignal float int - - - - - - EventSignal : This is the signal type of the adjustable event; it is an IOSignal. Threshold : The threshold value of the adjustable event in digits. TrigTime : the trigger time in samples. The event is occurred when the event signal value exceeds the threshold for the time period of TrigTime . If this happened then the buffered data will be saved to the memory. DSMOS – Set Monitor Signal “trace-signal” Description: Defines the signals to be monitored. Parameters Type Range Default Input: SigNum MonSig Int IOSignal 0 - 39 - Output: none - - - DGMOS – Get Monitor Signal “trace-signal” Description: Get the parameters of a monitor signal. Parameters Type Range Default Input: SigNum Int 0 - 39 - Output: MonSig IOSignal - - SigNum: the number of the monitor-signal. MonSig: the parameters of a monitor-signal. DSETP – Set Event Trace Parameters Description: Configures the parameters of the event tracing “logging” Parameters Type Range Default Input: UsedEvent MaxBuffLen MonSigNum UnderSampling DelayTime (sample) Average int int int int int int 0 – 2 1 – 0x20000 1 – 40 1 - 0xFFFF - 0 – 1 0 0 0 1 5 0 Output: none - - - DGETP – Get Event Trace Parameters Description: Get the parameters of the event tracing. Parameters Type Range Default Input: none - - - Output: UsedEvent MaxBuffLen MonSigNum UnderSampling DelayTime (sample) Average int int int int int int 0 – 2 1 – 0x30000 1 – 40 1 - 0xFFFF - 0 – 1 0 0 0 1 Sample frequency 0 UsedEvent : set to 0 to use the motor overcurrent status as event, set to 1 for using the adjustable event as logging event and set to 2 just to trace the monitor-signals. MaxBufflen : this is the max length of a trace buffer (samples number of the buffer). MonSigNum : the number of the trace-signals should be logged. UnderSampling : set it to 1 if you want to trace each sample, set it to x to trace every x-th sample. DelayTime : In Case UsedEvent is equal to 0, this is the time period in sample should expired before the trace will be saved. In other words this is the minimum time between two events. In Case of UsedEvent is equal to1 then this is the sample number should be traced after occurring the event (Should be smaller than MaxBuffLen . In Case of UsedEvent is equal to 2 then this parameter doesn’t effect the logging. Average : set it to 1 to trace the average value of the monitor signal in case of UnderSampling. Otherwise set it to zero. DSSET – Start Stop Event Tracing Description: Starts and stops the event tracing. Parameters Type Range Default Input: LoggingStatus int 0 – 1 0 Output: none LoggingStatus : set it to 1 to start the logging, set to 0 to stop it. NOTE: after starting the logging, the already saved traces became invalid “deleted”. DGETI – Get Event Tracing Information Description: Get the event tracing information. Parameters Type Range Default Input: none - - - Output: LoggingStatus MaxTraceNum SavedTraceNum Error LoggedSampleNum Int Int Int Int int 0 – 1 0 – 100 0 – 100 0 – 1 0 - MaxBuffLen 0 0 0 0 0 MaxTraceNum : While the available memory space is finite, this value give the max possible event traces could be saved. In case of no event logging this value is equal to 1. In case of event logging this value is dependent on the MonSigNum and MaxBuffLen and will be calculated when the event trace parameters are set. This value is limited by the firmware and so couldn’t be greater than 100. SavedTraceNum : gives the number of the saved event traces. Error : 0 if there is no error occurred during the logging, 1 trace buffer overflow error. LoggedSampleNum : the already logged samples and could be picked up. DGLDA – Get Logged Data “COMPLETE” Description: Get the saved trace data. This command dumps all the trace data to the host. Parameters Type Range Default Input: TraceNum < SavedTraceNum int 0 - 100 - Output: TraceData float - - TraceNum : the number of the saved trace, which you want to pick its data. The value of this parameter should be less than the SavedTraceNum; otherwise the controller responses with error number 0x15. TraceData : The trace data contains MaxBuffLen Lines, each line contains a MonSigNum values. The first column is corresponding to the first monitor signal and the second to the second monitor signal and so on. You could capture the data to a text file using the windows hyperterminal tool or similar tool. DGLDV – Get Logged Data values “sample wise” Description: Get the monitor signal values of a specific sample number of a specific trace. Parameters Type Range Default Input: TraceNum < SavedTraceNum SampleNum Int int 0 – 100 0 – MaxBuffLen-1 - - Output: MonSigValue[MonSigNum] float - - TraceNum : the number of a saved trace, which you want to pick its data. The value of this parameter should be less than the SavedTraceNum; otherwise the controller responses with error number 0x15. SampleNum: the sample number “line number”. MonSigValue: is the monitor signal values of the specific sample number. DSATI – Set actual time Description: This command set the actual time. Parameters Type Range Default Input: Day Hour Min Sec Unsigned char Unsigned char Unsigned char Unsigned char 0 – 255 0 – 23 0 – 59 0 – 59 0 0 0 0 Output: none - - - DGATI – Get actual time Description: Get the actual system time. Parameters Type Range Default Input: none - - - Output: Day Hour Min Sec Unsigned char Unsigned char Unsigned char Unsigned char 0 – 255 0 – 23 0 – 59 0 – 59 0 0 0 0 DGEVT – Get event ”trace” time Description: Get the time point when an event is occurred. Parameters Type Range Default Input: TraceNum < SavedTraceNum int 0 - 100 - Output: Day Hour Min Sec Unsigned char Unsigned char Unsigned char Unsigned char 0 – 255 0 – 23 0 – 59 0 – 59 0 0 0 0 TraceNum: the number of the saved event “trace”. Day : the day’s number, the day’s number will be set to zero if it exceeds 255. Hour : the hour’s number. Min : the minute’s number. Sec : the second’s number. In case of no event logging the event time should be ignored. DGMSV – Get monitor signals values Description: This command allows picking up the monitor signal values. This command is not dependent on the event logging traces. Parameters Type Range Default Input: Index1 Index2 Int int 0 – 39 0 - 39 - Output: MonSigVal [Index2 – Index1] float - - Index1: The index of the first Monitor signal should be dumped. Index2: The index of the last Monitor signal should be dumped. MonSigVal: Monitor Signal values array. FEEDFORWARD Group FSFFS - set feedforward status Description: Configure the feedforward subsystem. LoopStatus toggles whether the FF subsystem is active or not. AdaptiveStatus toggles whether the tuning process is active. TypeDigital specifies whether to await digital signals or use analogue ones. Parameters Type Range Input: LoopStatus TypeDigital TypeBoxercross AdaptiveStatus OnOff OnOff OnOff OnOff OnOff Chars OnOff Chars OnOff Chars OnOff Chars Output: none - - FGFFS - get feedforward status Description: Read the configuration of the FF subsystem. Parameters Type Range Input: none - - Output: LoopStatus TypeDigital TypeBoxercross AdaptiveStatus OnOff OnOff OnOff OnOff OnOff Chars OnOff Chars OnOff Chars OnOff Chars FSPFS - set feedforward filter stage Description: Set one filter stage of the FF subsystem. Parameters Type Range Input: Axis Source Stage FilterType Parameter1 Parameter2 Parameter3 Parameter4 Parameter5 int int int ftype float float float float float NumVelAxes num_ff_source TFFStage MaxFilter - - - - - Output: none - - FGPFS - get feedforward filter stage Description: Get one filter stage of the FF subsystem. Parameters Type Range Input: Axis Source Stage int int int NumVelAxes num_ff_sources TFFStage Output: FilterType Parameter1 Parameter2 Parameter3 Parameter4 Parameter5 ftype float float float float float MaxFilter - - - - - For each FF-Source there are 6 stage filters (3 reference filters and 3 secondary filters). The velocity logical axes are used as error for the adaptive algorithm. There are 6 velocity logical axes and also 6 error signals. For each error signal there are two stage filters (core filters “error filters”). TFFStage : 0 – 6 to adjust the reference and secondary filters. TFFStage is related to the num_ff_sources . 7 – 8 to adjust the error filters. TFFStage is related to the NumVelAxes . FSFFP - set feedforward parameters Description: Set adaptive tuning parameters of a specific ff-source. Note that for each Source, there is a bitfield of Outputs and an AdaptionRate, whereas the AdaptiveStatus is a subsystem-wide status. The Outputs-Bitfield determines, with witch velocity axes the ff-source is combined. Each ff-source could be combined with all 6 velocity axes. Parameters Type Range Input: Source Outputs AdaptiveStatus AdaptionRate int hex OnOff float num_ff_sources IndividualLoopStatus OnOff Chars - Output: none - - FGFFP - get feedforward parameters Description: Get adaptive tuning parameters of the FF subsystem. Parameters Type Range Input: Source int num_ff_source Output: Outputs AdaptiveStatus AdaptionRate hex OnOff float IndividualLoopStatus OnOff Chars - Source: the number of a specific ff-channel should be configured. Outputs: a hex value to determine, with which velocity logical axes the source is combined. AdaptiveStatus: the FF-Subsystem adaptive status. AdaptionRate: this is the learning constant for the LMS-Algorithm used by the adaptive tuning to calculate the FIR-Filter gains “tabs”. FARFF - reset feedforward filter Description: Reset a specific FF filter to zero. This affects the adaptive gains only. Parameters Type Range Input: Axis Source int int NumVelAxes num_ff_sources Output: none - - FSFFG - set feedforward gains Description: Set the gains of a specific adaptive FF filter “FIR-Filter”. Parameters Type Range Input: Axis Source Gains[num_lags] int int float NumVelAxes num_ff_sources - Output: none - - FGFFG - get feedforward gains Description: Get the gains of a specific adaptive FF filter. Parameters Type Range Input: Axis Source int int NumVelAxes num_ff_sources Output: Gains[num_lags] float - FSFFI - set feedforward inputs Description: Specify the Input signals to be used as FF source signals. the inputs array contains the indexes of the input signals should be used by the by the FF-Subsystem. Parameters Type Range Input: Inputs[num_ff_sources] int LastInput Output: none - - FGFFI - get feedforward inputs Description: Get the input signals that are used as FF source signals. Parameters Type Range Input: none - - Output: Inputs[num_ff_source] int[] LastInput FSFFC - set feedforward configuration Description: Configure the adaptive FF filters. Parameters Type Range Input: NoOfGains UseFBSignals int OnOff num_lags OnOff Chars Output: none - - FGFFC - get feedforward configuration Description: Get the configuration of the adaptive FF filters. Parameters Type Range Input: none - - Output: NoOfGains UseFBSignals int OnOff num_lags OnOff Chars UseFBSignals: Off to use the velocity logical axis raw input as error signal. On to use the logical axis signal after stage6 as error signal. FSZRP – set parameter for SFF Additionl signals Description: Set the offset for stage X- and Y-Position signals and the maximum of the X- and Y-Position. Those parameters are used to calculate the additional SFF signals. Parameters Type Range Input: XposOffset (digit) YposOffset (digit) XposMax (digit) YposMax (digit) float float float float - - - - Output: none - - FGZRP - Get parameter for FF Additionl signals Description: Get parameter for calculating the additional SFF signals. Parameters Type Range Input: none - - Output: XposOffset (digit) YposOffset (digit) XposMax (digit) YposMax (digit) float float float float - - - - FSFAT – Set Floor Feed forward ADAPTIVE ALGORITHM type Description: Specifies the type of the used adaptive algorithm by the floor feed forward control channels. Parameters Type Range Input: UsedFFFAlgorithmType int [0 – 1] 0: LMS algorithm 1: RLS algorithm Output: none - - FGFAT - get Floor Feed forward ADAPTIVE ALGORITHM type Description: Get the type of the adaptive algorithm of the FFF. Parameters Type Range Input: none - - Output: UsedFFFAlgorithmType int [0 – 1] 0: LMS algorithm 1: RLS algorithm FSSFM – Set Stage FF input multiplier Description: Specifies the multipliers for the input signals of the stage. Parameters Type Range Input: SFFMult[4] float - Output: None - - FGSFM - Get Stage FF input multiplier Description: Get the multipliers of the stage input signals. Parameters Type Range Input: none - - Output: SFFMult[4] float - SFFMult[4]: this is array contains the stage-feed-forward signal multipliers with the order (InpXPOS, InpXACC, InpYPOS and InpYACC). FSFSP - set pneumatic stage feedforward filter stage Description: Set one filter stage of the pneumatic SFF subsystem. Parameters Type Range Input: Axis Source Stage FilterType Parameter1 Parameter2 Parameter3 Parameter4 Parameter5 int int int ftype float float float float float NumPneumAxes num_pff_source TFFStage MaxFilter - - - - - Output: none - - FGFSP - get pneumatic stage feedforward filter stage Description: Get one filter stage of the pneumatic SFF subsystem. Parameters Type Range Input: Axis Source Stage int int int NumPneumAxes num_pff_sources TFFStage Output: FilterType Parameter1 Parameter2 Parameter3 Parameter4 Parameter5 ftype float float float float float MaxFilter - - - - - For each FF-Source there are 6 stage filters (3 reference filters and 3 secondary filters). The pneumatic logical axes are used as error for the adaptive algorithm. There are 3 pneumatic logical axes and also 3 error signals. For each error signal there are two stage filters (core filters “error filters”). TFFStage : 0 – 6 to adjust the reference and secondary filters. TFFStage is related to the num_pff_sources . 7 – 8 to adjust the error filters. TFFStage is related to the NumPneumAxes . FSPpf - set Pneumatic feedforward parameters Description: Set adaptive tuning parameters of a specific ff-source of the pneumatic SFF. Note that for each Source, there is a bitfield of Outputs and an AdaptionRate. The Outputs-Bitfield determines, with witch pneumatic axes the ff-source is combined. Each ff-source could be combined with all 3 pneumatic axes. Parameters Type Range Input: Source Outputs AdaptionRate int hex float num_pff_sources [0 – 7] - Output: none - - FGPpf - get Pneumatic feedforward parameters Description: Get adaptive tuning parameters of the FF subsystem. Parameters Type Range Input: Source int num_pff_source Output: Outputs AdaptionRate hex float [0 – 7] - Source: the number of a specific ff-channel should be configured. Outputs: a hex value to determine, with which pneumatic logical axes the source is combined. AdaptionRate: this is the learning constant for the LMS-Algorithm used by the adaptive tuning to calculate the FIR-Filter gains “tabs”. Outputs-BitField BitNumber: Pneumatic axis 0 Ztpneum 1 Yrpneum 2 Xrpneum FARPF - reset Pneumatic feedforward FIR filter Description: Reset a specific FIR filter tabs “gains” to zero. Parameters Type Range Input: Axis Source int int NumPneumAxes num_pff_sources Output: none - - FSGPF - set Pneumatic feedforward gains Description: Set the gains of a specific FIR filter. Parameters Type Range Input: Axis Source Gains[num_lags] int int float NumPneumAxes num_pff_sources - Output: none - - FGGPF - get Pneumatic feedforward gains Description: Get the gains of a specific FIR filter. Parameters Type Range Input: Axis Source int int NumPneumAxes num_pff_sources Output: Gains[num_lags] float - FSIPF - set Pneumatic feedforward inputs Description: Specify the Input signals to be used as FF source signals. The inputs array contains the indexes of the input signals should be used by the by the pneumatic FF-Subsystem. Parameters Type Range Input: Inputs[num_pff_sources] int LastInput Output: none - - FGIPF - get Pneumatic feedforward inputs Description: Get the input signals that are used as FF source input for the pneumatic FF. Parameters Type Range Input: none - - Output: Inputs[num_pff_source] int[] LastInput FSCPF - set Pneumatic feedforward configuration Description: Configure the adaptive FF filters. Parameters Type Range Input: NoOfGains Threshold (digit) int float num_lags - Output: none - - FGCPF - get Pneumatic feedforward configuration Description: Get the configuration of the adaptive FF filters. Parameters Type Range Input: none - - Output: NoOfGains Threshold (digit) int float num_lags - Threshold: this is a limitation value for the pneumatic FF-output will be add to the output of the pneumatic logical axes. NVRAM and New commands Group NARUP - restore user parameters Description: Force the controller to fetch the parameter set out of the Non-Volatile-Memory. Parameters Type Range Input: none - - Output: none - - NASUP - save user parameters Description: Force the controller to save the current parameter set into the non-volatile-memory. Parameters Type Range Input: none - - Output: none - - NACLR - clear NVRAM Description: Force the controller to clear the parameter-area of the non-volatile-memory. Parameters Type Range Input: none - - Output: none - - NSSFR - set sample frequency Description: Set the sample frequency. The second parameter of this command “mode” has no effect. The sample frequency should be only changed by an experienced engineer, because selecting a very high frequency could hang up the system. Parameters Type Range default Input: Sample frequency mode Float int - (0,1) - Output: none - - - NGSFR - get sample frequency Description: Get the actual adjusted sample frequency Parameters Type Range Default Input: none - - - Output: Sample frequency float - - NSEXL – Set controller configuration Description: This command set which control-loops are configured and will be processed in the firmware. When one control-loop is not configured this forces the firmware to skip processing it. The controller configuration parameter should be only changed by an experienced engineer, because selecting a wrong value could hang up the system. Parameters Type Range Default Input: ExistingLoops int 0x0-0xFFFF 0x01 Output: none - - - NGEXL – Get controller configuration Description: This command get which control-loops are configured Parameters Type Range Default Input: none - - - Output: ExistingLoops int 0x0-0xFFFF 0x01 ExistingLoops bits representation: Table 4.5: ExistingLoop “LoopConfig” parameter bits presentation. Bit number meaning 1 1: FB “velocity” loop is configured, 0: no effect (velocity loop is always present) 2 1: position loop is configured, 0: position loop is not configured. 3 1: pneumatic loop is configured 0: pneumatic loop is not configured. 4 Not used 5 1: Whole FF-Subsystem is configured. 0: Whole FF-Subsystem is not configured. 6 1: Stage FF-Subsystem is configured. 0: Stage FF-Subsystem is not configured. 7 1: Floor FF-Subsystem is configured. 0: Floor FF-Subsystem is not configured. 8 1: Pneumatic FF-Subsystem is configured. 0: Pneumatic FF-Subsystem is not configured. 9 - 32 No used NSASN – set ADC-Channel set number Description: Set the ADC-Sets number should be converted. Parameters Type Range Input: ADC_Sets_Num int 0-7 Output: none - - NGASN - get ADC-Channel set number Description: Get the ADC-Sets number. Parameters Type Range Input: none - - Output: ADCs_Set_Num int 0-7 The opticon controller supports up to 40 ADC-Channels. The most application are not using all ADC-Channels. The number of the used ADC-Channels is dependent on the application “System” for example some systems doesn’t contains proximity sensors, FFF-Sensors or stage FF-Signals. Conversion and reading the ADC-Channels loads the interrupt routine. Therefore it makes sense to read only the used ADC-Channels. The ADC-Signals will be converted set wise. Each set includes 6 ADCs. Enumeration: Table 4.6: AD-Channel set number description. ADC_Set_Num Number of ADCs will be read ADC-Channel number range 0 0 0 1 6 (0 – 5) 2 12 (0 – 11) 3 18 (0 – 17) 4 24 (0 – 23) 5 30 (0 – 29) 6 36 (0 – 35) 7 40 (0 – 39) PNEUMATIC Group PSPSM – Set Pneumatic steering matrix Description: The command sets the multipliers of the sensor and motor steering matrix of a pneumatic logical axis. Parameters Type Range default Input: Axis InputMult[4] OutputMult[4] int float float NumPneumAxes - - - - - Output: - - - - PGPSM – get pneumatic steering matrix Description: The command gets the multipliers of the sensor and motor steering matrix of a pneumatic logical axis. Parameters Type Range default Input: Axis Int NumPneumAxes - Output: InputMult[4] OutputMult[4] float float - - - - PGGIV - get proximity input values Description: Get the current reading of the proximity sensors (in digits). The proximity values are filtered using a low pass filter at 5Hz. Parameters Type Range Input: none - - Output: PoxInput[6] (digit) long - PSPAF - set pneumatic Axis filter stage Description: Set parameters of one filterstage of the pneumatic control loop. Parameters Type Range Input: VAxis Stage FilterType Parameter1 Parameter2 Parameter3 Parameter4 Parameter5 int int int float float float float float NumPneumAxes NumPneumStages MaxFilter - - - - - Output: none - - PGPAF - get pneumatic Axis filter stage Description: Get parameters of one filterstage of the pneumatic control loop. Parameters Type Range Input: VAxis Stage int int NumPneumAxes NumPneumStages Output: FilterType Parameter1 Parameter2 Parameter3 Parameter4 Parameter5 int float float float float float MaxFilter - - - - - PSPCP - set pneumatic config parameters Description: Configure the pneumatic subsystem. This includes a setpoint for the payload to lift initially (soft-stop), a running setpoint for the payload while in normal operation and a mode tolerance value. Parameters Type Range Input: SoftLift (digit) SetPoint (digit) ModeTolerance (digit) float float float - - - Output: none - - PGPCP - get pneumatic config parameters Description: Read the configuration parameters of the pneumatic control loop. Parameters Type Range Input: none - - Output: SoftLift (digit) SetPoint (digit) ModeTolerance (digit) float float float - - - PSPVO - set pneumatic valve offset Description: Set the valve offsets for up and down vertical loop stati for the in the firmware supported four valve outputs. The UpOffset values are used to move the system up. The DownOffset are used to move the system down. Parameters Type Range Input: UpOffset[4] (digit) DownOffset[4] (digit) float float 0 – 32767.0 0 – 32767.0 Output: none - - PGPVO - get pneumatic valve offset Description: Get the valve offsets. Parameters Type Range Input: - int NumPneumAxes Output: UpOffset[4] (digit) DownOffset[4] (digit) float float 0 – 32767.0 0 – 32767.0 PAUCO - use current pressure offset Description: Use the current valve outputs as offset for up or down. Parameters Type Range Input: Condition int 0,1,2 0,1: use current valve outputs as UpOffset 2: use current valve outputs as DownOffset Output: none - - PAMOV - move pneumatic system Description: Move the pneumatic system using the specified action. Parameters Type Range Input: Condition int 0,1,2 0,1: move up 2: move down Output: none - - PGPAS - get Pneumatic axes status information Description: Get pneumatic axes information. This includes the current vertical-loop status, the VRef-value (averaged running setpoint), the actual logical axes inputs and the logical axes outputs. Parameters Type Range Input: none - - Output: VertLoopStatus LoopSetpoint (digit) AxisInput[3] (digit) AxisOutput[3] (digit) int int float float VertLoopStati - - - PGPHV - get Pneumatic height and valve output Description: Get pneumatic loop information. This includes the actual isolator’s heights and the current valve outputs. Parameters Type Range Input: none - - Output: Height[4] (digit) ValveOutput[4] (digit) float float - - PSDCA – set dither compensation alpha Description: Set the dither compensation alpha “learn constant” of the adaptive filter to calculate the dither compensation values for the velocity logical axes. Parameters Type Range Default Input: Dither comp. Alpha Float - -1e-3 Output: None - - - PGDCA – get dither compensation alpha Description: Move the pneumatic system using the specified action. Parameters Type Range default Input: - - - - Output: Dither comp. alpha float - -1e-3 PSDIT - set dither value Description: Set the dither value for one pneumatic loop. The first input doesn’t have effect. Parameters Type Range default Input: Loop type (vertical,horizontal) DitherValue (digit) int float (0,1) - - - Output: none - - - PGDIT - get dither value of pneumatic loop Description: Get the dither value of pneumatic loop. The first input must be zero. Parameters Type Range Default Input: LoopType (vertical,horizontal) int (0,1) - Output: DitherValue (digit) float - - PSDCB – set dither compensation alpha Description: Set a dither compensation alpha “learn constant”. The first input must be zero. Parameters Type Range Default Input: LoopType (vertical,horizontal) Dither comp. Alpha int Float (0,1) - - -1e-3 Output: None - - - PGDCB – get dither compensation alpha Description: Get the dither compensation learn constant. The first input must be zero. Parameters Type Range default Input: LoopType (vertical,horizontal) int (0,1) - Output: Dither comp. alpha float - -1e-3 PSDFR - set dither frequency Description: Set the dither frequency of the pneumatic loops. The first input must be zero. Parameters Type Range default Input: LoopType (vertical,horizontal) Dither frequency int int (0,1) 15-150 - 35 Hz Output: none - - - PGDFR - GEt dither frequency Description: Get the dither frequency of the pneumatic loops. The first input must be zero. Parameters Type Range default Input: LoopType (vertical,horizontal) int (0,1) - Output: Dither frequency int 15-150 35 Hz PSPSS - set PNEUMatic SETPOINT STATUS Description: Set the status of the pneumatic setpoint. Set this parameter to “1” to use the pneumatic setpoint for all pneumatic axes instead only for the Ztrans, in this case the setpoint will be subtracted from all axes input. Set it to “0” to use the setpoint only for the pneumatic Ztrans-axis. Parameters Type Range default Input: UsePneumAxisSetPointForAllAxes int (0,1) 0 Output: none - - - PGPSS - GEt pneumatic setpoint status Description: Get the status of the pneumatic setpoint. Parameters Type Range default Input: none - - - Output: UsePneumAxisSetPointForAllAxes int (0,1) 0 UsePneumAxisSetPointForAllAxes: 0 means the running setpoint will be used only by the pneumatic Ztrans axis. 1 means the running setpoint will be used for all pneumatic axes. PGPST - GEt Position status Timer Description: This command retrieves the two values of the time periods of the last position (VertLoopStatus) okay and VertLoopStatus not okay states. This Command is supported in firmware version 3.3.31 and higher. Parameters Type Range default Input: none - - - Output: PositionOKTimer [seconds] PositionNOKTimer [seconds] float float - - - - VELOcity Group VSSMV - set velocity sensor matrix Description: Specify the sensor-steering matrix of the velocity loop. This includes multiplicators for each of the geophone sensors that may be used. Parameters Type Range Input: Axis SensorMult[7] int float NumVelAxes - Output: none - - VGSMV - get velocity sensor matrix Description: Get the sensor steering matrix of the velocity loop used for the specified axis. Parameters Type Range Input: Axis int NumVelAxes Output: SensorMult[7] float - VSMMV - set velocity motor matrix Description: Set the motor steering matrix of the velocity loop. This means, how to calculate motor outputs out of a logical axis signal. Specify multiplicators for each of the possible 12 motors. Parameters Type Range Input: Axis MotorMult[12] int float NumVelAxes - Output: - - - VGMMV - get velocity motor matrix Description: Get the motor steering matrix of the velocity loop subsystem for the specified axis. Parameters Type Range Input: Axis int NumVelAxes Output: MotorMult[12] float - VSVFS - set velocity filterstage Description: Set one filterstage in the velocity loop subsystem. Parameters Type Range Input: Axis Stage FilterType Parameter1 Parameter2 Parameter3 Parameter4 Parameter5 int int ftype float float float float float NumVelAxes NumVelStages MaxFilter - - - - - Output: none - - VGVFS - get velocity filterstage Description: Get one filterstage in the velocity loop subsystem. Parameters Type Range Input: Axis Stage int int NumVelAxes NumVelStages Output: FilterType Parameter1 Parameter2 Parameter3 Parameter4 Parameter5 ftype float float float float float MaxFilter - - - - - VGGIV - get geophone input values Description: Get the current reading of the geophone sensors. Parameters Type Range Input: none - - Output: GeoInputs[NumGeo] (digit) int +/-32767 Additional Commands LSpsl - set power supply unit limitation config Description: Specify the power supply unit limitation config parameters. Parameters Type Range Input: CurrentLimitValue CurrentSIUnit ResetOverloadsCounter ResetMaxCurrentValue float float int int >0 >0 [0 – 1] [0 – 1] Output: none - - LGpsl - Get power supply unit limitation config Description: retrieve the power supply unit limitation config parameters and some other power supply current values and the power supply current overload status. Parameters Type Range Input: CurrentLimitValue CurrentSIUnit CurrentOverloadStatus PositiveCurrentValue NegativeCurrentValue CompleteCurrentValue MaxCurrentValue CurrentOverloadsCounter float float int float float float float int >0 >0 [0 – 1] [0 – 1] Output: none - - Appendix: SI Unit conversion factors to digit Note : Remember that the SI-Unit conversion factors are system dependent and they could vary. The bellow given SI-Unit conversion factors are approximately values for the most standard systems. Digit: is the SI-Unit used in the firmware for the mostly parameters. Table 5.1: SI unit conversion factors to digits. SI UNIT Conversion factor to digits Velocity [mms -1 ] 17854 digits/mms -1 (Telemechanic sensor “18mm type”) Displacement [µm] 4.7 digits/µm (Telemechanic sensor “12mm type”) Displacement [µm] 8.2 digits/µm (Pulsotronic sensor “12mm type”) Displacement [µm] 9.51 digits/µm (Pulsotronic sensor “18mm type”) Displacement [µm] 5.2 digits/µm (LM80 motor, Std. opticon 2A) Force [N] 204.75 digits/N Voltage [V] 3276.7 digits/V All Time constants and parameters in the firmware are in samples. Sometimes parameters are given in seconds. These parameters are converted inside the firmware to samples. The time unit in the firmware is based on sample frequency samples. 1 second = SF samples, Where: SF is the adjusted sample frequency value. The conversion factor for the force is dependent on the used controller and linear motor. Use the following equation to calculate the force conversion factor. SI Unit conversion factors for the diagnostic output The following table shows the SI unit conversion factors for the opticon diagnostic output. Table 5.2: SI unit conversion factors to diagnostic output [voltage]. SI UNIT Conversion factor to Voltage Velocity [mms -1 ] 5.4649 V/mms -1 (telemechanic sensor “18mm type”) Displacement [mm] 1.43467 V/mm (Telemechanic sensor “12mm type”) Displacement [µm] 2.5025 V/mm (Pulsotronic sensor “12mm type”) Displacement [mm] 2.903 V/mm (Pulsotronic sensor “18mm type”) Displacement [µm] 1.587 V/mm (LM80 Std. opticon 2A) Force [N] 0.0625 V/N The conversion factor for the force is dependent on the used controller and linear motor. Use the following equation to calculate the force conversion factor. Status code Table 5.3: Status codes and their specific values. Status code Value (hex) TC_SUCCESS 0x00 TC_BAD_CRL 0x01 TC_INCOMPLETE_COMMAND 0x02 TC_UNKNOWN_COMMAND 0x03 TC_INVALID_CHAR 0x04 TC_INVALID_ONOFF_VALUE 0x05 TC_INVALID_FLOAT 0x06 TC_INVALID_INTEGER 0x07 TC_INVALID_HEX 0x08 TC_INVALID_FILTER_STAGE 0x09 TC_INVALID_AXIS_CODE 0x0A TC_INVALID_FILTER_PARAM 0x0B TC_INVALID_FILTER_TYPE 0x0C TC_INVALID_FF_SOURCE 0x0D TC_OUT_OF_RANGE 0x0E TC_PASSTHRU_OFF 0x0F TC_NVRAM_PROTECTED 0x10 TC_NOT_ALLOWED_NOW 0x11 TC_KASSANDRA_NOT_RESPONDING 0x12 TC_KASSANDRA_NOT_PRESENT 0x13 TC_EVENT_LOGGING_IS_STARTED 0x14 TC_NO_EVENT_TRACES_IS_SAVED 0x15 TC_COMM_MENU_NOT_ALLOWED 0xFB TC_TIMEOUT 0xFC TC_SLAVE_COMM_FAIL 0xFD TC_ABORT_STATUS 0xFE TC_COMMAND_NOT_IMPLEMENTED 0xFF Temperature sensors AD-Mapping Table 5.4: Linear motor temperature sensor AD-Mapping. Temperature Sensor AD-Mapping standard opticon AD-Mapping 19\" opticon X1MotorTemp 44 44 Y1MotorTemp 26 28 Z1MotorTemp 27 29 X2MotorTemp 28 30 Y2MotorTemp 44 44 Z2MotorTemp 29 31 X3MotorTemp 44 44 Y3MotorTemp 30 32 Z3MotorTemp 31 33 X4MotorTemp 32 34 Y4MotorTemp 44 44 Z4MotorTemp 33 35 RCI-Messages Examples RCI-command using length and CRC The following RCI-Commands contain massage length and CRC. Both values will be checked from TC and in case of rejection based on those values the TC response with an error message. Use the current proximity values as offset: Command: “:0B000 CAUCO39<\\r>”Response: “:0F0000 00 CAUCO2D<\\r\\n\\r\\r>” Command: “:0B000 CAUCO34<\\r>” Response: “:0D01CRC ERROR5F<\\r\\n\\r\\r>” Get the proximity offset values: Command: “:0B000 CGPOV2F<\\r>“ Response: “:5D0000 00 CGPOV -1.00000E+00 -4.00000E+00 -1.00000E+00 -5.00000E+00 +1.00000E+00 -5.00000E+003F<\\r\\n\\r\\r>“ Set velocity sensor matrix values: Command: „:6A000 VSSMV 0 -1.00000E+00 +0.00000E+00 +0.00000E+00 +1.00000E+00 +0.00000E+00 +0.00000E+00 +0.00000E+00 77<\\r>“ Response: “:0F0000 00 VSSMV3B<\\r\\n\\r\\r>“ RCI-command without checking CRC The CRC of the next commands message will not be checked from the TC, because CRC is set to the string “##”. Use the current proximity values as offset: Command: “:0B000 CAUCO##<\\r>” Response: “:0F0000 00 CAUCO2D<\\r\\n\\r\\r>” Command: “:0A000 CAUCO##<\\r>” Response: “:1301LENGTH MISMATCH3B<\\r\\n\\r\\r>” Get the proximity offset values: Command: “:0B000 CGPOV##<\\r>“ Response: “:5D0000 00 CGPOV -1.00000E+00 -4.00000E+00 -1.00000E+00 -5.00000E+00 +1.00000E+00 -5.00000E+003F<\\r\\n\\r\\r>“ Command: “:0C000 CGPOV ##<\\r>“ Response: “:5D0000 00 CGPOV -1.00000E+00 -4.00000E+00 -1.00000E+00 -5.00000E+00 +1.00000E+00 -5.00000E+003F<\\r\\n\\r\\r>“ Command: “:0G000 CGPOV##<\\r> “ Response: “:1201LENGTH NOT HEX1E<\\r\\n\\r\\r>” Set velocity sensor matrix values: Command: „:68000 VSSMV 0 -1.00000E+00 +0.00000E+00 +0.00000E+00 +1.00000E+00 +0.00000E+00 +0.00000E+00 +0.00000E+00##<\\r>“ Response: “:0F0000 00 VSSMV3B<\\r\\n\\r\\r>“ Command: „:68000 VSSMV 6 -1.00000E+00 +0.00000E+00 +0.00000E+00 +1.00000E+00 +0.00000E+00 +0.00000E+00 +0.00000E+00##<\\r>“ Response: “:0F0E00 0E VSSMV3B<\\r\\n\\r\\r>“ RCI-command without checking length and CRC In the following RCI-Commands the message length and CRC are set to the string “##”. This leads the TC to ignore both values. Use the current proximity values as offset: Command: “:##000 CAUCO##<\\r>” Response: “:0F0000 00 CAUCO2D<\\r\\n\\r\\r>” Get the proximity offset values: Command: “:##000 CGPOV##<\\r>“ Response: “:5D0000 00 CGPOV -1.00000E+00 -4.00000E+00 -1.00000E+00 -5.00000E+00 +1.00000E+00 -5.00000E+003F<\\r\\n\\r\\r>“ Set velocity sensor matrix values: Command: „:##000 VSSMV 0 -1.00000E+00 +0.00000E+00 +0.00000E+00 +1.00000E+00 +0.00000E+00 +0.00000E+00 +0.00000E+00##<\\r>“ Response: “:0F0000 00 VSSMV3B<\\r\\n\\r\\r>“ RCI-command with a response length greater than 0xF8 The length of the nest controller response is 0x120, because the length is represented in two hex values, therefore only the first byte is sending and this is the 0x20. What is wrong and should be ignored. Command: “:##!1C DGMSV 0 20##<\\r>” Response: “:20!01C 00 DGMSV -2.01581E+00 -2.01581E+00 -2.01581E+00 -2.01581E+00 -2.01581E+00 -2.01581E+00 -2.01581E+00 -2.01581E+00 -2.01581E+00 -2.01581E+00 -2.01581E+00 -2.01581E+00 -2.01581E+00 -2.01581E+00 -2.01581E+00 -2.01581E+00 -2.01581E+00 -2.01581E+00 -2.01581E+00 -2.01581E+00 -2.01581E+0068<\\r\\n\\r\\r>“ The length of the next controller response is 0x217, because the length is represented in two hex values, therefore only the first byte is sending and this is the 0x17. What is wrong and should be ignored. Command: “ :##!1D DGMSV 0 39##<\\r> “ Response: „:17!01D 00 DGMSV -1.63919E+00 -1.63919E+00 -1.63919E+00 -1.63919E+00 -1.63919E+00 -1.63919E+00 -1.63919E+00 -1.63919E+00 -1.63919E+00 -1.63919E+00 -1.63919E+00 -1.63919E+00 -1.63919E+00 -1.63919E+00 -1.63919E+00 -1.63919E+00 -1.63919E+00 -1.63919E+00 -1.63919E+00 -1.63919E+00 -1.63919E+00 -1.63919E+00 -1.63919E+00 -1.63919E+00 -1.63919E+00 -1.63919E+00 -1.63919E+00 -1.63919E+00 -1.63919E+00 -1.63919E+00 -1.63919E+00 -1.63919E+00 -1.63919E+00 -1.63919E+00 -1.63919E+00 -1.63919E+00 -1.63919E+00 -1.63919E+00 -1.63919E+00 -1.63919E+0029<\\r\\n\\r\\r>“"
  },
  "GuiUserManuals/samba19xui/samba19xui_um.html": {
    "href": "GuiUserManuals/samba19xui/samba19xui_um.html",
    "title": "Introduction | SAMBA19x Website",
    "keywords": "Integrated Dynamics Engineering SAMBA19xUI User Interface Manual AUTHOR(S): Moneer Shatat-Herres REVISION: 08 DATE OF PRINT: December 12, 2017 DOCUMENT CHANGE & HISTORY RECORD Name Last Update Status Version ECR/PR/IP Comment MSHAT 28.01.2016 Draft 00 First version MSHAT 14.09.2016 Draft 01 Modification related to SAMBA19xUI 1.9.0.5, which is a part of the SAMBA1.9.x installation package. MSHAT 02.11.2016 Released 02 Modification related to SAMBA19xUI 1.9.0.6. Note Although this document has been prepared with the utmost care, errors of any kind cannot be totally discounted. The contents of this document may be periodically revised, amended or changed otherwise by the originator without notice. You are invited to report any deficiencies / recommendations to IDE. Note Windows 7 ®, Windows 8 ® are registered trademarks of the Microsoft Corporation, USA. © Copyright 2020, Integrated Dynamics Engineering GmbH Introduction Note SAMBA19xUI is compatible with firmware version 3.3.00 and higher. Language This manual is originally written in English language. document This document describes how to use the “User Interface” for the opticon controller. The “User Interface” allows querying and changing nearly all configurable controller settings. Intended Audience The software and this document is intended for users of an IDE vibration isolation system. Requirements In order to run this software, the following requirements must be met: -Windows 7®, Windows 8®, or later version. -Personal computer with x86- or x64-based microprocessor 2.8 GHz or higher, 4GB RAM are recommended. -SVGA-resolution with a minimum of 1600x900 pixel and 16-Bits high colors. -Mouse or compatible pointing device -Microsoft .Net Frame work 4.5.2 or higher. Contact Integrated Dynamics Engineering GmbH Hermannstrasse 9-13 65479 Raunheim, GERMANY Phone: +49 (0)6142 9400-0 INSTALLATION Copy the installation package from the CD to your PC. Read the SAMBA19x installation Guide document. Getting Started Your PC can communicate with the opticon controller with a USB connection or serial (RS232) connection. Use an A/B USB cable or a null modem cable. Make sure that the FTDI USB-To-Serial converter driver is installed. This is needed to connect to controller via USB connector. Start the SAMBA19xUI User Interface program with a right-click on the SAMBA19xUI shortcut and select Run as Admin. Note: The SAMBA19xUI has to run with administrative privileges. Otherwise the SAMBA19xUI doesn’t start. Start-Up The SAMBA19xUI uses the communication server like the other SAMBA applications. This means only selected COM Ports in the communication server could be used to talk to controller. [!Note] Ensure that the used com port number is configured “selected” by the “Communication Server Configuration Tool”. Otherwise the connection will not be established. Figure 3.1.1 Communication Server Configuration Tool Note If you connect via the USB port, the port will be shown as an additional com port (Virtual Com Port). Note The standard baud rate for the Opticon controller is 57600. After the start of the SAMBA19xUI choose the com port and confirm with the “Connect” button to establish the connection. Note The used com ports by the CommServer could be configured by SAMBA19xUI version 1.9.0.8 and higher assuming the SAMBA19xUI is running with administrator privileges. (By some PCs with 64Bits operation system this doesn’t work properly). Note SAMBA19xUI version 1.9.0.9 accept command line arguments to adjust the com port and baud rate. Call “SAMBA19xUI.exe 1 57600” to launch SAMBA19xUI and to connect automatically to a controller on com port 1 using 57600 baudrate. Note The command line arguments structure regarding the com port number and baud rate has been modified up SAMBA19xUI RC02 V1.9.0.13. Com port could be set by “#CP” prefix and baud rate could be set by “#BR” prefix (example: call “SAMBA19xUI #CP 1 #BR 57600”). Furthermore the command line argument accepts SAMBA19xUI configuration files and SAMBA19xUI label files file. Figure 3.1.2: Connection with a controller. Description Overview The SAMBA19xUI like the old SAMBA_UI has a tabs structure the so called menus. Some tabs “main tabs” contains sub-tabs “sub-menus”. In this document the tabs are called pages. The appearance of some pages is dynamic. This means the containing control elements on the page is dependent on the firmware of the connected opticon. Note: SAMBA19xUI configuration files (*.samba19x_config) could be opened by drag and drop. Connect Page The “Connect” page allows you to connect or disconnect to a controller. Figure 4.1.1: Connect Page. Use “ Baud Rate ” combo box to adjust the baud rate. The default baud rate for all opticon controller is 57600. Use “ Connect ” button to establish the connection with the controller. Use “ Disconnect ” button to disconnect the communication. Use “ Terminate Comm Server and Connect ” button to close the Comm Server session, if one is already started and to connect with a new session. This option is recommended after a communication trouble. Use “ Update Comm Ports list ” button to refresh lists of the available com ports. Figure 4.1.2: Connect Page after a successful connection with controller. Context Menu Click the right mouse button to display the SAMBA19xUI context menu. Figure 4.2.1: Context Menu. About Click “ About ” menu item to display the about dialog. It contains info about the SAMBA19xUI version information and build date. Figure 4.2.2: About Window Refresh Timer A couple of status parameters are continuously refreshed from the controller through a timer event. Click “ Refresh Timer ” menu item to Start/Stop the timer. UI Options SAMBA19xUI contains control elements for new firmware features. New firmware version higher than 3.3.102 provides information about the new features. The info about the new features is included in parameter “ System Configuration Info ”. The SAMBA19xUI reads those info. Then it adjusts its control components regarding to the system configuration info. Click “ UI Options ” menu item to show the “ UI Setting ” window. Figure 4.2.3: UI Setting. Figure 4.2.4: UI Setting. The system configuration info could be modified manually. The modification applies only for the SAMBA19xUI but not for the connected firmware. Disable “ Load System Configuration from Controller ” check box to change the user interface setting manually. Enable “ Auto Loop Switch ” option when the firmware supports the automatic loop switching. Enable “ Non Linear Position Control ” option when the firmware supports the nonlinear position control feature. Enable “ Cascaded Position Control ” option when the firmware supports the cascaded position control feature. Enable “ Event Logging ” option when the firmware supports the event logging feature. Enable “ System Safety Routine ” option when the firmware supports the system safety feature. Enable “ EtherCat Support ” option when the firmware supports the EtherCat communication. Enable “ Pneumatic Ramp Support ” option when the firmware supports the Pneumatic Ramp Support. Enable “ Temperature Sensor Support ” option when the firmware supports the temperature sensor AD-Mapping. Enable “ Safety and Earth Quake Monitor Support ” option when the firmware supports this feature. Enable “ Extended ADC-Channels Support ” option when the firmware supports all existing AD-Channels signals. Enable “ Position and Pneumatic Individual Loop Status Support ” option if the firmware supports the position and pneumatic individual loop status. Enable “ Reference Metrology System Support ” option if the firmware supports the reference metrology system. Enable “ Polynomial System Support ” option if the firmware supports the polynomial system. Enable “ Offset Support for all Linear Motors ” option if the firmware supports the offset for all 12 linear motors. Remark : It is strongly recommended to enable the “ Load System Configuration from Controller ” option to load the system “Firmware” configuration from controller. This option should deactivated only for firmware version older than 3.3.103 which doesn’t contains system configuration info and they supports special features. Controller Page The controller page consists of a couple sub-pages “system setting page, AD/DA setting page and motor protection Page”. System Settings Page The “System Setting” page contains a global parameters setting. Figure 4.3.1: System Setting with EtherCat Support. Figure 4.3.2: System Setting without EtherCat Support. Loops Configuration Use “ Loops Configuration ” to configure the various control loops. Only configured control loops are processed in the firmware. The velocity loop is in the firmware fixed configured. Note : Configuring additional loops loads the processor, therefore please take care about the system load “processor load” by changing the loop configuration. System loop shouldn’t exceeds 80%. Control Item Description Shows whether the velocity feedback loop is configured or not. Toggles the configuration status of the position loop on/off. It also shows the configuration status of the position loop. Toggles the configuration status of the pneumatic loop on/off. It also shows the configuration status of the pneumatic loop. Toggles the configuration status of the whole standard feed forward subsystem “FF-Subsystem” on/off. It also shows the configuration status of the complete FF-Subsystem. Toggles the configuration status of the stage part of FF-Subsystem “SFF” on/off. This contains the first 4 feed forward control channels. It also shows the configuration status of the SFF-Subsystem. Toggles the configuration status of the floor part of FF-Subsystem “FFF” on/off. This contains the last 3 feed forward control channels. It also shows the configuration status of the FFF-Subsystem. Toggles the configuration status of the pneumatic FF-Subsystem “PFF”. It also shows the configuration status of the PFF-Subsystem. Table 4.3.1: Loop Configuration Control Items. Performance Monitor Setting Use “ Performance Monitor Setting ” to specifies the performance monitor signal and the configuration parameters. The actual performance status is shown here. Control Item Description Specifies the I/O-Signal “monitor signal” which should be monitored as performance indicator. Specifies the threshold for a good performance. Specifies the minimal trigger time. The monitor signal has to exceed the threshold value at least for this time to toggles the performance status to not okay. Specifies the hold time duration for the performance status “Not Okay”. Shows the actual performance status. Shows the counter of the trigger time and the countdown of the hold time. Table 4.3.2: Performance Monitor Setting Control Item. Switch Criterion Setting Use “ Switch Criterion Setting ” group box to configure the parameters for the automatic loop switching. If the criterion is fulfilled and the “ Loop Switch Setting ” “Auto” is active the velocity loop will be deactivated and the position loop activated for a specific time “ Hold Time ”. The “ Switch criterion Setting ” group box is optional (not always present) and firmware dependent. It is present only for firmware which supports the “ Auto Loop Switch ” routine. Control Item Description Specifies the I/O-Signal “monitor signal” which should be monitored for the automatic loop switching. Specifies the threshold for the monitor signal. Specifies the minimal trigger time. The monitor signal has to exceed the trigger level at least for this time to trigger the auto loop switching. Specifies the hold time duration for the loop switching. Shows the counter of the trigger time and the countdown of the hold time. Table 4.3.3: Switch Criterion Setting Control Items. Loop Switch Setting Figure 4.3.3: System Setting Page with comments. Control Item Description The above button specifies whether the velocity loop status is always running (doesn’t mean it is active). The below LED shows whether the velocity loop is active. The above button specifies whether the position loop status is always running (doesn’t mean it is active). The below LED shows whether the position loop is active. Toggles the automatic loop parameter on/off and it shows its status. If it is on then the velocity and the position always running status are off. Automatic loop on. When velocity loop and position loop always running (see the left above picture), it is not possible to switch off the position loop by its button. Clicking the position button leads to switch the position always running status but it doesn’t switch the position loop off (see left middle picture). Click auto button to activate the auto loop switch and also to switch the position loop off (see the left below picture). Table 4.3.4: Loop Switch Setting Control Items. Stage FF-Signals The stage FF-Signal group box contains some settings which belong the stage FF-Signal. Control Item Description Specifies whether the type of the stage FF-Signal is analogue or digital. This option is valid only for firmware version older than 3.2.29. This is an option for a special customer solution. It is valid only for firmware older than 3.2.x. Table 4.3.5: Stage FF-Signals Control Items. EtherCat Setting The “ EtherCat Setting ” group box is firmware dependent. It is present just for firmware with EtherCat support. Control Item Description This option leads to overwrite the stage FF-Signals through the FF-Signals, which are provided by the EtherCat master. When this option is on, then the motors values which are provided by the EtherCat master are added to the motor outputs. Table 4.3.6: EtherCat Setting Control Items. Ramp Setting Use the “ Ramp Setting ” to configure the behaviour of the linear motor at startup phase. Control Item Description Specifies the type of outputs ramp. Specifies the ramp time for the linear motors respectively for the velocity axes outputs. Table 4.3.7: Ramp Setting Control Items. Sample Frequency/System Load Here the controller sample frequency could be adjusted. Furthermore the processor load is displayed. Control Item Description Specifies the controller sample frequency value. Click this button to accept the modified sample frequency value. Take care about the system “processor” load before increasing the sample frequency. For a certain operation system load shouldn’t exceeds 80%. Shows the system load. Table 4.3.8: Sample Frequency/System Load Control Items. AD/DA Mapping Page The appearance of the AD/DA-Mapping page is firmware dependent. Use the “ AD/DA Mapping ” page to change the AD- and DA-Mapping of the input signals and output signals. Change “ Used ADC Num ” to change the number of the AD-Inputs which will be read by the firmware. Note : The value of input signals with AD-Mapping-Number equals to 44 are set to zero. Note : Reading additional AD-Inputs loads the processor “DSP” performance and could leads to crash the firmware. Therefore take care about the system load by increasing the used ADC-Number. For a certain operation system load shouldn’t exceeds 80%. Note : See appendix for the right AD-Mapping for the temperature sensors. Figure 4.3.4: AD/DA-Mapping Page with supporting off all physical inputs (AD-Converter-Channels). Figure 4.3.5: AD/DA-Mapping Page. Motor Protection Page Motor Threshold Setting Group Box Figure 4.3.6: Motor Protection Page. Figure 4.3.7: Motor Protection Page with Offset Support for all Linear Motors. Click “ Set Threshold ” to send the changed threshold values to controller. Click “ Set Offset ” to send the changed threshold values to controller. Motor Overheating Setting Motor Overheating Setting Control Item Description Specifies the smooth factor of the running averaging which is used to calculate the temperature respectively motor overcurrent values. Time period before reactivate the motors after an overheating case. Activate this option to use the motor temperature sensors instead the motor overcurrent values “modelled temperature” Activate to disable all motors in case of overheating of one motors. Table 4.3.9: Motor Overheating Setting Control Items. Status Page The “Status” main menu contains two sub menus (“ Status ” Page and “ Signals Display ” page). Status Page Figure 4.4.1: Status page. Figure 4.4.2: Status Page with position and pneumatic individual loop status. Signals Display Page Up to 16 signals values could be continue displayed in big font. The signals are adjustable (Controller IO-Signal “Inputs, outputs, loops axes value …etc”). Note : The event logging monitor signals are used here as IO-Signals. Changing these IO-Signals here will change automatically the event logging monitor signals and vice versa. Figure 4.4.3: Signals Display Page. Excitation Setting Control Item Description Specifies the IO-Signal which its value will be continue displayed. Saves the event logging configuration parameters, which contains the IO-Signals. Loads the event logging configuration parameters, which contains the IO-Signals. Table 4.4.1: Signals Display Control Items Velocity Page The “ Velocity ” main menu contains two sub menus (“ Tuning ” Page and “ Sensor/Motor Matrix ” page). Velocity Tuning Page Figure 4.5.1: Velocity Tuning Page Velocity Loop Filters Click on any filter button” ” to open the “ Filter Setting Dialog ” and to change its setting. Click “ Update ” button to accept the change for the clicked filter. Click “ Update for all Axes” button to accept the change for the clicked filter number for all axes. Change the “ Axis Limiter ” value to specify the velocity axis output limit. Excitation Use “ Excitation ” group box to configure an excitation signal and its injection point “signal”. Excitation Setting Control Item Description Click “ Accept Change ” button to accept the modification of the excitation setting and to send it to the controller. Specifies the excitation signal type. Specifies the excitation filters. Specifies the injection node “signal” of the excitation signal. Table 4.5.1: Excitation Control Items. Excitation Type Parameters White Noise “Gain [-1,+1]” the gain range [-1,+1] corresponds to [-32000, +32000 digits]. Sine Wave “Gain [-1,+1]” the gain range [-1,+1] corresponds to [-32000, +32000 digits]. Sine wave frequency in Hz. Duty Cycle “Gain [-1,+1]” the gain range [-1,+1] corresponds to [-32000, +32000 digits]. High Period in millisecond. During this period the signal amplitude equals the adjusted “Gain” Low Period in millisecond. During this period the signal amplitude is set to zero Chirp Sine “recursive” “Gain [-1,+1]” the gain range [-1,+1] corresponds to [-32000, +32000 digits]. Start “lowest” frequency of the chirp sine. End “Highest” frequency of the chirp sine. Time Period of the chirp sine in second. Table 4.5.2: Excitation Types and their Parameters. Diagnostic Signals Diagnostic Signals Control Item Description Specifies the IO-Signal which applies to the Diag0 BNC-Box on the controller front panel. Specifies the IO-Signal which applies to the Diag1 BNC-Box on the controller front panel. Table 4.5.3: Diagnostic Signals Control Items. Tuning Helping Hand Use the “ Tuning Helping Hand ” to simplify the configuration of the excitation injection point and diagnostic signals by measuring the frequency response function of the velocity loop axes. Tuning Helping Hand Control Item Description Specifies after which stage the axis will be measured. Click a button to specify the axis which will be measured. Table 4.5.4: Tuning Helping Hand Control Items. Sensor/Motor Matrix Use the “ Sensor/Motor Matrix ” page to configure “build” the velocity logical axes by changing inputs “sensors” respectively outputs “actuators” multipliers (6 degree of freedom). Figure 4.5.2: Velocity Sensor/Motor Matrix Page with 7 sensors. Figure 4.5.3: Velocity Sensor/Motor Matrix Page with 8 sensors. Position page The “ Position ” main menu contains four sub menus. Its appearance is firmware dependent. The axes number, the filters number as well as the number of the proximity offsets are firmware dependent. Tuning page The position “ Tuning ” page has a dynamic appearance. Its appearance depends on the running firmware of the opticon controller. It contains the position filter setting, proximity sensor offsets, excitation group box, and tuning helping hand group box. There is a field, which displays the actual proximity sensor input values and the position error relative to the offsets values. Furthermore it contains the cascaded position and nonlinear position control configuration parameters. The cascaded and nonlinear position control features are firmware dependent. They are not in standard features. Figure 4.6.1: Position Tuning Page Figure 4.6.2: Position Tuning Page (Firmware supports 10 position axes and 6 position filters and position individual loop status). Figure 4.6.3: Position Tuning Page with Nonlinear Position Control Support. Figure 4.6.4: Position Tuning Page with Cascaded Position Control Support Proximity Offsets The proximity offsets values are subtracted from the proximity inputs values to build the proximity without offset inputs. Proximity Offsets Control Item Description Specifies the offset value for the vertical proximity of isolator 1. Specifies the offset value for the vertical proximity of isolator 2. Specifies the offset value for the vertical proximity of isolator 3. Specifies the offset value for the vertical proximity of isolator 4. Specifies the offset value for the horizontal proximity of isolator 1. Specifies the offset value for the horizontal proximity of isolator 2. Specifies the offset value for the horizontal proximity of isolator 3. Specifies the offset value for the horizontal proximity of isolator 4. Table 4.6.1: Proximity Offsets Control Items. Excitation/Diagnostic See sections 4.5.1.2 and 4.5.1.3. Cascaded Position Setting The cascaded position control is firmware dependent. It is supported only in special firmware versions. The cascaded position control is used to get more position stability and accuracy. The vertical position is controlled by a cascaded control loop. The cascaded control loop consists of two control loops one is the position loop and the other is the pneumatic loop. Only the first 3 position axes are used. The cascaded control Cascaded Position Setting Control Item Description Specifies the hysteresis value for switching between cascaded and normal position control. Specifies the pre-filter between the position loop and pneumatic loop. Table 4.6.2: Cascaded Position Setting Control Items. Nonlinear Position Setting The nonlinear position is firmware dependent. It is supported only in special firmware versions. It is applies for the first three position loop axes. The nonlinear position supports the pneumatic loop to stabilize the payload position by low frequency systems with nonlinear floatation behaviour. Nonlinear Position Setting Control Item Description Specifies the operation type of the nonlinear position control. AtOutput: the position axes output are used to switch nonlinear on/off. AtOutput: the position axes input are used to switch nonlinear on/off. None: nonlinear position control off. Activates resetting the position filters by toggling the nonlinear position control. Specifies the position window where the nonlinear position control is switched off. Specifies the position window where the nonlinear position control is switched on. Table 4.6.3: Nonlinear Position Control Items. Tuning Helping Hand Use the “ Tuning Helping Hand ” to simplify the configuration of the excitation injection point and diagnostic signals by measuring the frequency response function of the position loop axes. Tuning Helping Hand Control Item Description Specifies after which stage the axis will be measured. Click a button to specify the axis which will be measured. Table 4.6.4: Position Tuning Helping Hand Control Items. Sensor Matrix Page Figure 4.6.5: Sensor Matrix Page with 6 axes. Figure 4.6.6: Sensor Matrix Page with 8 axes. Use “ Sensor Matrix ” to specifies the inputs “devices” used by the position loop and their multipliers. Motor Matrix Page Figure 4.6.7: Motor Matrix Page with 6 axes. Figure 4.6.8: Motor Matrix Page with 8 axes. Use “ Motor Matrix ” to specifies the outputs “devices” used by the position loop and their multipliers. Proxy Adjustment Page The “Proxy Adjustment” page is displaying the proximity sensors values in a big font. It is intended to help adjusting the proximity sensors by manufacturing the systems. Figure 4.6.9: Proximity Adjustment Page. Pneumatic Page The “ Pneumatic ” page contains just one submenu “ Tuning Page ”. Its appearance depends on the running firmware. The number of valve outputs and the inputs number are firmware dependent. Furthermore the payload floatation setting depends on the firmware. Pneumatic Tuning page Figure 4.7.1: Pneumatic Tuning Page Figure 4.7.2: Pneumatic Tuning Page with 8 inputs, 8 outputs and pneumatic ramp. Figure 4.7.3: Pneumatic Tuning Page with 8 inputs, 8 outputs and pneumatic ramp. Use “ Sensor Matrix ” and “ Valve Matrix ” to configure the pneumatic logical axes (the vertical 3 degrees of freedom “Ztrans, Xrot and Yrot). Use “ Pneumatic Filter ” group box to change the axes filter settings by clicking on the filter button. Use “ Valve Offset ” group box to specify resp. modify the Up- and Down-Offset values. Change “ Isolator Offsets ” values to change the isolator floatation heights separately “isolator wise”. Control Item Description Click this button to drive the system up “floatation”. Click this button to drive the system down “deflating”. Click this button to accept the actual valve outputs as valve up-offsets. Click this button to accept the actual valve outputs as valve down-offsets. Toggles the pneumatic loop status On/Off. Toggles “ Use the setpoint for all axes ” option on/off. Toggles the valve dithering on/off. Toggles the move system up after startup “controller power cycle” On/Off. Table 4.7.1: Pneumatic Loop common Control Items. Floatation Config Use “ Floatation Config ” group box to configure the system floatation settings. Floatation Config Control Item Description Specifies the value which will be added to the initial proximity value to build the reference height “RefPoint” for down state. Specifies the set point “floatation height” for the payload. Specifies the position error tolerance value. Table 4.7.2: Floatation Config Control Items. Dithering Config Use “ Dithering Config ” group box to configure the dither signal, which is added to the valve output. The dither signal is a sine wave signal with adjustable amplitude “Amount” and frequency. Dithering Config Control Item Description Specifies the amplitude value of the dither sine wave signal. Specifies the frequency value of the dither sine wave signal. Specifies the learning constant for the dither compensation adaptive filter “Alpha” could be specified. Table 4.7.3: Dither Config Control Items. Pneumatic Ramp Setting Use “Pneumatic Ramp Setting” to specify the value of the pneumatic ramp parameter. Pneumatic Ramp Setting Control Item Description Specifies the running average smooth factor used to calculate the isolator’s height from of the proximity values. Specifies the gradient value for the reference point “RefPoint” by moving the system up. Specifies the gradient value for the reference point “RefPoint” by moving the system down. This is the time period to drive the valve output from Down-Offset to Up-Offset values. Table 4.7.4: Pneumatic Ramp Setting Control Items. Feed Forward Page The “ Feed Forward ” page contains two subpages “ FF Tuning, FF Gains ”. FF Tuning Page The “ FF Tuning ” page contains nearly all configuration “tuning” parameters for the standard feed forward control channels. Figure 4.8.1: FF Tuning Page. FF Global Setting Control Item Description Specifies the reference input signal of the FF-Channel. Specifies the adaptive “learning” constant of the “LMS-Algorithm” for the FF-Channel. Toggles the FF-Channel-Output for the corresponding axis On/Off. . Those are the reference filters. They are associated to the FF-Channel. They are used to pre-filter the input signals. Click on the filter button to change its setting. Those are the secondary filters. They are associated to the FF-Channel. They are used to pre-filter the input signal used by the LMS-Algorithm. Click on the filter button to change its setting. Those are the error filters. They are associated to the velocity axes. They are used to pre-filter the velocity axis. Table 4.8.1: FF Global Setting Control Items. Stage Signal Multipliers Use “ Stage Signal Multipliers ” group box to adjust the stage signals multipliers. The multipliers manipulate the stage signals levels and also the tuning of the stage FF-Subsystem. Stage Signal Multipliers Control Item Description Specifies the multiplier value of the stage signal XPos. Specifies the multiplier value of the stage signal XAcc. Specifies the multiplier value of the stage signal YPos. Specifies the multiplier value of the stage signal YAcc. Table 4.8.2: Stage Signal Multipliers Control Items. Stage Signal Offsets Use “ Stage Signal Offsets ” group box to configure the offset values for stage position signals. The offsets values influence the stage signal level of the stage position signals and also the calculated stage FF-Signals “ZrXacc and ZrYacc”. Stage Signal Offsets Control Item Description Specifies the offset value of the stage signal XPos. Specifies the offset value of the stage signal YPos. Table 4.8.3: Stage Signal Offset Control Items. Stage Signal Maximums Use “ Stage Signal Maximums ” group box to configure the max values for the stage position signals. The maxima values the calculated stage FF-Signals “ZrXacc and ZrYacc”. Stage Signal Maximums Control Item Description Specifies the maximum value of the stage signal XPos. Specifies the maximum value of the stage signal YPos. Table 4.8.4: Stage Signal Maxima Control Items. Threshold/Gains Number Use “ Threshold/Gains Number” group box to adjust the FF-Output threshold value and the used gains number and to toggles the FF-Subsystem, the adaptive status and using the raw axis input on/off. Threshold/Gains Number Control Item Description Specifies the maximum value for axis output part coming from the FF-Subsystem. Specifies the gains “coefficients” number of all FIR-Filters. Toggles the FF-Subsystem On/Off. Toggles the FIR-Coefficients adaption On/Off. This options specifies whether the velocity axis raw input or the filtered velocity axis signal after is used as error signal. Table 4.8.5: Threshold/Gains Num Control Items. FF Gains Page On the FF Gains the user is able to edit respectively modify the FIR-Filter gains “coefficients” manually. Click the respective “ Source ” button to access the gains of its FF-Channel. Table 4.8.6: FF Gains Page. Pneumatic FF Page The “ Pneumatic FF ” page contains two subpages “ PFF Tuning, PFF Gains ”. PFF Tuning Page The “ PFF Tuning ” page contains nearly all configuration “tuning” parameters for the pneumatic feed forward control channels. Figure 4.9.1: PFF Tuning Page. PFF Global Setting Control Item Description Specifies the reference input signal of the pneumatic feed forward channel “PFF-Channel”. Specifies the adaptive “learning” constant of the “LMS-Algorithm” for the PFF-Channel. Toggles the PFF-Channel-Output for the corresponding pneumatic axis On/Off. Those are the reference filters. They are associated to the PFF-Channel. They are used to pre-filter the input signals. Click on the filter button to change its setting. Those are the secondary filters. They are associated to the PFF-Channel. They are used to pre-filter the input signal used by the LMS-Algorithm. Click on the filter button to change its setting. Those are the error filters. They are associated to pneumatic axes. They are used to pre-filter the pneumatic axis. Table 4.9.1: PFF Global Setting Control Items. Threshold/Gains Number Threshold/Gains Number Control Item Description Specifies the maximum value for pneumatic axis output part coming from the PFF-Subsystem. Specifies the gains “coefficients” number of all FIR-Filters. Toggles the PFF-Subsystem On/Off. Toggles the FIR-Coefficients adaption On/Off. Table 4.9.2: Threshold/Gains number Control Items. PFF Gains Page On the “PFF Gains” page the user is able to show respectively modify the FIR-Filter gains “coefficients” manually. Click the respective “ Source ” button to access gains of its PFF-Channels. Figure 4.9.2: PFF Gains Page. Save/Load Setup The “ Save/Load Setup ” page contains only one subpage “ Save/Load ”. Figure 4.10.1: Save/Load Page Save/Load/Clear NVRAM Control Item Description Click this button to save the actual parameters setting into the NVRAM. Click this button to load the parameters setting from the NVRAM. Click this button to clear the already saved parameters setting from NVRAM. Click this button to save the actual parameters setting to a setup “xml” file. Click this button to load the actual parameters setting from a setup “xml” file. This action doesn’t mean the loaded parameters are saved automatically into NVRAM. If this is desired then click the corresponding button . Toggles the NVRAM-Protection On/Off. By active NVRAM-Protection both button clear NVRAM and save into NVRAM are disabled. Table 4.10.1: Save/Load/Clear NVRAM Control Items. Save/Load File Control Item Description Click this button to save the actual parameters setting to a setup “xml” file. Click this button to load the actual parameters setting from a setup “xml” file. This action doesn’t mean the loaded parameters are saved automatically into NVRAM. If this is desired then click the corresponding button . Table 4.10.2: Save/Load File. NVRAM Areas Check Sum Information. Note : The NVRAM check sum information are not automatically loaded from the controller by activating the save/Load-Page like by the old SAMBA_UI. Furthermore the check sum numbers are not build automatically by saving into NVRAM like the old SAMBA_UI. Control Item Description Shows the saved and the actual check sum numbers of the various NVRAM areas (monitor, firmware and configuration). Calculate the NVRAM areas check sum numbers and save them into NVRAM. Read the saved check sum numbers. Table 4.10.2: Save/Load File. Set/Generate Label File The label file contains labels for the user interface control items like the labels for the velocity loop inputs and outputs, input signals names, physical signals names (ADC-Signals) … etc. It influences the appearance of the user interface. If there is no label file specified the SAMBA19x_UI uses the hard coded default labels. Control Item Description Shows the actual adjusted label file. Click this button to generate a default label file. Click this button to reset the labels to the default labels. (Modification requires restart ofSAMBA19x_UI). Click this button to set the labels to specific label file. (Modification requires restart ofSAMBA19x_UI). Table 4.10.3: Set/Generate Label File Note : By changing the label file a SAMBA19xUI restart is required to enable the new labels. Special Page The special page is firmware dependent. It could be empty or it could has many pages which are containing a customized features. Safety Page The safety page contains the setting for the safety routine “performance routine” and earth quake detection routine. The safety routine could be called a performance monitoring routine, because it monitor the performance of the system regarding to its vibration and position. Figure 4.11.1: Safety Page. The safety routine uses the “root mean square” RMS-Values of the geophone and proximity sensors to detect a safety respectively performance mal function. The earth quake routine uses the RMS-Values of the floor geophone sensors, which are placed on the ground, to detect an earth quake. Safety and Earth Quake Status Control Item Description Shows the vibration status ok or not ok. Shows the vibration status ok or not ok. Shows if an earth quake has been detected or not. Table 4.11.1: Safety and Earth Quake Status. Safety Setting Safety Setting Control Item Description Geophone Limit Specifies the limit value for the geophone sensor RMS-Values, which shouldn’t be exceeded. Otherwise the vibration status becomes not okay. Proximity Limit Specifies the limit value for the proximity sensor RMS-Values, which shouldn’t be exceeded. Otherwise the position status becomes not okay. RMS Time Window Specifies the time period for the safety RMS-Values. Table 4.11.2: Safety Setting Control Items. Earth Quake Setting Earth Quake Setting Control Item Description Geophone Limit Specifies the limit value for the floor geophone sensor RMS-Values, which shouldn’t be exceeded. Otherwise the earth quake status becomes on. RMS Time Window Specifies the time period for the earth quake RMS-Values. Table 4.11.3: Earth Quake Setting Control Items. System Safety Page The system safety page contains the configuration data of the performance monitoring system. The vibration of velocity loop axes and the position of the position loop axes are monitored. For each velocity and position loop axis there is an adjustable threshold value. By the vibration monitoring the root mean square values of the velocity axes raw inputs about 1 seconds are built. By the position monitoring the position axes values after last filter are used. The vibration status is Ok when all RMS-Values of the velocity axes are below their threshold values. Otherwise it is not ok. The position status is Ok when all values of the position axes are below their threshold values. Otherwise it is not ok. Figure 4.11.2: System safety Page. Not all Firmware supports getting the position loop axes actual values. By such a firmware the safety system looks like the below figure. Figure 4.11.3: System safety without position axes values. Polynomial Page The polynomial page contains the configuration data of the polynomial system. Figure 4.11.4: Polynomial Page Polynomial Configuration Earth Quake Setting Control Item Description Toggles the polynomial processing status and overall active status on off. Saves the current polynomial configurations to a file. Loads an already saved polynomial configuration from file. Specifies the input signal of a specific polynomial. Specifies the output signal of a specific polynomial. Displays the current value of the input signal of a specific polynomial. Displays the current value of the output signal of a specific polynomial. Specifies the first coefficient value of a specific polynomial. Specifies the second coefficient value of a specific polynomial. Specifies the third coefficient value of a specific polynomial. Specifies the limiter value for a specific polynomial. Toggles a specific polynomial on/off. Table 4.11.4: Polynomial Setting Control Items. Troubleshooting Can’t run SAMBA19xUI Ensure that the .Net framework 4.5.2 or higher is installed. Run the SAMBA19xUI as administrator. No Communication. Check if the controller is powered on and the monitor LED is blinking. Check if either a USB cable or a serial cable connects the controller with the PC. Check if the used com port is selected by the “Communication Server ” Use “ Terminate Comm Server and Connect ” button to establish the connection. SAMBA19xUI hangs up during connecting to controller By a communication failure with the controller and disconnecting, the communication server could hang up. When one try to reconnect to the controller using the “ Connect ” button the SAMBA19xUI hangs up. Solution: Terminate the SAMB19xUI using the task manager. Restart SAMBA19xUI and connect to the controller using “ Terminate Comm Server and Connect ”. SAMBA19xUI doesn’t refresh the status parameters from controller The SAMBA19xUI is connected to controller but it doesn’t refresh the status parameters like the loop status, individual loop status, pneumatic floating status parameters and position values. Solution: Enable the refresh timer from the context menu. Sometimes you have to do it twice to enable. SAMBA19xUI doesn’t start or it rises with and error message If the SAMBA19xUI doesn’t start. Solution: Start SAMBA19xUI with administrator privileges. Ensure the required .Net framework is installed. If a failure occurs that cannot be solved, contact our technical support. Phone: +49 (0) 6142 94000 Known Bugs and Problems The following section lists the currently known bugs. These bugs will be resolved in future versions of the software. Description Date Version Status Solved When the application runs for a rather long time “days”, it might happen that the communication with the controller stops. 1.9.0.4 Bug, open No SAMBA19xUI version 1.9.0.4 is not able to communicate with firmware version older 3.3.0. (It is still not recommended to use the SAMBA19xUI for firmware older 3.3.0). 1.9.0.4 Known issue Solved in 1.9.0.5 During loading all parameters from the controller by saving the actual parameters to xml file. The loading status window freezes after loading a couple of parameters. Work around: Wait until loading all parameters from controller is finished and go on with saving to the xml file. 1.9.0.4 Known Issue No Note: For more Information about software bugs and issues see the SAMBA19x “Software Revision History.pdf”. Appendix Temperature Sensors AD-Mapping Sensor ADC Channel Number Standard Opticon 19 Zoll front panel Opticon OutX1Temp 44 44 OutY1Temp 26 28 OutZ1Temp 27 29 OutX2Temp 28 30 OutY2Temp 44 44 OutZ2Temp 29 31 OutX3Temp 44 44 OutY3Temp 30 32 OutZ3Temp 31 33 OutX4Temp 32 34 OutY4Temp 44 44 OutZ4Temp 33 35 Table 7.1.1: AD-Mapping for the temperature sensors."
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | SAMBA19x Website",
    "keywords": "This is the HOMEPAGE . Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  },
  "GuiUserManuals/loggingtool/loggingtool_um.html": {
    "href": "GuiUserManuals/loggingtool/loggingtool_um.html",
    "title": "Introduction | SAMBA19x Website",
    "keywords": "Integraded Dynamics Engineering LoggingTool User Manual AUTHOR(S): Moneer Shatat-Herres REVISION: 01 DATE OF PRINT: December 12, 2017 DOCUMENT CHANGE & HISTORY RECORD Name Last Update Status Version ECR/PR/IP Comment MSHAT 30.05.2017 Draft 00 First version MSHAT 07.12.2017 Released 01 Modification related to LoggingTool RC02 V1.0.0.1 Notice! Although this document has been prepared with the utmost care, errors of any kind cannot be totally discounted. The contents of this document may be periodically revised, amended or changed otherwise by the originator without notice. You are invited to report any deficiencies / recommendations to IDE. Windows 7 ®, Windows 8 ® are registered trademarks of the Microsoft Corporation, USA. © Copyright 2017, Integrated Dynamics Engineering GmbH Introduction Remark : The LoggingTool application is compatible with firmware version 3.3.00 and higher. Language This manual is originally written in English language. Introduction This document describes how to use the LoggingTool with the opticon controller. The LoggingTool allows the user to trace any opticon IOSignal (Inputs, outputs, control loop nodes). Up to 40 signals could be traced simultaneously. Intended Audience The software and this document is intended for users of an IDE vibration isolation system. Requirements In order to run this software, the following requirements must be met: Windows 7®, Windows 8®, or later version. Personal computer with x86- or x64-based microprocessor 2.8 GHz or higher, 4GB RAM are recommended. SVGA-resolution with a minimum of 1600x900 pixel and 16-Bits high colors. Mouse or compatible pointing device Microsoft .Net Frame work 4.5.2 or higher. Contact Integrated Dynamics Engineering GmbH Hermannstrasse 9-13 65479 Raunheim, GERMANY Phone: +49 (0)6142 9400-0 INSTALLATION Copy the installation package from the CD to your PC. Read the SAMBA19x installation Guide document. Getting Started Your PC can communicate with the opticon controller with a USB connection or serial (RS232) connection. Use an A/B USB cable or a null modem cable. Make sure that the FTDI USB-To-Serial converter driver is installed. This is needed to connect to controller via USB connector. Start the LoggingTool program with a right-click on its icon and select Run as Admin. Note The LoggingTool has to run with administrative privileges. Otherwise the it doesn’t run properly. Start-Up The LoggingTool uses the communication server like the other SAMBA applications. This means only selected COM Ports in the communication server could be used to talk to controller. Note1 : Ensure that the used com port number is configured “selected” by the “Communication Server Configuration Tool”. Otherwise the connection will not be established. Figure 3.1.1 Communication Server Configuration Tool Note2 : If you connect via the USB port, the port will be shown as an additional com port (Virtual Com Port). Note3 : The standard baud rate for the Opticon controller is 57600. After the start of the LoggingTool choose the com port and confirm with the “Connect” button to establish the connection. Note4 : The used com ports by the CommServer could be configured by LoggingTool assuming it is running with administrator privileges. (By some PCs with 64Bits operation system this doesn’t work properly). Note5 : the LoggingTool accept command line arguments to adjust the com port and baud rate. Call “LoggingTool.exe 1 57600” to launch LoggingTool and to connect automatically to a controller on com port 1 using 57600 baudrate. The command line arguments structure regarding the com port number and baud rate has been modified up LoggingTool RC02 V1.0.0.1. Com port could be set by “#CP” prefix and baud rate could be set by “#BR” prefix (example: call “View3D19x.exe #CP 1 #BR 57600”). Furthermore the command line argument accepts View3D19x record file and View3D19x settings file. Figure 3.1.2: Connection with a controller. Description Overview The LoggingTool application allows the user to trace any opticon IOSignal (Inputs, outputs, control loop node signal “velocity-, position-loop axis node” etc …). Up to 40 signals could be traced simultaneously. There are two kind of tracing “Logging”: Internal logging here the traced signal’s value will be saved to an internal storage into controller and after tracing the data could be picked and saved to a file. Using the internal logging the user is able to log the data in real time (real time means here the data could be traced with the opticon sample frequency). File logging allows the user to log the signal’s data direct to a file. The data will be picked up per RCI-Command “IDE owner data transfer protocol” from the controller. This kind of logging so fast as the used communication interface and the data transfer traffic. The maximal possible trace speed is 10 traces per second. Note LoggingTool record files (*.iloggrecjson, *.iloggrecxml, *.loggrecjson, *.iloggrecxml) and settings files (*.logg19xconfig) could be opened by drag and drop. The LoggingTool basically consists of five main control areas (Icons toolbar, the control panel, Monitor Signals Setting, Internal Logging Setting and File logging Setting). The control panel contains a couple of expanding tabs (Connection, Save/Load … etc). Figure 4.1.1: LoggingTool Overview. Icons Toolbar The loggingTool contains an icon-bar with couple of control item to start logging, plot already logged data …etc. Figure 4.2.1: LoggingTool Icon-Toolbar. Control Item Description Starts the internal logging. Starts the file logging. When the logging is finished then log data could be saved to a file. There are tree file format available to save the data. Text format with the extension “LoggRecTxt”, JSON format with the extension “LoggRecJson” and xml format with the extension “LoggRecXml”. Plots an already logged data file from a json or xml file format. Generates an logg data and plotting manipulation example file. Opens an already logged data file from a json or xml file format and prepares the data and configures how the data will be plotted using a .loggmanxml file ( logg data and plotting manipulation file) Shows the progress of the file logging. Table 4.2.1: Icons-Toolbar control items. Connection Tab The “Connection” tab allows you to connect or disconnect to a controller. Figure 4.3.1: Connection Tab. Use “ Baud Rate ” combo box to adjust the baud rate. The default baud rate for all opticon controller is 57600. Use “ Connect ” button to establish the connection with the controller. Use “ Disconnect ” button to disconnect the communication. Use “ Terminate Comm Server and Connect ” button to close the Comm Server session, if one is already started and to connect with a new session. This option is recommended after a communication trouble. Use “ Update Comm Ports list ” button to refresh lists of the available com ports. Figure 4.3.2: Connection Tab after a successful connection with controller. Save/Load Tab Using the Save/Load tab allows the user to save respectively load a LoggingTool setting to respectively from a file. The settings include all possible LoggingTool adjustable parameters (Monitor signal Definition, Internal Logging Setting and File Logging Setting). Remark : Excitation settings are not included in the LoggingTool setting, which will be saved respectively loaded. Figure 4.4.1: Save/Load Tab. Excitation Tab The Excitation tab allows the user to excite the system with a specific signal (Sine wave, white noise …etc). Please take a look to “SAMBA19x User Interface Manual.pdf” to get more information about it. Figure 4.5.1: Excitation Tab. Loop Status Tab This tab shows the velocity individual loop status. Figure 4.6.1: Loop Status Tab. Monitor Signals Definition Figure 4.7.1: Monitor Signals Definition. Remark : the monitor signal’s values are not up-to-date. The values are refreshed only one time by connecting to the controller. During file logging they are refreshed continuously. Internal Logging Setting Figure 4.8.1: Internal Logging Setting. The internal logging is divided to two different types, event logging (OverCurrent Event and Event Signal Event) and standard logging (Standard Logging). Event Logging The event logging allows two kinds of events. The first one is a fixed event; when motors over-heating respectively Over-Current state occurred “ Overheating- or ”OverCurrent”-Event-Logging ”; the second event is configurable “ Event Signal Logging ”. When the event logging is started the trace-signal-values will be buffered into a circular buffer until the event occurred. If the Delay sample is not zero, the buffering goes on until the delay samples are elapsed. The logging begins to trace the next “Trace” or stop logging if the max number of possible traces is reached or the user stops it. Remark: the delay samples are opticon controller sample frequency samples. This is different from the trace sample frequency, because using the undersample. In case of undersample of 1 the they are identical. The adjustable event could be any signal of the IOSignals. The adjustable event consists of IOSignal, threshold value and trigger time. The event is occurred when the threshold has been exceeded at least for the trigger time period. Parameter Setting Parameter Setting Control Item Description Logging Type OverCurrent Event Set the internal logging type to event logging. The motor overcurrent status is used to trigger the data logging. Event Signal Event Set the internal logging type to event logging The event signal status is used to trigger the internal data logging. Standard Set the internal logging type to standard. Specifies the number of signals which will be traced. Specifies the number of data which will be traced. Specifies the undersample number. The internal storage capacity of the opticon isn’t endless. The undersample parameter aloows to take long time traces. Undersampling means each undersample-th data will be traced. Specifies how many opticon controller sample frequency samples should be expired before stopping data tracing “circular buffering”. It is only used by the event logging. Specifies whether averaging the data by undersampling or not. Table 4.7.1: Parameter Setting Control Items. Event Setting Control Item Description Specifies the event signal it is an IOSignal (input, output, control-loop-node). Specifies the threshold for the event signal value. Specifies the trigger sample numbers. The event is occurred when the event signal value exceeds the threshold value for the trigger samples time. Table 4.7.2: Event Setting Control Items. Logged Traces Control Item Description Selects the trace which will be saved from the available traces. Loads the trace data and saves it to file. There are tree file format available to save the data. Text format with the extension “ILoggRecTxt”, JSON format with the extension “ILoggRecJson” and xml format with the extension “ILoggRecXml”. Table 4.7.3: Logged Traces Control Items. Info Control Item Description Displays the sample frequency of the opticon controller. Shows the status if the logging started or stopped. (0: logging stopped, 1:logging already started) Shows the maximal number of traces could be taken into the controller internal storage space. This is in case of event logging. Shows the already saved “buffered” trace to the internal buffer, which could be picked up. This is only for the event logging. In case of standard traces there is only one trace. Shows the data number which already has been buffered. In case of standard logging and the user stops logging before it is finished, then this value show the number of data has been already buffered and could be picked up. Shows the error status of the logging. (0: No Error) Shows the estimated trace duration. Shows the delay time. It is calculated from delay sample value and sample frequency value. Table 4.7.3: Info Control Items. File Logging Setting The file logging allows the user to log specific data long time directly into a file. The data is picked up per Remote Command Interface “Opticon Data Transfer Protocol”. File Logging Setting Control Item Description Specifies how many signals will be logged. Specifies the logging duration. Specifies the time period to wait before start the logging. Specifies the update rate for data acquiring from controller. Table 4.7.3: File Logging Setting Control Items. Troubleshooting Can’t run LoggingTool Ensure that the .Net framework 4.5.2 or higher is installed. Run the LoggingTool as administrator. No Communication. Check if the controller is powered on and the monitor LED is blinking. Check if either a USB cable or a serial cable connects the controller with the PC. Check if the used com port is selected by the “Communication Server ” Use “ Terminate Comm Server and Connect ” button to establish the connection. LoggingTool hangs up during connecting to controller By a communication failure with the controller and disconnecting, the communication server could hang up. When one try to reconnect to the controller using the “ Connect ” button the LoggingTool hangs up. Solution: Terminate the LoggingTool using the task manager. Restart LoggingTool and connect to the controller using “ Terminate Comm Server and Connect ”. LoggingTool doesn’t start or it rises with and error message If the LoggingTool doesn’t start. Solution: Start LoggingTool with administrator privileges. Ensure the required .Net framework 4.5.2 is installed. If a failure occurs that cannot be solved, contact our technical support. Phone: +49 (0) 6142 94000 Known Bugs and Problems The following section lists the currently known bugs. These bugs will be resolved in future versions of the software. Description Date Version Status Solved When the application runs for a rather long time “days”, it might happen that the communication with the controller stops. … Bug, open No Traced Error status doesn’t work. Communication status in title bar doesn’t auto update by disconnecting. Excitation setting doesn’t auto update correctly by reconnecting. RC V1.0.0.1 Bug,open Solved in RC02 V1.0.0.1 Note For more Information about software bugs and software modification see the SAMBA19x “Software Revision History.pdf”."
  },
  "LoggingTool/gui/filestructure.html": {
    "href": "LoggingTool/gui/filestructure.html",
    "title": "MEASUREMENT MAT FILES STRUCTURE | SAMBA19x Website",
    "keywords": "MEASUREMENT MAT FILES STRUCTURE All sidimat measurement (*.sidimat19x, *.idefigure) are saved in matlab format. .idefigure matlab structure description IDEFigure consist of MxN Graph-Matrix (Plot-Matrix, Model-Matrix) where M is the RowNumber and N is the ColumnNumber of the iDEFigure. Graph-Matrix Structure by 3x3 Graph-Matrix: Model0 Model1 Model2 Model3 Model4 Model5 Model6 Model7 Model8 >> xx=load(\"xrot_raw_frf_ol_m.idefigure\") xx = //IDEFigure structure scalar structure containing the fields: MeasurementType = IdeFigure //this is the measurement type Version = 1 // IDEFigure Structure version FigureTitle = //this is title of the figure FigureTitleFontSize = 14 //font size of the figure title RowNumber = 3 //Row numbers in figure ColumnNumber = 1 //column number in figure, the graph number Model0 = // Graph-Structure, first graph in the 3x1 Graph-Matrix scalar structure containing the fields: Version = 1 // Graph structure Version Title = //Title of the Graph LogX = 1 //Logarithmic x-axis (1: logarithmic, 0:linear) LogY = 0 //Logarithmic x-axis (1: logarithmic, 0:linear) Grid = on //Grid status (on,off) Legend = 1 //Legend status (0,1) Xaxis = //x-axis structure scalar structure containing the fields: Version: 1x1 scalar //Version of the axis structure Title: 0x0 sq_string //Label of the x-axis TitleFontSize: 1x1 scalar //title font size Prop: 1x4 matrix //Axis Scale Properties containing Scale {min max minorstep majorstep} Yaxis = //Y-axis structure (see x-axis) scalar structure containing the fields: Version: 1x1 scalar Title: 1x14 sq_string TitleFontSize: 1x1 scalar Prop: 1x4 matrix Annotations = //Annotation structure scalar structure containing the fields: Version: 1x1 scalar // Annotations structure Version Annotation0: 1x1 scalar struct //Annotation structure Annotation1: 1x1 scalar struct //Annotation structure Annotation2: 1x1 scalar struct //Annotation structure Series = //Series “Curves” structure scalar structure containing the fields: Serie1: 1x1 scalar struct //Serie “Curve” structure Model1 = Table 5.1.1: IDEFigure matlab structure. >> xx.Model0.Series.Serie1 ans = scalar structure containing the fields: Title = Vel Xrot Raw/Excitation //Serie Title Serie = //2 dimensional array containing the (x,y) pairs. Columns 1 through 9: 0.00000 0.24000 0.48000 0.72000 0.96000 1.20000 1.44000 1.68000 1.92000 -47.01777 -19.74275 -27.61559 -13.96998 -4.44243 -1.02031 -1.81286 -3.54399 4.22259 Columns 10 through 18: 2.16000 2.40000 2.64000 2.88000 3.12000 3.36000 3.60000 3.84000 4.08000 8.07258 16.54702 19.15587 19.87028 20.90579 21.40222 22.44204 20.61854 17.68427 Columns 19 through 27: 4.32000 4.56000 4.80000 5.04000 5.28000 5.52000 5.76000 6.00000 6.24000 15.69454 14.56121 13.44503 12.86091 12.07755 11.50960 10.28915 9.97069 9.78908 Columns 28 through 36: 6.48000 6.72000 6.96000 7.20000 7.44000 7.68000 7.92000 8.16000 8.40000 8.78665 8.44608 8.06616 7.70098 7.56921 7.34422 6.54481 6.27385 5.96678 Table 5.1.2: Serie matlab structure. >> xx.Model0.Annotations ans = scalar structure containing the fields: Version = 1 //Structure Version Annotation0 = scalar structure containing the fields: Type = Point //Annotation type Position = //Annotation Position in graph 3.6000 22.4420 //Annotation Text to display Text = X:3.6 Y:22.442 Table 5.1.3: Annotation matlab Structure. .sidimat19x matlab structure Description IDEFigure consists of one or more of opticon trace data “RawDatx”. >> xx=load(\"xrot_stage7_ocl.sidimat19x\") xx = scalar structure containing the fields: MeasurementType = SiDiMat19x Version = 1 RawDat1 = scalar structure containing the fields: Version = 1 //Structure version SampleRate = 6000 //controller sample rate during tracing UnderSample = 5 //trace under sample number SampleNumber = 5000 // traced data number AverageNumber = 4 // trace averages SignalName = //Trace signals name scalar structure containing the fields: Sig0: 1x12 sq_string Sig1: 1x15 sq_string DataSet = //Trace data array 2x(sampleNumber*AverageNumber)-array. This array contains the traced data of the two trace signals. Columns 1 through 8: -2.7344e+003 -2.9265e+003 -2.6285e+003 -2.6919e+003 -2.8300e+003 -2.6299e+003 -2.6821e+003 -2.4236e+003 -2.7434e+003 -2.7056e+003 -2.6472e+003 -2.6658e+003 -2.6704e+003 -2.6295e+003 -2.6498e+003 -2.6562e+003 Columns 9 through 16: -2.0755e+003 -2.4358e+003 -2.8244e+003 -2.5403e+003 -2.3636e+003 -2.9963e+003 -2.9254e+003 -2.5269e+003 -2.6239e+003 -2.6445e+003 -2.6592e+003 -2.6326e+003 -2.5962e+003 -2.6090e+003 -2.5843e+003 -2.5773e+003 Columns 17 through 24: Table 5.2.1: .sidimat19x matlab structure."
  },
  "samba19xui/gui/samba19xui_um.html": {
    "href": "samba19xui/gui/samba19xui_um.html",
    "title": "Introduction | SAMBA19x Website",
    "keywords": "Integrated Dynamics Engineering SAMBA19xUI User Interface Manual AUTHOR(S): Moneer Shatat-Herres REVISION: 08 DATE OF PRINT: December 12, 2017 DOCUMENT CHANGE & HISTORY RECORD Name Last Update Status Version ECR/PR/IP Comment MSHAT 28.01.2016 Draft 00 First version MSHAT 14.09.2016 Draft 01 Modification related to SAMBA19xUI 1.9.0.5, which is a part of the SAMBA1.9.x installation package. MSHAT 02.11.2016 Released 02 Modification related to SAMBA19xUI 1.9.0.6. Note Although this document has been prepared with the utmost care, errors of any kind cannot be totally discounted. The contents of this document may be periodically revised, amended or changed otherwise by the originator without notice. You are invited to report any deficiencies / recommendations to IDE. | Windows 7 ®, Windows 8 ® are registered trademarks of the Microsoft Corporation, USA. © Copyright 2015, Integrated Dynamics Engineering GmbH Introduction Remark : SAMBA19xUI is compatible with firmware version 3.3.00 and higher. Language This manual is originally written in English language. document This document describes how to use the “User Interface” for the opticon controller. The “User Interface” allows querying and changing nearly all configurable controller settings. Intended Audience The software and this document is intended for users of an IDE vibration isolation system. Requirements In order to run this software, the following requirements must be met: -Windows 7®, Windows 8®, or later version. -Personal computer with x86- or x64-based microprocessor 2.8 GHz or higher, 4GB RAM are recommended. -SVGA-resolution with a minimum of 1600x900 pixel and 16-Bits high colors. -Mouse or compatible pointing device -Microsoft .Net Frame work 4.5.2 or higher. Contact Integrated Dynamics Engineering GmbH Hermannstrasse 9-13 65479 Raunheim, GERMANY Phone: +49 (0)6142 9400-0 INSTALLATION Copy the installation package from the CD to your PC. Read the SAMBA19x installation Guide document. Getting Started Your PC can communicate with the opticon controller with a USB connection or serial (RS232) connection. Use an A/B USB cable or a null modem cable. Make sure that the FTDI USB-To-Serial converter driver is installed. This is needed to connect to controller via USB connector. Start the SAMBA19xUI User Interface program with a right-click on the SAMBA19xUI shortcut and select Run as Admin. Note: The SAMBA19xUI has to run with administrative privileges. Otherwise the SAMBA19xUI doesn’t start. Start-Up The SAMBA19xUI uses the communication server like the other SAMBA applications. This means only selected COM Ports in the communication server could be used to talk to controller. [!Note] Ensure that the used com port number is configured “selected” by the “Communication Server Configuration Tool”. Otherwise the connection will not be established. Figure 3.1.1 Communication Server Configuration Tool Note If you connect via the USB port, the port will be shown as an additional com port (Virtual Com Port). Note The standard baud rate for the Opticon controller is 57600. After the start of the SAMBA19xUI choose the com port and confirm with the “Connect” button to establish the connection. Note The used com ports by the CommServer could be configured by SAMBA19xUI version 1.9.0.8 and higher assuming the SAMBA19xUI is running with administrator privileges. (By some PCs with 64Bits operation system this doesn’t work properly). Note SAMBA19xUI version 1.9.0.9 accept command line arguments to adjust the com port and baud rate. Call “SAMBA19xUI.exe 1 57600” to launch SAMBA19xUI and to connect automatically to a controller on com port 1 using 57600 baudrate. Note The command line arguments structure regarding the com port number and baud rate has been modified up SAMBA19xUI RC02 V1.9.0.13. Com port could be set by “#CP” prefix and baud rate could be set by “#BR” prefix (example: call “SAMBA19xUI #CP 1 #BR 57600”). Furthermore the command line argument accepts SAMBA19xUI configuration files and SAMBA19xUI label files file. Figure 3.1.2: Connection with a controller. Description Overview The SAMBA19xUI like the old SAMBA_UI has a tabs structure the so called menus. Some tabs “main tabs” contains sub-tabs “sub-menus”. In this document the tabs are called pages. The appearance of some pages is dynamic. This means the containing control elements on the page is dependent on the firmware of the connected opticon. Note: SAMBA19xUI configuration files (*.samba19x_config) could be opened by drag and drop. Connect Page The “Connect” page allows you to connect or disconnect to a controller. Figure 4.1.1: Connect Page. Use “ Baud Rate ” combo box to adjust the baud rate. The default baud rate for all opticon controller is 57600. Use “ Connect ” button to establish the connection with the controller. Use “ Disconnect ” button to disconnect the communication. Use “ Terminate Comm Server and Connect ” button to close the Comm Server session, if one is already started and to connect with a new session. This option is recommended after a communication trouble. Use “ Update Comm Ports list ” button to refresh lists of the available com ports. Figure 4.1.2: Connect Page after a successful connection with controller. Context Menu Click the right mouse button to display the SAMBA19xUI context menu. Figure 4.2.1: Context Menu. About Click “ About ” menu item to display the about dialog. It contains info about the SAMBA19xUI version information and build date. Figure 4.2.2: About Window Refresh Timer A couple of status parameters are continuously refreshed from the controller through a timer event. Click “ Refresh Timer ” menu item to Start/Stop the timer. UI Options SAMBA19xUI contains control elements for new firmware features. New firmware version higher than 3.3.102 provides information about the new features. The info about the new features is included in parameter “ System Configuration Info ”. The SAMBA19xUI reads those info. Then it adjusts its control components regarding to the system configuration info. Click “ UI Options ” menu item to show the “ UI Setting ” window. Figure 4.2.3: UI Setting. Figure 4.2.4: UI Setting. The system configuration info could be modified manually. The modification applies only for the SAMBA19xUI but not for the connected firmware. Disable “ Load System Configuration from Controller ” check box to change the user interface setting manually. Enable “ Auto Loop Switch ” option when the firmware supports the automatic loop switching. Enable “ Non Linear Position Control ” option when the firmware supports the nonlinear position control feature. Enable “ Cascaded Position Control ” option when the firmware supports the cascaded position control feature. Enable “ Event Logging ” option when the firmware supports the event logging feature. Enable “ System Safety Routine ” option when the firmware supports the system safety feature. Enable “ EtherCat Support ” option when the firmware supports the EtherCat communication. Enable “ Pneumatic Ramp Support ” option when the firmware supports the Pneumatic Ramp Support. Enable “ Temperature Sensor Support ” option when the firmware supports the temperature sensor AD-Mapping. Enable “ Safety and Earth Quake Monitor Support ” option when the firmware supports this feature. Enable “ Extended ADC-Channels Support ” option when the firmware supports all existing AD-Channels signals. Enable “ Position and Pneumatic Individual Loop Status Support ” option if the firmware supports the position and pneumatic individual loop status. Enable “ Reference Metrology System Support ” option if the firmware supports the reference metrology system. Enable “ Polynomial System Support ” option if the firmware supports the polynomial system. Enable “ Offset Support for all Linear Motors ” option if the firmware supports the offset for all 12 linear motors. Remark : It is strongly recommended to enable the “ Load System Configuration from Controller ” option to load the system “Firmware” configuration from controller. This option should deactivated only for firmware version older than 3.3.103 which doesn’t contains system configuration info and they supports special features. Controller Page The controller page consists of a couple sub-pages “system setting page, AD/DA setting page and motor protection Page”. System Settings Page The “System Setting” page contains a global parameters setting. Figure 4.3.1: System Setting with EtherCat Support. Figure 4.3.2: System Setting without EtherCat Support. Loops Configuration Use “ Loops Configuration ” to configure the various control loops. Only configured control loops are processed in the firmware. The velocity loop is in the firmware fixed configured. Note : Configuring additional loops loads the processor, therefore please take care about the system load “processor load” by changing the loop configuration. System loop shouldn’t exceeds 80%. Control Item Description Shows whether the velocity feedback loop is configured or not. Toggles the configuration status of the position loop on/off. It also shows the configuration status of the position loop. Toggles the configuration status of the pneumatic loop on/off. It also shows the configuration status of the pneumatic loop. Toggles the configuration status of the whole standard feed forward subsystem “FF-Subsystem” on/off. It also shows the configuration status of the complete FF-Subsystem. Toggles the configuration status of the stage part of FF-Subsystem “SFF” on/off. This contains the first 4 feed forward control channels. It also shows the configuration status of the SFF-Subsystem. Toggles the configuration status of the floor part of FF-Subsystem “FFF” on/off. This contains the last 3 feed forward control channels. It also shows the configuration status of the FFF-Subsystem. Toggles the configuration status of the pneumatic FF-Subsystem “PFF”. It also shows the configuration status of the PFF-Subsystem. Table 4.3.1: Loop Configuration Control Items. Performance Monitor Setting Use “ Performance Monitor Setting ” to specifies the performance monitor signal and the configuration parameters. The actual performance status is shown here. Control Item Description Specifies the I/O-Signal “monitor signal” which should be monitored as performance indicator. Specifies the threshold for a good performance. Specifies the minimal trigger time. The monitor signal has to exceed the threshold value at least for this time to toggles the performance status to not okay. Specifies the hold time duration for the performance status “Not Okay”. Shows the actual performance status. Shows the counter of the trigger time and the countdown of the hold time. Table 4.3.2: Performance Monitor Setting Control Item. Switch Criterion Setting Use “ Switch Criterion Setting ” group box to configure the parameters for the automatic loop switching. If the criterion is fulfilled and the “ Loop Switch Setting ” “Auto” is active the velocity loop will be deactivated and the position loop activated for a specific time “ Hold Time ”. The “ Switch criterion Setting ” group box is optional (not always present) and firmware dependent. It is present only for firmware which supports the “ Auto Loop Switch ” routine. Control Item Description Specifies the I/O-Signal “monitor signal” which should be monitored for the automatic loop switching. Specifies the threshold for the monitor signal. Specifies the minimal trigger time. The monitor signal has to exceed the trigger level at least for this time to trigger the auto loop switching. Specifies the hold time duration for the loop switching. Shows the counter of the trigger time and the countdown of the hold time. Table 4.3.3: Switch Criterion Setting Control Items. Loop Switch Setting Figure 4.3.3: System Setting Page with comments. Control Item Description The above button specifies whether the velocity loop status is always running (doesn’t mean it is active). The below LED shows whether the velocity loop is active. The above button specifies whether the position loop status is always running (doesn’t mean it is active). The below LED shows whether the position loop is active. Toggles the automatic loop parameter on/off and it shows its status. If it is on then the velocity and the position always running status are off. Automatic loop on. When velocity loop and position loop always running (see the left above picture), it is not possible to switch off the position loop by its button. Clicking the position button leads to switch the position always running status but it doesn’t switch the position loop off (see left middle picture). Click auto button to activate the auto loop switch and also to switch the position loop off (see the left below picture). Table 4.3.4: Loop Switch Setting Control Items. Stage FF-Signals The stage FF-Signal group box contains some settings which belong the stage FF-Signal. Control Item Description Specifies whether the type of the stage FF-Signal is analogue or digital. This option is valid only for firmware version older than 3.2.29. This is an option for a special customer solution. It is valid only for firmware older than 3.2.x. Table 4.3.5: Stage FF-Signals Control Items. EtherCat Setting The “ EtherCat Setting ” group box is firmware dependent. It is present just for firmware with EtherCat support. Control Item Description This option leads to overwrite the stage FF-Signals through the FF-Signals, which are provided by the EtherCat master. When this option is on, then the motors values which are provided by the EtherCat master are added to the motor outputs. Table 4.3.6: EtherCat Setting Control Items. Ramp Setting Use the “ Ramp Setting ” to configure the behaviour of the linear motor at startup phase. Control Item Description Specifies the type of outputs ramp. Specifies the ramp time for the linear motors respectively for the velocity axes outputs. Table 4.3.7: Ramp Setting Control Items. Sample Frequency/System Load Here the controller sample frequency could be adjusted. Furthermore the processor load is displayed. Control Item Description Specifies the controller sample frequency value. Click this button to accept the modified sample frequency value. Take care about the system “processor” load before increasing the sample frequency. For a certain operation system load shouldn’t exceeds 80%. Shows the system load. Table 4.3.8: Sample Frequency/System Load Control Items. AD/DA Mapping Page The appearance of the AD/DA-Mapping page is firmware dependent. Use the “ AD/DA Mapping ” page to change the AD- and DA-Mapping of the input signals and output signals. Change “ Used ADC Num ” to change the number of the AD-Inputs which will be read by the firmware. Note : The value of input signals with AD-Mapping-Number equals to 44 are set to zero. Note : Reading additional AD-Inputs loads the processor “DSP” performance and could leads to crash the firmware. Therefore take care about the system load by increasing the used ADC-Number. For a certain operation system load shouldn’t exceeds 80%. Note : See appendix for the right AD-Mapping for the temperature sensors. Figure 4.3.4: AD/DA-Mapping Page with supporting off all physical inputs (AD-Converter-Channels). Figure 4.3.5: AD/DA-Mapping Page. Motor Protection Page Motor Threshold Setting Group Box Figure 4.3.6: Motor Protection Page. Figure 4.3.7: Motor Protection Page with Offset Support for all Linear Motors. Click “ Set Threshold ” to send the changed threshold values to controller. Click “ Set Offset ” to send the changed threshold values to controller. Motor Overheating Setting Motor Overheating Setting Control Item Description Specifies the smooth factor of the running averaging which is used to calculate the temperature respectively motor overcurrent values. Time period before reactivate the motors after an overheating case. Activate this option to use the motor temperature sensors instead the motor overcurrent values “modelled temperature” Activate to disable all motors in case of overheating of one motors. Table 4.3.9: Motor Overheating Setting Control Items. Status Page The “Status” main menu contains two sub menus (“ Status ” Page and “ Signals Display ” page). Status Page Figure 4.4.1: Status page. Figure 4.4.2: Status Page with position and pneumatic individual loop status. Signals Display Page Up to 16 signals values could be continue displayed in big font. The signals are adjustable (Controller IO-Signal “Inputs, outputs, loops axes value …etc”). Note : The event logging monitor signals are used here as IO-Signals. Changing these IO-Signals here will change automatically the event logging monitor signals and vice versa. Figure 4.4.3: Signals Display Page. Excitation Setting Control Item Description Specifies the IO-Signal which its value will be continue displayed. Saves the event logging configuration parameters, which contains the IO-Signals. Loads the event logging configuration parameters, which contains the IO-Signals. Table 4.4.1: Signals Display Control Items Velocity Page The “ Velocity ” main menu contains two sub menus (“ Tuning ” Page and “ Sensor/Motor Matrix ” page). Velocity Tuning Page Figure 4.5.1: Velocity Tuning Page Velocity Loop Filters Click on any filter button” ” to open the “ Filter Setting Dialog ” and to change its setting. Click “ Update ” button to accept the change for the clicked filter. Click “ Update for all Axes” button to accept the change for the clicked filter number for all axes. Change the “ Axis Limiter ” value to specify the velocity axis output limit. Excitation Use “ Excitation ” group box to configure an excitation signal and its injection point “signal”. Excitation Setting Control Item Description Click “ Accept Change ” button to accept the modification of the excitation setting and to send it to the controller. Specifies the excitation signal type. Specifies the excitation filters. Specifies the injection node “signal” of the excitation signal. Table 4.5.1: Excitation Control Items. Excitation Type Parameters White Noise “Gain [-1,+1]” the gain range [-1,+1] corresponds to [-32000, +32000 digits]. Sine Wave “Gain [-1,+1]” the gain range [-1,+1] corresponds to [-32000, +32000 digits]. Sine wave frequency in Hz. Duty Cycle “Gain [-1,+1]” the gain range [-1,+1] corresponds to [-32000, +32000 digits]. High Period in millisecond. During this period the signal amplitude equals the adjusted “Gain” Low Period in millisecond. During this period the signal amplitude is set to zero Chirp Sine “recursive” “Gain [-1,+1]” the gain range [-1,+1] corresponds to [-32000, +32000 digits]. Start “lowest” frequency of the chirp sine. End “Highest” frequency of the chirp sine. Time Period of the chirp sine in second. Table 4.5.2: Excitation Types and their Parameters. Diagnostic Signals Diagnostic Signals Control Item Description Specifies the IO-Signal which applies to the Diag0 BNC-Box on the controller front panel. Specifies the IO-Signal which applies to the Diag1 BNC-Box on the controller front panel. Table 4.5.3: Diagnostic Signals Control Items. Tuning Helping Hand Use the “ Tuning Helping Hand ” to simplify the configuration of the excitation injection point and diagnostic signals by measuring the frequency response function of the velocity loop axes. Tuning Helping Hand Control Item Description Specifies after which stage the axis will be measured. Click a button to specify the axis which will be measured. Table 4.5.4: Tuning Helping Hand Control Items. Sensor/Motor Matrix Use the “ Sensor/Motor Matrix ” page to configure “build” the velocity logical axes by changing inputs “sensors” respectively outputs “actuators” multipliers (6 degree of freedom). Figure 4.5.2: Velocity Sensor/Motor Matrix Page with 7 sensors. Figure 4.5.3: Velocity Sensor/Motor Matrix Page with 8 sensors. Position page The “ Position ” main menu contains four sub menus. Its appearance is firmware dependent. The axes number, the filters number as well as the number of the proximity offsets are firmware dependent. Tuning page The position “ Tuning ” page has a dynamic appearance. Its appearance depends on the running firmware of the opticon controller. It contains the position filter setting, proximity sensor offsets, excitation group box, and tuning helping hand group box. There is a field, which displays the actual proximity sensor input values and the position error relative to the offsets values. Furthermore it contains the cascaded position and nonlinear position control configuration parameters. The cascaded and nonlinear position control features are firmware dependent. They are not in standard features. Figure 4.6.1: Position Tuning Page Figure 4.6.2: Position Tuning Page (Firmware supports 10 position axes and 6 position filters and position individual loop status). Figure 4.6.3: Position Tuning Page with Nonlinear Position Control Support. Figure 4.6.4: Position Tuning Page with Cascaded Position Control Support Proximity Offsets The proximity offsets values are subtracted from the proximity inputs values to build the proximity without offset inputs. Proximity Offsets Control Item Description Specifies the offset value for the vertical proximity of isolator 1. Specifies the offset value for the vertical proximity of isolator 2. Specifies the offset value for the vertical proximity of isolator 3. Specifies the offset value for the vertical proximity of isolator 4. Specifies the offset value for the horizontal proximity of isolator 1. Specifies the offset value for the horizontal proximity of isolator 2. Specifies the offset value for the horizontal proximity of isolator 3. Specifies the offset value for the horizontal proximity of isolator 4. Table 4.6.1: Proximity Offsets Control Items. Excitation/Diagnostic See sections 4.5.1.2 and 4.5.1.3. Cascaded Position Setting The cascaded position control is firmware dependent. It is supported only in special firmware versions. The cascaded position control is used to get more position stability and accuracy. The vertical position is controlled by a cascaded control loop. The cascaded control loop consists of two control loops one is the position loop and the other is the pneumatic loop. Only the first 3 position axes are used. The cascaded control Cascaded Position Setting Control Item Description Specifies the hysteresis value for switching between cascaded and normal position control. Specifies the pre-filter between the position loop and pneumatic loop. Table 4.6.2: Cascaded Position Setting Control Items. Nonlinear Position Setting The nonlinear position is firmware dependent. It is supported only in special firmware versions. It is applies for the first three position loop axes. The nonlinear position supports the pneumatic loop to stabilize the payload position by low frequency systems with nonlinear floatation behaviour. Nonlinear Position Setting Control Item Description Specifies the operation type of the nonlinear position control. AtOutput: the position axes output are used to switch nonlinear on/off. AtOutput: the position axes input are used to switch nonlinear on/off. None: nonlinear position control off. Activates resetting the position filters by toggling the nonlinear position control. Specifies the position window where the nonlinear position control is switched off. Specifies the position window where the nonlinear position control is switched on. Table 4.6.3: Nonlinear Position Control Items. Tuning Helping Hand Use the “ Tuning Helping Hand ” to simplify the configuration of the excitation injection point and diagnostic signals by measuring the frequency response function of the position loop axes. Tuning Helping Hand Control Item Description Specifies after which stage the axis will be measured. Click a button to specify the axis which will be measured. Table 4.6.4: Position Tuning Helping Hand Control Items. Sensor Matrix Page Figure 4.6.5: Sensor Matrix Page with 6 axes. Figure 4.6.6: Sensor Matrix Page with 8 axes. Use “ Sensor Matrix ” to specifies the inputs “devices” used by the position loop and their multipliers. Motor Matrix Page Figure 4.6.7: Motor Matrix Page with 6 axes. Figure 4.6.8: Motor Matrix Page with 8 axes. Use “ Motor Matrix ” to specifies the outputs “devices” used by the position loop and their multipliers. Proxy Adjustment Page The “Proxy Adjustment” page is displaying the proximity sensors values in a big font. It is intended to help adjusting the proximity sensors by manufacturing the systems. Figure 4.6.9: Proximity Adjustment Page. Pneumatic Page The “ Pneumatic ” page contains just one submenu “ Tuning Page ”. Its appearance depends on the running firmware. The number of valve outputs and the inputs number are firmware dependent. Furthermore the payload floatation setting depends on the firmware. Pneumatic Tuning page Figure 4.7.1: Pneumatic Tuning Page Figure 4.7.2: Pneumatic Tuning Page with 8 inputs, 8 outputs and pneumatic ramp. Figure 4.7.3: Pneumatic Tuning Page with 8 inputs, 8 outputs and pneumatic ramp. Use “ Sensor Matrix ” and “ Valve Matrix ” to configure the pneumatic logical axes (the vertical 3 degrees of freedom “Ztrans, Xrot and Yrot). Use “ Pneumatic Filter ” group box to change the axes filter settings by clicking on the filter button. Use “ Valve Offset ” group box to specify resp. modify the Up- and Down-Offset values. Change “ Isolator Offsets ” values to change the isolator floatation heights separately “isolator wise”. Control Item Description Click this button to drive the system up “floatation”. Click this button to drive the system down “deflating”. Click this button to accept the actual valve outputs as valve up-offsets. Click this button to accept the actual valve outputs as valve down-offsets. Toggles the pneumatic loop status On/Off. Toggles “ Use the setpoint for all axes ” option on/off. Toggles the valve dithering on/off. Toggles the move system up after startup “controller power cycle” On/Off. Table 4.7.1: Pneumatic Loop common Control Items. Floatation Config Use “ Floatation Config ” group box to configure the system floatation settings. Floatation Config Control Item Description Specifies the value which will be added to the initial proximity value to build the reference height “RefPoint” for down state. Specifies the set point “floatation height” for the payload. Specifies the position error tolerance value. Table 4.7.2: Floatation Config Control Items. Dithering Config Use “ Dithering Config ” group box to configure the dither signal, which is added to the valve output. The dither signal is a sine wave signal with adjustable amplitude “Amount” and frequency. Dithering Config Control Item Description Specifies the amplitude value of the dither sine wave signal. Specifies the frequency value of the dither sine wave signal. Specifies the learning constant for the dither compensation adaptive filter “Alpha” could be specified. Table 4.7.3: Dither Config Control Items. Pneumatic Ramp Setting Use “Pneumatic Ramp Setting” to specify the value of the pneumatic ramp parameter. Pneumatic Ramp Setting Control Item Description Specifies the running average smooth factor used to calculate the isolator’s height from of the proximity values. Specifies the gradient value for the reference point “RefPoint” by moving the system up. Specifies the gradient value for the reference point “RefPoint” by moving the system down. This is the time period to drive the valve output from Down-Offset to Up-Offset values. Table 4.7.4: Pneumatic Ramp Setting Control Items. Feed Forward Page The “ Feed Forward ” page contains two subpages “ FF Tuning, FF Gains ”. FF Tuning Page The “ FF Tuning ” page contains nearly all configuration “tuning” parameters for the standard feed forward control channels. Figure 4.8.1: FF Tuning Page. FF Global Setting Control Item Description Specifies the reference input signal of the FF-Channel. Specifies the adaptive “learning” constant of the “LMS-Algorithm” for the FF-Channel. Toggles the FF-Channel-Output for the corresponding axis On/Off. . Those are the reference filters. They are associated to the FF-Channel. They are used to pre-filter the input signals. Click on the filter button to change its setting. Those are the secondary filters. They are associated to the FF-Channel. They are used to pre-filter the input signal used by the LMS-Algorithm. Click on the filter button to change its setting. Those are the error filters. They are associated to the velocity axes. They are used to pre-filter the velocity axis. Table 4.8.1: FF Global Setting Control Items. Stage Signal Multipliers Use “ Stage Signal Multipliers ” group box to adjust the stage signals multipliers. The multipliers manipulate the stage signals levels and also the tuning of the stage FF-Subsystem. Stage Signal Multipliers Control Item Description Specifies the multiplier value of the stage signal XPos. Specifies the multiplier value of the stage signal XAcc. Specifies the multiplier value of the stage signal YPos. Specifies the multiplier value of the stage signal YAcc. Table 4.8.2: Stage Signal Multipliers Control Items. Stage Signal Offsets Use “ Stage Signal Offsets ” group box to configure the offset values for stage position signals. The offsets values influence the stage signal level of the stage position signals and also the calculated stage FF-Signals “ZrXacc and ZrYacc”. Stage Signal Offsets Control Item Description Specifies the offset value of the stage signal XPos. Specifies the offset value of the stage signal YPos. Table 4.8.3: Stage Signal Offset Control Items. Stage Signal Maximums Use “ Stage Signal Maximums ” group box to configure the max values for the stage position signals. The maxima values the calculated stage FF-Signals “ZrXacc and ZrYacc”. Stage Signal Maximums Control Item Description Specifies the maximum value of the stage signal XPos. Specifies the maximum value of the stage signal YPos. Table 4.8.4: Stage Signal Maxima Control Items. Threshold/Gains Number Use “ Threshold/Gains Number” group box to adjust the FF-Output threshold value and the used gains number and to toggles the FF-Subsystem, the adaptive status and using the raw axis input on/off. Threshold/Gains Number Control Item Description Specifies the maximum value for axis output part coming from the FF-Subsystem. Specifies the gains “coefficients” number of all FIR-Filters. Toggles the FF-Subsystem On/Off. Toggles the FIR-Coefficients adaption On/Off. This options specifies whether the velocity axis raw input or the filtered velocity axis signal after is used as error signal. Table 4.8.5: Threshold/Gains Num Control Items. FF Gains Page On the FF Gains the user is able to edit respectively modify the FIR-Filter gains “coefficients” manually. Click the respective “ Source ” button to access the gains of its FF-Channel. Table 4.8.6: FF Gains Page. Pneumatic FF Page The “ Pneumatic FF ” page contains two subpages “ PFF Tuning, PFF Gains ”. PFF Tuning Page The “ PFF Tuning ” page contains nearly all configuration “tuning” parameters for the pneumatic feed forward control channels. Figure 4.9.1: PFF Tuning Page. PFF Global Setting Control Item Description Specifies the reference input signal of the pneumatic feed forward channel “PFF-Channel”. Specifies the adaptive “learning” constant of the “LMS-Algorithm” for the PFF-Channel. Toggles the PFF-Channel-Output for the corresponding pneumatic axis On/Off. Those are the reference filters. They are associated to the PFF-Channel. They are used to pre-filter the input signals. Click on the filter button to change its setting. Those are the secondary filters. They are associated to the PFF-Channel. They are used to pre-filter the input signal used by the LMS-Algorithm. Click on the filter button to change its setting. Those are the error filters. They are associated to pneumatic axes. They are used to pre-filter the pneumatic axis. Table 4.9.1: PFF Global Setting Control Items. Threshold/Gains Number Threshold/Gains Number Control Item Description Specifies the maximum value for pneumatic axis output part coming from the PFF-Subsystem. Specifies the gains “coefficients” number of all FIR-Filters. Toggles the PFF-Subsystem On/Off. Toggles the FIR-Coefficients adaption On/Off. Table 4.9.2: Threshold/Gains number Control Items. PFF Gains Page On the “PFF Gains” page the user is able to show respectively modify the FIR-Filter gains “coefficients” manually. Click the respective “ Source ” button to access gains of its PFF-Channels. Figure 4.9.2: PFF Gains Page. Save/Load Setup The “ Save/Load Setup ” page contains only one subpage “ Save/Load ”. Figure 4.10.1: Save/Load Page Save/Load/Clear NVRAM Control Item Description Click this button to save the actual parameters setting into the NVRAM. Click this button to load the parameters setting from the NVRAM. Click this button to clear the already saved parameters setting from NVRAM. Click this button to save the actual parameters setting to a setup “xml” file. Click this button to load the actual parameters setting from a setup “xml” file. This action doesn’t mean the loaded parameters are saved automatically into NVRAM. If this is desired then click the corresponding button . Toggles the NVRAM-Protection On/Off. By active NVRAM-Protection both button clear NVRAM and save into NVRAM are disabled. Table 4.10.1: Save/Load/Clear NVRAM Control Items. Save/Load File Control Item Description Click this button to save the actual parameters setting to a setup “xml” file. Click this button to load the actual parameters setting from a setup “xml” file. This action doesn’t mean the loaded parameters are saved automatically into NVRAM. If this is desired then click the corresponding button . Table 4.10.2: Save/Load File. NVRAM Areas Check Sum Information. Note : The NVRAM check sum information are not automatically loaded from the controller by activating the save/Load-Page like by the old SAMBA_UI. Furthermore the check sum numbers are not build automatically by saving into NVRAM like the old SAMBA_UI. Control Item Description Shows the saved and the actual check sum numbers of the various NVRAM areas (monitor, firmware and configuration). Calculate the NVRAM areas check sum numbers and save them into NVRAM. Read the saved check sum numbers. Table 4.10.2: Save/Load File. Set/Generate Label File The label file contains labels for the user interface control items like the labels for the velocity loop inputs and outputs, input signals names, physical signals names (ADC-Signals) … etc. It influences the appearance of the user interface. If there is no label file specified the SAMBA19x_UI uses the hard coded default labels. Control Item Description Shows the actual adjusted label file. Click this button to generate a default label file. Click this button to reset the labels to the default labels. (Modification requires restart ofSAMBA19x_UI). Click this button to set the labels to specific label file. (Modification requires restart ofSAMBA19x_UI). Table 4.10.3: Set/Generate Label File Note : By changing the label file a SAMBA19xUI restart is required to enable the new labels. Special Page The special page is firmware dependent. It could be empty or it could has many pages which are containing a customized features. Safety Page The safety page contains the setting for the safety routine “performance routine” and earth quake detection routine. The safety routine could be called a performance monitoring routine, because it monitor the performance of the system regarding to its vibration and position. Figure 4.11.1: Safety Page. The safety routine uses the “root mean square” RMS-Values of the geophone and proximity sensors to detect a safety respectively performance mal function. The earth quake routine uses the RMS-Values of the floor geophone sensors, which are placed on the ground, to detect an earth quake. Safety and Earth Quake Status Control Item Description Shows the vibration status ok or not ok. Shows the vibration status ok or not ok. Shows if an earth quake has been detected or not. Table 4.11.1: Safety and Earth Quake Status. Safety Setting Safety Setting Control Item Description Geophone Limit Specifies the limit value for the geophone sensor RMS-Values, which shouldn’t be exceeded. Otherwise the vibration status becomes not okay. Proximity Limit Specifies the limit value for the proximity sensor RMS-Values, which shouldn’t be exceeded. Otherwise the position status becomes not okay. RMS Time Window Specifies the time period for the safety RMS-Values. Table 4.11.2: Safety Setting Control Items. Earth Quake Setting Earth Quake Setting Control Item Description Geophone Limit Specifies the limit value for the floor geophone sensor RMS-Values, which shouldn’t be exceeded. Otherwise the earth quake status becomes on. RMS Time Window Specifies the time period for the earth quake RMS-Values. Table 4.11.3: Earth Quake Setting Control Items. System Safety Page The system safety page contains the configuration data of the performance monitoring system. The vibration of velocity loop axes and the position of the position loop axes are monitored. For each velocity and position loop axis there is an adjustable threshold value. By the vibration monitoring the root mean square values of the velocity axes raw inputs about 1 seconds are built. By the position monitoring the position axes values after last filter are used. The vibration status is Ok when all RMS-Values of the velocity axes are below their threshold values. Otherwise it is not ok. The position status is Ok when all values of the position axes are below their threshold values. Otherwise it is not ok. Figure 4.11.2: System safety Page. Not all Firmware supports getting the position loop axes actual values. By such a firmware the safety system looks like the below figure. Figure 4.11.3: System safety without position axes values. Polynomial Page The polynomial page contains the configuration data of the polynomial system. Figure 4.11.4: Polynomial Page Polynomial Configuration Earth Quake Setting Control Item Description Toggles the polynomial processing status and overall active status on off. Saves the current polynomial configurations to a file. Loads an already saved polynomial configuration from file. Specifies the input signal of a specific polynomial. Specifies the output signal of a specific polynomial. Displays the current value of the input signal of a specific polynomial. Displays the current value of the output signal of a specific polynomial. Specifies the first coefficient value of a specific polynomial. Specifies the second coefficient value of a specific polynomial. Specifies the third coefficient value of a specific polynomial. Specifies the limiter value for a specific polynomial. Toggles a specific polynomial on/off. Table 4.11.4: Polynomial Setting Control Items. Troubleshooting Can’t run SAMBA19xUI Ensure that the .Net framework 4.5.2 or higher is installed. Run the SAMBA19xUI as administrator. No Communication. Check if the controller is powered on and the monitor LED is blinking. Check if either a USB cable or a serial cable connects the controller with the PC. Check if the used com port is selected by the “Communication Server ” Use “ Terminate Comm Server and Connect ” button to establish the connection. SAMBA19xUI hangs up during connecting to controller By a communication failure with the controller and disconnecting, the communication server could hang up. When one try to reconnect to the controller using the “ Connect ” button the SAMBA19xUI hangs up. Solution: Terminate the SAMB19xUI using the task manager. Restart SAMBA19xUI and connect to the controller using “ Terminate Comm Server and Connect ”. SAMBA19xUI doesn’t refresh the status parameters from controller The SAMBA19xUI is connected to controller but it doesn’t refresh the status parameters like the loop status, individual loop status, pneumatic floating status parameters and position values. Solution: Enable the refresh timer from the context menu. Sometimes you have to do it twice to enable. SAMBA19xUI doesn’t start or it rises with and error message If the SAMBA19xUI doesn’t start. Solution: Start SAMBA19xUI with administrator privileges. Ensure the required .Net framework is installed. If a failure occurs that cannot be solved, contact our technical support. Phone: +49 (0) 6142 94000 Known Bugs and Problems The following section lists the currently known bugs. These bugs will be resolved in future versions of the software. Description Date Version Status Solved When the application runs for a rather long time “days”, it might happen that the communication with the controller stops. 1.9.0.4 Bug, open No SAMBA19xUI version 1.9.0.4 is not able to communicate with firmware version older 3.3.0. (It is still not recommended to use the SAMBA19xUI for firmware older 3.3.0). 1.9.0.4 Known issue Solved in 1.9.0.5 During loading all parameters from the controller by saving the actual parameters to xml file. The loading status window freezes after loading a couple of parameters. Work around: Wait until loading all parameters from controller is finished and go on with saving to the xml file. 1.9.0.4 Known Issue No Note: For more Information about software bugs and issues see the SAMBA19x “Software Revision History.pdf”. Appendix Temperature Sensors AD-Mapping Sensor ADC Channel Number Standard Opticon 19 Zoll front panel Opticon OutX1Temp 44 44 OutY1Temp 26 28 OutZ1Temp 27 29 OutX2Temp 28 30 OutY2Temp 44 44 OutZ2Temp 29 31 OutX3Temp 44 44 OutY3Temp 30 32 OutZ3Temp 31 33 OutX4Temp 32 34 OutY4Temp 44 44 OutZ4Temp 33 35 Table 7.1.1: AD-Mapping for the temperature sensors."
  },
  "LoggingTool/gui/images/addd.html": {
    "href": "LoggingTool/gui/images/addd.html",
    "title": "| SAMBA19x Website",
    "keywords": ""
  },
  "sidimat19xa/CheckSpecValue.html": {
    "href": "sidimat19xa/CheckSpecValue.html",
    "title": "SiDiMaT19xA auto measurement CheckSpec operation value | SAMBA19x Website",
    "keywords": "SiDiMaT19xA auto measurement CheckSpec operation value The CheckSpec operation basically services to checks a specification of a SiDiMaT19xA measurement or a logging measurement which is saved in .IDEFigure file. The value of this operation is a collection of the values in the following table (values have to be used without brackets). The value first word \" italic \" is keyword and has to be written correct. Value Description { cache ;path1;path2; ... } load a plot curves (series) from a .IDEFigure files {path1:first file, path2: second file, ...}. The curves are added \"saved\" into a dictionary. The curves in the dictionary are identified by their label which is consisting of three letters and three number sample (F1P2S2: this signal#2 of plot#2 of file#1). path1, path2 ... are optional. { check-point ;sig;ss;se;x} checks the sig y-value of the point at the x-axis x. { check-upper-spec-curve ;sig1;sig2;specmin;specmax;xpos} checks the sig y-value amplitude of the point at xpos. { max ;sig;ss;se;rs,re} checks if the sig maximum y-value lies in the range [ss - se]. Values in x-axis range [rs - re] are used. rs and re are optional. { min ;sig;ss;se;rs,re} checks if sig minimum y-value lies in the range [ss - se]. Values in x-axis range [rs - re] are used. rs and re are optional. { max-pos ;sig;ss;se;rs,re} checks the x-axis position of the y-maximum value. Values in x-axis range [rs - re] are used. rs and re are optional. { ocl-lbw ;sig1;sig2;ss;se;rs,re} finds the open closed loop active bandwidth lower point. sig1:open loop; sig2: closed loop; Values in x-axis range [rs - re] are used. rs and re are optional. { ocl-hbw ;sig1;sig2;ss;se;rs,re} checks the open closed loop active bandwidth lower point position lies in [ss - se]. sig1:open loop; sig2: closed loop; Values in x-axis range [rs - re] are used. rs and re are optional. { ocl-damp ;sig1;sig2;ss;se;rs,re} checks the open closed loop damping value, if it lies in the range [ss - se]. sig1:open loop; sig2: closed loop; Values in x-axis range [rs - re] are used. rs and re are optional."
  },
  "sidimat19xa/OperationValue.html": {
    "href": "sidimat19xa/OperationValue.html",
    "title": "SiDiMaT19xA auto measurement Report operation value | SAMBA19x Website",
    "keywords": "SiDiMaT19xA auto measurement Report operation value The Report operation basically services to generate a report containing SiDiMaT19xA measurement or a logging measurement graphs and result table of the auto specification conditions. The value of this operation is a collection of the values in the following table (values have to be used without brackets). The value first word \" italic \" is a keyword and has to be written correct. Value Description { measure } start sidimat measurement. { rci-command ; command:text } send text to controller as rci-command, text has to be a valid rci-command. { pneum-system } excute a pneumatic system action. { trace-setting ; samples:x; undersample:x; average:x; anti-aliasing:(on/off) } start sidimat measurement. { trace-sig ; signum:x; type:x; mainindex:x; subindex:x } config a trace signal. { excit-sig ; type:x; mainindex:x; subindex:x } config injection point signal. { excit-filter ; filnum:x; type:x; par1:x; par2:x; par3:x; par4:x; par5:x } config an excitation filter. { excit-setting ; type:x; par1:x; par2:x; par3:x; par4:x; filterusage:(on/off) } config the excitation signal setting. { system-loopstatus ; status: S1 S2 ... Sn } toggles a control loop on/off. the status parameters should be one or many of:(READ, CACHE, RESTORE, OVERALLON, OVFFON, PFFON, PNEUMON, OVERALLOFF, OVFFOFF, PFFOFF, PNEUMOFF, TEMPSENSORON, TEMPSENSOROFF, ETHERCATSFFON, ETHERCATSFFOFF, ETHERCATMOTON, ETHERCATMOTOFF) { individual-loopstatus ; velocity:x; position:x; pneumatic:x } set the individual loop status of a control loop. { clear-cached-measurements ; measurement1; measurement2, ... } add the text to the markdown string as paragraph2. { waitms ; ms} wait the time period ms. { cache-measurement ;} cache the actual sidimat measurement. { __;path} add a picture to the markdown string. when Path is not absolute then it is relative to the first evaluated auto measurement file path (original-path). { tabelheader ;colh1;colh2; ...} add a table header with the headers {colh1, colh2, ...}. { tabelrow ;result1;result2; ...} add a new row to the table with the cells content {result1, result2, ....}. Cells content is a text or a specification result (see description below). The table rows have to directly follow the table header. { save ;path} save the mardown string to .md file (filename) and convert the markdown string to a html. furthermore it convert the html file to a pdf file. { doc-prop ; property1 : value; property1 : value; ...} sets document properties like author, serial number ... etc. each property consist of two by a double point seperated terms. the first one is the property name { serialnr , author , tester , title , systemname } and the second term is the property value. { excute ;cmd} excutes the command line cmd. The excuting path is the original-path. If cmd is a .bat file then the file will be executed. Specification results Here is a list with possible specification result could be used as table cell content. Specification result starts with a specification opeartion name (spec-op-name) followed by dot (.) followed by specicfication operation value keyword (spec-op-key) followed by dot (.) followed by specification parameter (spec-par) which will be the cell content. Syntax: {spec-op-name.spec-op-key.spec-par} spec_name : the name of the SpeckCheck operation example (CheckSpec_#VelXtrasOl). spec-op-key : one of the following specification check operations: max : the maximum y-value. max-pos : the x-position of the maximum y-value. ocl-lbw : the isolation lower active band width value. ocl-hbw : the isolation lower active band width value. ocl-damp : the isolation active damping. check-point : the y-value at a specific point at the x-axis. min : the minimum y-value. pk-pk : the peak to peak y-value. check-upper-spec-curve : check if a curve \"signal\" lies under a spec-curve. spec-par : one of the following parameter: minmax : the specification range [min max]. measured : measured value. result : specification check status of the spec-op-key the result is one from {Passed, Failed}. Example 1 Example The following operation actions listed below measures the open/closed force mobilty transfer function of the Yrot axis. <Operation Name=\"Operation\"> <Value> <anyType xsi:type=\"xsd:string\">individual-loopstatus; velocity:011111</anyType> <anyType xsi:type=\"xsd:string\">clear-cached-measurements;</anyType> <anyType xsi:type=\"xsd:string\">trace-sig;signum:2; type:2; mainindex:5; subindex:-1</anyType> <anyType xsi:type=\"xsd:string\">excit-sig;type:4; mainindex:5; </anyType> <anyType xsi:type=\"xsd:string\">waitms; time:2000;</anyType> <anyType xsi:type=\"xsd:string\">measure;</anyType> <anyType xsi:type=\"xsd:string\">cache-measurement;</anyType> <anyType xsi:type=\"xsd:string\">individual-loopstatus; velocity:111111</anyType> <anyType xsi:type=\"xsd:string\">waitms; time:2000;</anyType> <anyType xsi:type=\"xsd:string\">measure;</anyType> </Value> </Operation> 2 Example <!-- Yrot Axis--> <AutoMeasurent Name=\"FMYrotRawOCL\" IsEnabled=\"true\"> <OperationList> <Operation Name=\"Operation\"> <Value> <anyType xsi:type=\"xsd:string\">individual-loopstatus; velocity:101111</anyType> <anyType xsi:type=\"xsd:string\">clear-cached-measurements;</anyType> <anyType xsi:type=\"xsd:string\">trace-sig;signum:2; type:2; mainindex:4; subindex:-1</anyType> <anyType xsi:type=\"xsd:string\">excit-sig;type:4; mainindex:4; </anyType> <anyType xsi:type=\"xsd:string\">waitms; time:2000;</anyType> <anyType xsi:type=\"xsd:string\">measure;</anyType> <anyType xsi:type=\"xsd:string\">cache-measurement;</anyType> <anyType xsi:type=\"xsd:string\">individual-loopstatus; velocity:111111</anyType> <anyType xsi:type=\"xsd:string\">waitms; time:2000;</anyType> <anyType xsi:type=\"xsd:string\">measure;</anyType> </Value> </Operation> <Operation Name=\"Save\"> <Value> <anyType xsi:type=\"xsd:string\">frf2fig;file:Yrot_Raw_OCL_AW_FRF.idefigure</anyType> <anyType xsi:type=\"xsd:string\">time2fig;file:Yrot_Raw_OCL_AW_TimeSpec.idefigure</anyType> <anyType xsi:type=\"xsd:string\">frf2pic;file:Yrot_Raw_OCL_AW_FRF.png</anyType> <anyType xsi:type=\"xsd:string\">time2pic;file:Yrot_Raw_OCL_AW_TimeSpec.png</anyType> <anyType xsi:type=\"xsd:string\">raw;file:Yrot_Raw_OCL_AW.sidimat19x</anyType> </Value> </Operation> <Operation Name=\"CheckSpec_#FMYr0OCLAW\"> <Value> <anyType xsi:type=\"xsd:string\">cache;file:Yrot_Raw_OCL_AW_FRF.idefigure</anyType> <anyType xsi:type=\"xsd:string\">max; sig:F1P1S2; specmin:18.5; specmax:23.7;rmin:1;rmax:15</anyType> <anyType xsi:type=\"xsd:string\">max-pos; sig:F1P1S2; specmin:2.0; specmax:3.0; rmin:1; rmax:15</anyType> <anyType xsi:type=\"xsd:string\">ocl-lbw; olsig:F1P1S2; clsig:F1P1S1; rmin:1; rmax:14; specmax:1.5</anyType> <anyType xsi:type=\"xsd:string\">ocl-hbw;olsig:F1P1S2; clsig:F1P1S1; specmin:11; rmin:1; rmax:14;</anyType> <anyType xsi:type=\"xsd:string\">ocl-damp;olsig:F1P1S2; clsig:F1P1S1; specmin:17; rmin:1; rmax:14;</anyType> </Value> </Operation> <Operation Name=\"Report\"> <Value> <anyType xsi:type=\"xsd:string\">para3;Yrot Force Mobility at raw input Open/Close Loop</anyType> <anyType xsi:type=\"xsd:string\">text;Here are the force mobility measurements. Measured at the velocity axes raw input</anyType> <anyType xsi:type=\"xsd:string\">pic;Measurements\\ForceMobility\\Raw_OCL_AW\\Yrot_Raw_OCL_AW_FRF.png</anyType> </Value> </Operation> </OperationList> </AutoMeasurent> 3 Example"
  },
  "sidimat19xa/SaveValue.html": {
    "href": "sidimat19xa/SaveValue.html",
    "title": "SiDiMaT19xA auto measurement Save operation value | SAMBA19x Website",
    "keywords": "SiDiMaT19xA auto measurement Save operation value The Save operation basically services to save a SiDiMaT19xA measurement or a logging measurement to a file or a picture. The value of this operation is a collection of the values in the following table (values have to be used without brackets). The value first word \" italic \" is keyword and has to be written correct. Value Description { frf2pic ;path} saves the SiDiMaT19xA frequency response measurement to .png file (path). Path has the extension .png. { frf2fig ;path} saves the SiDiMaT19xA frequency response measurement to .IDEFigure file(path). The .IDEFigure format is a kind of matlab format. Path has the extension .IDEFigure. { time2pic ;path} saves the SiDiMaT19xA time/spectrum measurement to .png file(path). Path has the extension .png. { time2fig ;path} saves the frequency response measurement to .png file(path). Path should have the extension .png. { raw ;path} saves the SiDiMaT19xA complete measurement to .sidimat19x file (path). The .IDEFigure format is a kind of matlab format. Path has the extension .sidimat19x. { logg2fig ;path,fignum} saves the logging measurement figure with the number (fignum) to .IDEFigure file (path). If fignum is omitted the first figure is saved. Path has the extension .IDEFigure. { logg2pic ;path,fignum} saves the logging measurement figure with the number (fignum) to .png file. If fignum is omitted, the first figure is saved. Path has the extension .IDEFigure. Examples 1 Example The following operation actions listed below measures the open/closed force mobilty transfer function of the Yrot axis. <Operation Name=\"Operation\"> <Value> <anyType xsi:type=\"xsd:string\">individual-loopstatus; velocity:011111</anyType> <anyType xsi:type=\"xsd:string\">clear-cached-measurements;</anyType> <anyType xsi:type=\"xsd:string\">trace-sig;signum:2; type:2; mainindex:5; subindex:-1</anyType> <anyType xsi:type=\"xsd:string\">excit-sig;type:4; mainindex:5; </anyType> <anyType xsi:type=\"xsd:string\">waitms; time:2000;</anyType> <anyType xsi:type=\"xsd:string\">measure;</anyType> <anyType xsi:type=\"xsd:string\">cache-measurement;</anyType> <anyType xsi:type=\"xsd:string\">individual-loopstatus; velocity:111111</anyType> <anyType xsi:type=\"xsd:string\">waitms; time:2000;</anyType> <anyType xsi:type=\"xsd:string\">measure;</anyType> </Value> </Operation>"
  },
  "sidimat19xa/Sidimat19xA_Operation.html": {
    "href": "sidimat19xa/Sidimat19xA_Operation.html",
    "title": "| SAMBA19x Website",
    "keywords": ""
  },
  "firmware/RCI2/commands/filter-set.html": {
    "href": "firmware/RCI2/commands/filter-set.html",
    "title": "Set stage filter command | SAMBA19x Website",
    "keywords": "Set stage filter command This command specifies the filter's parameters of a determined system component. The componentType, Index1 and Index2 define which status value will be set. CommandID 2 Command length: 10 Description : Specifies a status value of a determined system component. Parameter Type Range Default Remark Input : ComponentType uint16 0x0-max_component_type - ComponentNum uint16 0x0-0xF - ComponentAxis uint16 0x0-0xFF - ComponentElement uint32 0x0-0xFF - FiltType uint32 MaxFiltType - FiltParam1 float - - FiltParam2 float - - FiltParam3 float - - FiltParam4 float - - FiltParam5 float - - Output : - - - - how to set status parameters: the following table gives overview how to set the command parameters componentType , ComponentNum , ComponentAxis and ComponentElement to set a specific filter configuration. Status parameter | ComponentType | ComponentNum | ComponentAxis | ComponentElem | Remark -- | -- | -- | -- | -- | -- Velocity Filter | comp_velloop | - | - | - Position Filter | comp_posloop | - | - | - Pneumatic Filter | comp_pneuloop | - | - | - FF Filter | comp_system_setting | - | - | - Pneum FF Filter | comp_ffsystem | NumFFSource | - | specifies the status value of the output matrix of a specific feed forward source. Noise Filter | comp_pffsystem | NumPFFSource | - | specifies the status value of the output matrix of a specific pneumatic feed forward source."
  },
  "firmware/RCI2/commands/iosignal-get.html": {
    "href": "firmware/RCI2/commands/iosignal-get.html",
    "title": "SiDiMaT19xA auto measurement Save operation value | SAMBA19x Website",
    "keywords": "SiDiMaT19xA auto measurement Save operation value The Save operation basically services to save a SiDiMaT19xA measurement or a logging measurement to a file or a picture. The value of this operation is a collection of the values in the following table (values have to be used without brackets). The value first word \" italic \" is keyword and has to be written correct. Value Description { frf2pic ;path} saves the SiDiMaT19xA frequency response measurement to .png file (path). Path has the extension .png. { frf2fig ;path} saves the SiDiMaT19xA frequency response measurement to .IDEFigure file(path). The .IDEFigure format is a kind of matlab format. Path has the extension .IDEFigure. { time2pic ;path} saves the SiDiMaT19xA time/spectrum measurement to .png file(path). Path has the extension .png. { time2fig ;path} saves the frequency response measurement to .png file(path). Path should have the extension .png. { raw ;path} saves the SiDiMaT19xA complete measurement to .sidimat19x file (path). The .IDEFigure format is a kind of matlab format. Path has the extension .sidimat19x. { logg2fig ;path,fignum} saves the logging measurement figure with the number (fignum) to .IDEFigure file (path). If fignum is omitted the first figure is saved. Path has the extension .IDEFigure. { logg2pic ;path,fignum} saves the logging measurement figure with the number (fignum) to .png file. If fignum is omitted, the first figure is saved. Path has the extension .IDEFigure. Examples 1 Example The following operation actions listed below measures the open/closed force mobilty transfer function of the Yrot axis. <Operation Name=\"Operation\"> <Value> <anyType xsi:type=\"xsd:string\">individual-loopstatus; velocity:011111</anyType> <anyType xsi:type=\"xsd:string\">clear-cached-measurements;</anyType> <anyType xsi:type=\"xsd:string\">trace-sig;signum:2; type:2; mainindex:5; subindex:-1</anyType> <anyType xsi:type=\"xsd:string\">excit-sig;type:4; mainindex:5; </anyType> <anyType xsi:type=\"xsd:string\">waitms; time:2000;</anyType> <anyType xsi:type=\"xsd:string\">measure;</anyType> <anyType xsi:type=\"xsd:string\">cache-measurement;</anyType> <anyType xsi:type=\"xsd:string\">individual-loopstatus; velocity:111111</anyType> <anyType xsi:type=\"xsd:string\">waitms; time:2000;</anyType> <anyType xsi:type=\"xsd:string\">measure;</anyType> </Value> </Operation>"
  },
  "firmware/RCI2/commands/iosignal-set.html": {
    "href": "firmware/RCI2/commands/iosignal-set.html",
    "title": "SiDiMaT19xA auto measurement Logg operation value | SAMBA19x Website",
    "keywords": "SiDiMaT19xA auto measurement Logg operation value The Logg operation basically services to log data from the controller using the logging functionality. Furthermore it prepares the logged data and plots it in a plot-figure. The value of this operation is a collection of the values in the following table (values have to be used without brackets). The value first word \" italic \" is keyword and has to be written correct. Value Description { load-logg-setting-file ;path} Opens logging setting file and send it to controller. Path has the extension .Logg19xConfig . { load-logg-setting-file ;path} Opens logging setting file and send it to controller. Path has the extension .Logg19xConfig . { load-logg-setting-file ;path} Opens logging setting file and send it to controller. Path has the extension .Logg19xConfig ."
  },
  "firmware/RCI2/commands/luint16param-get.html": {
    "href": "firmware/RCI2/commands/luint16param-get.html",
    "title": "| SAMBA19x Website",
    "keywords": ""
  },
  "firmware/RCI2/commands/luint16param-set.html": {
    "href": "firmware/RCI2/commands/luint16param-set.html",
    "title": "| SAMBA19x Website",
    "keywords": ""
  },
  "firmware/RCI2/commands/mixparam-get.html": {
    "href": "firmware/RCI2/commands/mixparam-get.html",
    "title": "| SAMBA19x Website",
    "keywords": ""
  },
  "firmware/RCI2/commands/mixparam-set.html": {
    "href": "firmware/RCI2/commands/mixparam-set.html",
    "title": "| SAMBA19x Website",
    "keywords": ""
  },
  "firmware/RCI2/commands/multipliers-get.html": {
    "href": "firmware/RCI2/commands/multipliers-get.html",
    "title": "| SAMBA19x Website",
    "keywords": ""
  },
  "firmware/RCI2/commands/multipliers-set.html": {
    "href": "firmware/RCI2/commands/multipliers-set.html",
    "title": "| SAMBA19x Website",
    "keywords": ""
  },
  "firmware/RCI2/commands/sfloatparam-get.html": {
    "href": "firmware/RCI2/commands/sfloatparam-get.html",
    "title": "| SAMBA19x Website",
    "keywords": ""
  },
  "firmware/RCI2/commands/sfloatparam-set.html": {
    "href": "firmware/RCI2/commands/sfloatparam-set.html",
    "title": "| SAMBA19x Website",
    "keywords": ""
  },
  "firmware/RCI2/commands/sintparam-get.html": {
    "href": "firmware/RCI2/commands/sintparam-get.html",
    "title": "| SAMBA19x Website",
    "keywords": ""
  },
  "firmware/RCI2/commands/sintparam-set.html": {
    "href": "firmware/RCI2/commands/sintparam-set.html",
    "title": "| SAMBA19x Website",
    "keywords": ""
  },
  "firmware/RCI2/commands/status-get.html": {
    "href": "firmware/RCI2/commands/status-get.html",
    "title": "Get status command | SAMBA19x Website",
    "keywords": "Get status command This command retreives a status value of a determined system component. The componentType, Index1 and Index2 define which status value will be set. CommandID 1 Command length: 6 Description : retreives a status value of a determined system component. Parameter Type Range Default Input : ComponentType uint16 0x0-max_component_type - Index1 uint16 0x0-0xFF - Index2 uint16 0x0-0xFF - Status1 uint32 0x0-0xFFFFFFFF - Status2 uint32 0x0-0xFFFFFFFF - Output : - - - - how to get status parameters: the following table gives overview how to set the command parameters componentType , Index1 and Index2 to get a specific status parameter value Status parameter | ComponentType | Index1 | Index2 | Remark -- | -- | -- | -- | -- VelIndividualLoopStatus | comp_velloop | - | - | PosIndividualLoopStatus | comp_posloop | - | - | PneumIndividualLoopStatus | comp_pneuloop | - | - | reLoopStatus | comp_system_setting | - | - | FFOutputMatrix | comp_ffsystem | NumFFSource | - | retrieves the status value of the output matrix of a specific feed forward source. PFFOutputMatrix | comp_pffsystem | NumPFFSource | - | retrieves the status value of the output matrix of a specific pneumatic feed forward source."
  },
  "firmware/RCI2/commands/status-set.html": {
    "href": "firmware/RCI2/commands/status-set.html",
    "title": "Set status command | SAMBA19x Website",
    "keywords": "Set status command This command specifies a status value of a determined system component. The componentType, Index1 and Index2 define which status value will be set. CommandID 2 Command length: 10 Description : Specifies a status value of a determined system component. Parameter Type Range Default Input : ComponentType uint16 0x0-max_component_type - Index1 uint16 0x0-0xFF - Index2 uint16 0x0-0xFF - Status1 uint32 0x0-0xFFFFFFFF - Status2 uint32 0x0-0xFFFFFFFF - Output : - - - - how to set status parameters: the following table gives overview how to set the command parameters componentType , Index1 and Index2 to set a specific status parameter value to Status1 Status parameter | ComponentType | Index1 | Index2 | Remark -- | -- | -- | -- | -- VelIndividualLoopStatus | comp_velloop | - | - | PosIndividualLoopStatus | comp_posloop | - | - | PneumIndividualLoopStatus | comp_pneuloop | - | - | LoopStatus | comp_system_setting | - | - | FFOutputMatrix | comp_ffsystem | NumFFSource | - | specifies the status value of the output matrix of a specific feed forward source. PFFOutputMatrix | comp_pffsystem | NumPFFSource | - | specifies the status value of the output matrix of a specific pneumatic feed forward source."
  },
  "LoggingTool/gui/troubleshooting.html": {
    "href": "LoggingTool/gui/troubleshooting.html",
    "title": "TROUBLESHOOTING | SAMBA19x Website",
    "keywords": "TROUBLESHOOTING Can’t run SiDiMaT19xA Ensure that the .Net framework 4.5.2 or higher is installed. Run the SiDiMaT19xA as administrator. No Communication Check if the controller is powered on and the monitor LED is blinking. Check if either a USB cable or a serial cable connects the controller with the PC. Check if the used com port is selected by the “Communication Server” . Use \"Terminate Comm Server and Connect\" button to establish the connection. If a failure occurs that cannot be solved, contact our technical support. Phone: +49 (0) 6142 94000"
  },
  "firmware/RCI2/commands/system-actions.html": {
    "href": "firmware/RCI2/commands/system-actions.html",
    "title": "| SAMBA19x Website",
    "keywords": ""
  },
  "firmware/RCI2/commands/Test.html": {
    "href": "firmware/RCI2/commands/Test.html",
    "title": "head1 | SAMBA19x Website",
    "keywords": "head1 head2 item1 item1 item11 item12 equation_: $-b \\pm \\sqrt{b^2 - 4ac} \\over 2a$ Name | Lunch order | Spicy | Owes ------- | -- | ---------- | ---------: Joan | saag paneer | medium | $11 Sally | vindaloo | mild | $14 Erin | lamb madras | HOT | $5 left, center, right aligment see below table Name | Lunch order | Spicy | Owes :--:| :-- | --: | -- Joan | saag paneer | medium | $11 Sally | vindaloo | mild | $14 Erin | lamb madras | HOT | $5 // All the code you will ever need var hw = \"Hello World!\" alert(hw);"
  },
  "firmware/RCI2/enumerations/componenttypes.html": {
    "href": "firmware/RCI2/enumerations/componenttypes.html",
    "title": "The component types | SAMBA19x Website",
    "keywords": "The component types All component types supported in the firmware are listed below Number Name Description 0 comp_none none component 1 comp_system_setting system setting 2 comp_velloop velocity loop 3 comp_posloop position loop 4 comp_pneuloop pneumatic loop 5 comp_ffsystem FF-Subsystem 6 comp_pffsystem pneumatic FF-Subsystem 7 comp_noise Excitation 8 comp_diag Diagnostic 9 comp_trace Trace 10 comp_logging Logging 11 max_component_type"
  },
  "firmware/RCI2/enumerations/enumerations.html": {
    "href": "firmware/RCI2/enumerations/enumerations.html",
    "title": "Enumerations for RCI2 | SAMBA19x Website",
    "keywords": "Enumerations for RCI2 The component types All component types supported in the firmware are listed below Number Name Description 0 comp_none none component 1 comp_system_setting system setting 2 comp_velloop velocity loop 3 comp_posloop position loop 4 comp_pneuloop pneumatic loop 5 comp_ffsystem FF-Subsystem 6 comp_pffsystem pneumatic FF-Subsystem 7 comp_noise Excitation 8 comp_diag Diagnostic 9 comp_trace Trace 10 comp_logging Logging 11 max_component_type Pointer types All component types supported in the firmware are listed below Number Name Description 0 io_type IOSignal pointer to access IOSignal of a component. 1 filt_ptype IIR2-Filter pointer to access IIR2-Filter \"stage filter\" of a component. 2 mult_ptype Multiplier pointer to access input- output-matrix multiplier of a component. 3 max_pointer_type not allowed. System actions All system actions supported in the firmware listed below Number Name Description 0 action_none do nothing. 1 action_overall_active_status toggles overall active status on/off. 2 action_pneum_status toggles pneumatic loop on/off. 3 action_pos_status toggles position loop on/off. 4 action_ff_status toggles FF-Subsystem on/off. 5 action_ff_adaptive_status toggles FF-Subsystem adaptive on/off. 6 action_ff_use_raw_status toggles FF-Subsystem use raw input option on/off. 7 action_pff_status toggles FF-Subsystem on/off. 8 action_pff_adaptive_status toggles FF-Subsystem adaptive on/off. 9 action_use_temp_sensor toggles the motor protection use temperature sensor option on/off. 10 action_noise_filter_status toggles using the noise filters on/off. 11 use_ethercat_ff_sig toggles ethercat ff-signals on/off. 12 use_ethercat_output toggles ethercat output on/off. 13 action_disable_all_motor toggles the motor protection disable all motors option on/off. 14 action_pneum_move_up moves pneumatic system up. 15 action_pneum_move_down moves pneumatic system down. 16 action_pneum_go_to move pneumatic system to a specific height. 17 action_pneum_setpoint_status toggles the pneumatic use setpoint for all axes option on/off. 18 action_pneum_move_up_at_startup_status toggles the pneumatic move up after startup option on/off. 19 action_pneum_dither_comp_status toggles the pneumatic dither compensation option on/off. 20 action_pneum_accept_valveout_for_up updates the pneumatic valve up-offset from the current valve outputs. 21 action_pneum_accept_valveout_for_down updates the pneumatic valve down-offset from the current valve outputs. 22 action_nv_save saves actual parameters to NV-RAM \"*non-volatile memory\". 23 action_nv_restore restores parameters from NV-RAM \"*non-volatile memory\". 24 action_nv_clear clears NV-RAM \"*non-volatile memory\". 25 max_action_type n System Config types SystemConfug enumeration Number Name Description 0 sysconfig_loops_config to access system loop configuration. 1 sysconfig_sample_freq to access sample frequency. 2 sysconfig_output_ramp to access output ramp. 3 sysconfig_loop_switch_sig to access auto loop switch signal. 4 sysconfig_loops_switch_config to access auto loop switch configuration. 5 sysconfig_performance_sig to access performance signal. 6 sysconfig_performance_config to access performance configuration. 7 sysconfig_adc_set_num to access the adc set number. IOTypes IOTypes enumeration Number Name Description 0 sysconfig_loops_config to access system loop configuration. 1 sysconfig_sample_freq to access sample frequency. 2 sysconfig_output_ramp to access output ramp. 3 sysconfig_loop_switch_sig to access auto loop switch signal. 4 sysconfig_loops_switch_config to access auto loop switch configuration. 5 sysconfig_performance_sig to access performance signal. 6 sysconfig_performance_config to access performance configuration. 7 sysconfig_adc_set_num to access the adc set number."
  },
  "firmware/RCI2/enumerations/pointertypes.html": {
    "href": "firmware/RCI2/enumerations/pointertypes.html",
    "title": "Pointer types | SAMBA19x Website",
    "keywords": "Pointer types All component types supported in the firmware are listed below Number Name Description 0 io_type IOSignal pointer to access IOSignal of a component. 1 filt_ptype IIR2-Filter pointer to access IIR2-Filter \"stage filter\" of a component. 2 mult_ptype Multiplier pointer to access input- output-matrix multiplier of a component. 3 max_pointer_type not allowed."
  },
  "firmware/RCI2/enumerations/systemconfigs.html": {
    "href": "firmware/RCI2/enumerations/systemconfigs.html",
    "title": "SystemConfigs | SAMBA19x Website",
    "keywords": "SystemConfigs SystemConfug enumeration Number Name Description 0 sysconfig_loops_config to access system loop configuration. 1 sysconfig_sample_freq to access sample frequency. 2 sysconfig_output_ramp to access output ramp. 3 sysconfig_loop_switch_sig to access auto loop switch signal. 4 sysconfig_loops_switch_config to access auto loop switch configuration. 5 sysconfig_performance_sig to access performance signal. 6 sysconfig_performance_config to access performance configuration. 7 sysconfig_adc_set_num to access the adc set number."
  },
  "sidimat19xa/am-cmds/CheckSpecSamOperation.html": {
    "href": "sidimat19xa/am-cmds/CheckSpecSamOperation.html",
    "title": "SiDiMaT19xA auto measurement CheckSpec operation value | SAMBA19x Website",
    "keywords": "SiDiMaT19xA auto measurement CheckSpec operation value The CheckSpec sam-operation basically services to check a specification of a SiDiMaT19xA measurement or a logging measurement which is saved in .IDEFigure file. CheckSpec operation contains a varios auto measurement actions. It's value consists of a collection of auto measurement commands sam-cmd . An \" sam-cmd \" consists of cmd-name \" italic , polt \" and list of cmd-config seperated by a semicolon \";\" or semicolon+space \"; \". A cmd-config consists of a keyword \" polt \" and a value, they are seperated by a colon \":\" or by a colon+space \": \". Some cmd_configs are valueless. The following table describes all possible sam-cmds of the Operation sam-operation . sam-cmd Description { cache ; file1 : filepath ; file2 : filepath ; ... } load measurements curves (series) from a .IDEFigure files {file1:first file, file2: second file, ...}. The curves are added \"saved\" into a dictionary. The curves in the dictionary are identified by their label which is consisting of three letters and three number sample (F1P2S2: this signal#2 of plot#2 of file#1). path1, path2 ... are optional. { check-point ; sig : sig; point : point; rmin : rmin; rmax : rmax; specmin : specmin; specmax : specmax} checks whether the y-value at x-axis-point point meets the specification range [specmin specmax].Only values inside x-axis range [rmin - rmax] are considered. { check-upper-spec-curve ; sig : sig; specsig : specsig; specfile : filepath; rmin : rmin; rmax : rmax;} check if the curve sig is lower than specsig curve or the curve loaded from csv file filepath.Only values inside x-axis range [rmin - rmax] are considered. { max ; sig : sig; mult : mult; rmin : rmin; rmax : rmax; specmin : specmin; specmax : specmax} builds the average of the sig y-values inside x-axis range [rmin rmax] and checks whether the average value meets the specification range [specmin specmax]. checks if the sig maximum y-value lies in the range [ss - se].Only values inside x-axis range [rs - re] are used. rs and re are optional. { min ; sig : sig; mult : mult; rmin : rmin; rmax : rmax; specmin : specmin; specmax : specmax} builds the average of the sig y-values inside x-axis range [rmin rmax] and checks whether the average value meets the specification range [specmin specmax]. { avg ; sig : sig; mult : mult; rmin : rmin; rmax : rmax; specmin : specmin; specmax : specmax} builds the average of the sig y-values inside x-axis range [rmin rmax] and checks whether the average value meets the specification range [specmin specmax]. mult gives opportunity to multiply the y-value with a factor bevore building the average value. { abs-avg ; sig : sig; mult : mult; rmin : rmin; rmax : rmax; specmin : specmin; specmax : specmax} builds the absolute average of the sig y-values inside x-axis range [rmin rmax] and checks whether the average value meets the specification range [specmin specmax]. mult gives opportunity to multiply the y-value with a factor bevore building the average value. { std ; sig : sig; mult : mult; rmin : rmin; rmax : rmax; specmin : specmin; specmax : specmax} builds the standard deviation value of the sig y-values lay inside x-axis range [rmin rmax] and checks whether the value meets the specification range [specmin specmax]. mult gives opportunity to multiply the y-value with a factor bevore building the average value. { pkpk ; sig : sig; rmin : rmin; rmax : rmax; specmin : specmin; specmax : specmax} builds the peak-to-peak value of the sig y-values inside x-axis range [rmin rmax] and checks whether the average value meets the specification range [specmin specmax]. { max-pos sig : sig; mult : mult; rmin : rmin; rmax : rmax; specmin : specmin; specmax : specmax} builds the average of the sig y-values inside x-axis range [rmin rmax] and checks whether the average value meets the specification range [specmin specmax].checks the x-axis position of the y-maximum value.Only values inside x-axis range [rs - re] are used. rs and re are optional. { ocl-lbw ; olsig :sig; clsig :sig ; rmin : rmin; rmax : rmax; specmin : specmin; specmax : specmax} finds the open/closed-loop active bandwidth lower point and checks if it's value lies inside the specification range [specmin specmax]. olsig :open-loop curve; clsig : closed-loop curve; Only values inside x-axis range [rmin - rmax] are considered. { ocl-hbw ; olsig :sig; clsig :sig ; rmin : rmin; rmax : rmax; specmin : specmin; specmax : specmax} finds the open/closed-loop active bandwidth higher point and checks if it's value lies inside the specification range [specmin specmax]. olsig :open-loop curve; clsig : closed-loop curve; Only values inside x-axis range [rmin - rmax] are considered. { ocl-damp ; olsig :sig; clsig :sig ; rmin : rmin; rmax : rmax; specmin : specmin; specmax : specmax} Checks the open/closed-loop active damping lies in [specmin - specmax]. olsig : open loop curve; clsig2 : closed loop curve. Only values inside x-axis range [rmin - rmax] are considered. Specification results Here is a list with possible specification result could be used as table cell content. Specification result starts with a specification opeartion name (spec-op-name) followed by dot (.) followed by specicfication operation value keyword (spec-op-key) followed by dot (.) followed by specification parameter (spec-par) which will be the cell content. Syntax: { cmd-name . spec-op-key . spec-par } spec_name : the name of the SpeckCheck operation example (CheckSpec_#VelXtrasOl). spec-op-key : one of the following specification check operations: max : the maximum y-value. max-pos : the x-position of the maximum y-value. ocl-lbw : the isolation lower active band width value. ocl-hbw : the isolation lower active band width value. ocl-damp : the isolation active damping. check-point : the y-value at a specific point at the x-axis. min : the minimum y-value. pk-pk : the peak to peak y-value. check-upper-spec-curve : check if a curve \"signal\" lies under a spec-curve. spec-par : one of the following parameter: minmax : the specification range [min max]. measured : measured value. result : specification check status of the spec-op-key the result is one from {Passed, Failed}."
  },
  "sidimat19xa/am-cmds/LoggSamOperation.html": {
    "href": "sidimat19xa/am-cmds/LoggSamOperation.html",
    "title": "SiDiMaT19xA auto measurement Logg operation value | SAMBA19x Website",
    "keywords": "SiDiMaT19xA auto measurement Logg operation value The Logg sam-operation basically services to log data from the controller using the logging functionality. Furthermore, it prepares the logged data and plots it. It's value consists of a collection of auto measurement commands sam-cmd . An \" sam-cmd \" consists of cmd-name \" italic , polt \" and list of cmd-config seperated by a semicolon \";\" or semicolon+space \"; \". A cmd-config consists of a keyword \" polt \" and a value, they are seperated by a colon \":\" or by a colon+space \": \". Some cmd_configs are valueless. The following table describes all possible sam-cmds of the Logg sam-operation . sam-cmd Description { load-logg-setting-file ; file : path} Opens logging setting file and send it to controller. Path has the extension .Logg19xConfig . { load-logg-setting-file ; file : path} Opens logging setting file and send it to controller. Path has the extension .Logg19xConfig . { load-logg-setting-file ;path} Opens logging setting file and send it to controller. Path has the extension .Logg19xConfig ."
  },
  "sidimat19xa/am-cmds/PneumSystemSamCmd.html": {
    "href": "sidimat19xa/am-cmds/PneumSystemSamCmd.html",
    "title": "| SAMBA19x Website",
    "keywords": ""
  },
  "sidimat19xa/am-cmds/ReportSamOperation.html": {
    "href": "sidimat19xa/am-cmds/ReportSamOperation.html",
    "title": "SiDiMaT19xA auto measurement Report operation value | SAMBA19x Website",
    "keywords": "SiDiMaT19xA auto measurement Report operation value The Report operation basically services to generate a report containing SiDiMaT19xA measurement or a logging measurement graphs. It also supports adding measurement specification result tables. The value of this operation is a collection of the values in the following table (values have to be used without brackets). The value first word \" italic \" is a keyword and has to be written correct. Value Description { par1 ;text} add the text to the markdown string as paragraph1 (header1). { par2 ;text} add the text to the markdown string as paragraph2. { par3 ;text} add the text to the markdown string as paragraph3. { par4 ;text} add the text to the markdown string as paragraph4. { par5 ;text} add the text to the markdown string as paragraph5. { par6 ;text} add the text to the markdown string as paragraph6. { text ;text} add the text to the markdown string. { pic ;path} add a picture to the markdown string. when Path is not absolute then it is relative to the first evaluated auto measurement file path (original-path). { tabelheader ;colh1;colh2; ...} add a table header with the headers {colh1, colh2, ...}. { tabelrow ;result1;result2; ...} add a new row to the table with the cells content {result1, result2, ....}. Cells content is a text or a specification result (see description below). The table rows have to directly follow the table header. { save ;path} save the mardown string to .md file (filename) and convert the markdown string to a html. furthermore it convert the html file to a pdf file. { doc-prop ; property1 : value; property1 : value; ...} sets document properties like author, serial number ... etc. each property consist of two by a double point seperated terms. the first one is the property name { serialnr , author , tester , title , systemname } and the second term is the property value. { excute ;cmd} excutes the command line cmd. The excuting path is the original-path. If cmd is a .bat file then the file will be executed. Specification results Here is a list with possible specification result could be used as table cell content. Specification result starts with a specification opeartion name (spec-op-name) followed by dot (.) followed by specicfication operation value keyword (spec-op-key) followed by dot (.) followed by specification parameter (spec-par) which will be the cell content. Syntax: {spec-op-name.spec-op-key.spec-par} spec_name : the name of the SpeckCheck operation example (CheckSpec_#VelXtrasOl). spec-op-key : one of the following specification check operations: max : the maximum y-value. max-pos : the x-position of the maximum y-value. ocl-lbw : the isolation lower active band width value. ocl-hbw : the isolation lower active band width value. ocl-damp : the isolation active damping. check-point : the y-value at a specific point at the x-axis. min : the minimum y-value. pk-pk : the peak to peak y-value. check-upper-spec-curve : check if a curve \"signal\" lies under a spec-curve. spec-par : one of the following parameter: minmax : the specification range [min max]. measured : measured value. result : specification check status of the spec-op-key the result is one from {Passed, Failed}. Examples 1 Example <Operation Name=\"Report\"> <Value> <anyType xsi:type=\"xsd:string\">para1;Force Mobility Axis Wise Open Loop Measurements at raw input </anyType> <anyType xsi:type=\"xsd:string\">para2;Force Mobility Measurements</anyType> <anyType xsi:type=\"xsd:string\">text;Here are the force mobility measurements. Measured at raw input during the Open loop.</anyType> </Value> </Operation> 2 Example <Operation Name=\"Operation\"> <Value> <anyType xsi:type=\"xsd:string\">directory;reset:dummy</anyType> <anyType xsi:type=\"xsd:string\">excit-setting;type:0; filterusage:off</anyType> </Value> </Operation> <Operation Name=\"Report\"> <Value> <anyType xsi:type=\"xsd:string\">para2;Specification Result Tables</anyType> <anyType xsi:type=\"xsd:string\">text;Additional Text could be added here.</anyType> <anyType xsi:type=\"xsd:string\">para3;Force Mobility Resonance Frequncy</anyType> <anyType xsi:type=\"xsd:string\">tableheader;Axis;Min;Max;Unit;Measured Value;Result</anyType> <anyType xsi:type=\"xsd:string\">tablerow;Xtrans;CheckSpec_#FMXt7OCLAW.max-pos.specmin;CheckSpec_#FMXt7OCLAW.max-pos.specmax;Hz;CheckSpec_#FMXt7OCLAW.max-pos.measured;CheckSpec_#FMXt7OCLAW.max-pos.result</anyType> <anyType xsi:type=\"xsd:string\">tablerow;Ytrans;CheckSpec_#FMYt7OCLAW.max-pos.specmin;CheckSpec_#FMYt7OCLAW.max-pos.specmax;Hz;CheckSpec_#FMYt7OCLAW.max-pos.measured;CheckSpec_#FMYt7OCLAW.max-pos.result</anyType> <anyType xsi:type=\"xsd:string\">tablerow;Ztrans;CheckSpec_#FMZt7OCLAW.max-pos.specmin;CheckSpec_#FMZt7OCLAW.max-pos.specmax;Hz;CheckSpec_#FMZt7OCLAW.max-pos.measured;CheckSpec_#FMZt7OCLAW.max-pos.result</anyType> <anyType xsi:type=\"xsd:string\">tablerow;Xrot;CheckSpec_#FMXr7OCLAW.max-pos.specmin;CheckSpec_#FMXr7OCLAW.max-pos.specmax;Hz;CheckSpec_#FMXr7OCLAW.max-pos.measured;CheckSpec_#FMXr7OCLAW.max-pos.result</anyType> <anyType xsi:type=\"xsd:string\">tablerow;Yrot;CheckSpec_#FMYr7OCLAW.max-pos.specmin;CheckSpec_#FMYr7OCLAW.max-pos.specmax;Hz;CheckSpec_#FMYr7OCLAW.max-pos.measured;CheckSpec_#FMYr7OCLAW.max-pos.result</anyType> <anyType xsi:type=\"xsd:string\">tablerow;Zrot;CheckSpec_#FMZr7OCLAW.max-pos.specmin;CheckSpec_#FMZr7OCLAW.max-pos.specmax;Hz;CheckSpec_#FMZr7OCLAW.max-pos.measured;CheckSpec_#FMZr7OCLAW.max-pos.result</anyType> </Value> </Operation>"
  },
  "firmware/RCI2/intro.html": {
    "href": "firmware/RCI2/intro.html",
    "title": "REMOTE COMMAND INTERFACE 2 “RCI2” | SAMBA19x Website",
    "keywords": "REMOTE COMMAND INTERFACE 2 “RCI2” OVERVIEW RCI2 was born mainly to support the communication between controller and host through the EtherCat interface. RCI2 realizes the Ethercat service data object “SDO” and services to access the firmware parameters through the EtherCat interface. The RCI2 interface supports at the moment accessing of a couple of parameters. In the future, the RCI2 should replace the standard RCI interface and it will support all communication ports “RS232 and USB”. For RCI2 examples see appendix."
  },
  "firmware/RCI2/rci2-protocol.html": {
    "href": "firmware/RCI2/rci2-protocol.html",
    "title": "RCI2 Command and response frames | SAMBA19x Website",
    "keywords": "RCI2 Command and response frames OVERVIEW RCI2 interface protocol consist of two kinds of frames the command and response frames. Both frames are similar. The response frames contains additional a status word which gives the status of the corresponding command. RCI2 command frame The RCI2 commands is 16bit-word stream that means the basic data unit is 16bit word. Each RCI2 commands consist of determined words number at least 3 words (START, CMD and CKS) and maximum 61 words. START CMD DATA0 … DATAn CKS 16-bit 16-bit 16/32-bit 16/32-bit 16/32-bit 16-bit Start word Command word Data word 0 … Data word 57 checksum START : Start command word including length and start character Bit 15 … 8 Bit 7 … 0 Data length code (bytes) Command start byte Data length code : Number of all words including START (length from START to CKS) Command start byte : (including command destination: DSP, ARM etc.) 58 (0x3A): DSP (Opticon Controller). 35 (0x23): ARM (OCM2 Module) “actually not supported”. CMD : Command word including source identifier Bit 15 … 12 Bit 11 … 0 Command source identifier (4-bit) Command identifier (12-bit) Command source identifier: 0x0: Reserved 0x1: DSPC67 RS232A 0x2: DSPC67 RS232B 0x3: DSPC67 USB 0x4: Touch panel/TFT display 0x5: EtherCAT 0x6: USB-1 0x7: USB-2 0x8: RS232 0x9: Ethernet 0xA – 0xF: Reserved (e.g. CAN, Bluetooth, WiFi) Command identifier: 12-bit wide, defined in RCI2 interface specification DATA : 16-bit integer (signed “Int16”, unsigned “UInt16”), 32-bit-integer (signed “Int32”, unsigned “UInt32” or 32-bit floating point data, max. 58 data words. CKS : Checksum calculation second complement of sum of all words. Second complement: to build the second complement “Two’s Complement” of a binary number invert the binary number and add one. RCI2 response frame Each sent command will get a response. The RCI2 response bases on the RCI2 command but has an additional status field (STATUS word). The RCI2 response basic unit is 16bit word. Each RCI2 response consists of determined words number at least 4 words ( START , CMD , STATUS and CKS ) and maximum 62 words. START CMD STATUS DATA0 … DATAn CKS 16-bit 16-bit 16-bit 16/32-bit 16/32-bit 16/32-bit 16-bit Start word Command word Status word Data word 0 … Data word 57 checksum START : Start command word including length and start character Bit 15 … 8 | Bit 7 … 0 -- | -- Data length code (bytes) | Command start byte Data length code : Number of all words including START (from START to CKS ). Command Start byte : (including command destination: DSP, ARM etc.) 58 (0x3A): DSP (Opticon Controller). 35 (0x23): ARM (OCM2 Module) “actually not supported”. CMD : Command word including source identifier Bit 15 … 12 | Bit 11 … 0 -- | -- Command source identifier (4-bit) | Command identifier (12-bit) Command source identifier : 0x0: Reserved 0x1: DSPC67 RS232A 0x2: DSPC67 RS232B 0x3: DSPC67 USB 0x4: Touch panel/TFT display 0x5: EtherCAT 0x6: USB-1 0x7: USB-2 0x8: RS232 0x9: Ethernet 0xA – 0xF: Reserved (e.g. CAN, Bluetooth, WiFi) Command identifier : 12-bit wide, defined in RCI2 interface specification. Status : The status word informs about the command processing status. See status code in above section. DATA : 16-bit integer (signed “Int16”, unsigned “UInt16”), 32-bit-integer (signed “Int32”, unsigned “UInt32” or 32-bit floating point data, max. 58 data words. CKS : Checksum calculation second complement of sum of all words."
  },
  "firmware/RCI2/commands/commandstbl.html": {
    "href": "firmware/RCI2/commands/commandstbl.html",
    "title": "RCI2 Commands Table | SAMBA19x Website",
    "keywords": "RCI2 Commands Table The next table contains all RCI2-Commands supported by the standrad firmware. Firmware version higher than 3.3.1000 are required. command name details Description Set-IOSignal set iosignal sets an iosignal of a spicified system component. Get-IOSignal get iosignal gets an iosignal of a spicified system component. Set-filter set filter sets a filter stage of a spicified system component. Get-filter get filter gets a filter stage of a spicified system component. Set-multipliers set multipliers sets a multipliers set of a spicified system component. Get-multipliers get multipliers sets a multipliers stage of a spicified system component. Set-IOSignal set status sets a status parameter of a spicified system component. Get-IOSignal get status gets a status parameter of a spicified system component. Set-long-Uint16-Parameters set uint16 parameters sets a long parameter set consisting of 20x uint16 values. get-long-Uint16-Parameters get uint16 parameters gets a long parameter set consisting of 20x uint16 values. Set-Mix-Parameters set mix parameters sets a mixed parameter set consisting of 4x int32 values and 4x float values. Get-Mix_Parameters get mix parameters gets a mixed parameter set consisting of 4x int32 and 4x float values. Set-short-int-Parameters set short int parameters sets a short parameter set consisting of 4x int32 values. Get-short-int-Parameters set short int parameters gets a short parameter set consisting of 4x int32 values. Set-short-float-Parameters set short float parameters sets a short parameter set consisting of 4x float values. Get-short-float-Parameters get short float parameters gets a short parameter set consisting of 4x float values. System-Actions system actions triggers an action from the system from the actions list ."
  },
  "LoggingTool/gui/description.html": {
    "href": "LoggingTool/gui/description.html",
    "title": "GUI DESCRIPTION | SAMBA19x Website",
    "keywords": "GUI DESCRIPTION Control Panel Connection tab Control Buttons Bar Excitation/Diag tab Open/Save sidimat parameter setting tab Dies ist ein Beispiel für einen Referenz-Link. Dies ist [ein Beispiel][figure2] für einen Referenz-Link. Dies ist ein Beispiel für einen Referenz-Link. The new SiDiMaT19xA tools basically consists of two main panels “Control panel and Graphs panel”. The control panel contains settings and the graphs panel displays the plots of the measured signal. (See next figure). Figure: SiDiMaT19x \"GUI overview Control Panel The control panel contains on the top a control buttons and a few setting tabs “Con-nection, Graphs, Excitation, Trace Setting …etc”. Control Buttons Bar The control buttons bar consists of a few buttons to switch the between time and frequency response plots and to save, cache, open, save and add sidimat19xa measurement. Control Item | Description -- | -- | Toggles to the time/spectrum plot view. | Toggles to the frequency response plot view. | Caches the current sidimat19x measurement. | Deletes the last cached sidimat19x measurement. | Adds a sidimat19x measurement to the current one. | Opens a sidimat19x measurement. | Saves the current sidimat19x measurement. | Opens an auto measurement file and executes it. Table: Control buttons bar Connection Tab The “Connection” tab allows you to connect or disconnect to a controller. Figure 4.1.2: Connection tab. Use \"Connect\" button to establish the connection with the controller. Use “Disconnect” button to disconnect the communication. Use “Terminate Comm Server and Connect” button to close the Comm Server ses-sion, if one is already started and to connect with a new session. This option is rec-ommended after a communication trouble. Use “Update Comm Ports list” button to refresh lists of the available com ports. Figure: Connect Page after a successful connection with controller. Excitation/Diag Tab Using the excitation tab the noise injection point, the excitation setting “type and pa-rameters” and the excitation filter settings and usage could be adjusted. Figure 4.1.5: Excitation/Diag Tab. Control Item | Description :--: | -- m | Click “Accept Change” button to accept the modification of the excitation setting and to send it to the controller. d | Specifies the excitation signal type. d | Toggles the noise filter usage On/Off and specifies the excitation filters. d | Specifies the injection node “signal” of the excitation signal. Table 4.1.2: Excitation Tab Control Items. Excitation Type Parameters White Noise (1) “Gain [-1,+1]” the gain range [-1,+1] corresponds to [-32000, +32000 digits]. Sine Wave (1) “Gain [-1,+1]” the gain range [-1,+1] corresponds to [-32000, +32000 digits]. (2) Sine wave frequency in Hz. Duty Cycle (1) “Gain [-1,+1]” the gain range [-1,+1] corresponds to [-32000, +32000 digits]. (2) High Period in millisecond. During this peri-od the signal amplitude equals the adjusted “Gain”. (3) Low Period in millisecond. During this period the signal amplitude is set to zero. Chirp Sine “recursive” (1) “Gain [-1,+1]” the gain range [-1,+1] corresponds to [-32000, +32000 digits]. (2) Start “lowest” frequency of the chirp sine. (3) End “Highest” frequency of the chirp sine. (4) Time Period of the chirp sine in second. Table 4.1.3: Excitation Types and their Parameters. Trace Setting Tab The trace setting tab allows to configure all the trace parameter. Control Item Description Click “Channel0” button to select the first signal to be traced. Click “Channel1” button to select the second signal to be traced. Specifies the trace length. Specifies under sampling rate. Toggles the usage of the Anti-Aliasing filter On/Off. Specifies the average number of the meas-urement. Starts/Stops the measurement. This option appears only for firmware with fast data acquiring support. Enables this op-tion to accelerate the trace data acquiring. Table 4.1.4: Trace Setting Tab Control Item. Figure 4.1.6: Trace Setting Tab. Figure 4.1.7: Trace Setting Tab with fast Data Load Support. Open/Save Sidimat Parameter Setting Tab Control Item Description Click to load sidimat parameters from a si-dimat configuration file “SiDiMaT19xAConfig”. Click to save the actual sidimat parameters to a sidimat configuration file “Si-DiMaT19xAConfig”. Table 4.1.6: Save/Load Sidimat Parameter Setting Control Items. Figure 4.1.9: Save/Load Sidimat Parameter Setting Tab."
  },
  "samba19xui/OperationValue.html": {
    "href": "samba19xui/OperationValue.html",
    "title": "SiDiMaT19xA auto measurement Report operation value | SAMBA19x Website",
    "keywords": "SiDiMaT19xA auto measurement Report operation value The Report operation basically services to generate a report containing SiDiMaT19xA measurement or a logging measurement graphs and result table of the auto specification conditions. The value of this operation is a collection of the values in the following table (values have to be used without brackets). The value first word \" italic \" is a keyword and has to be written correct. Value Description { measure } start sidimat measurement. { rci-command ; command:text } send text to controller as rci-command, text has to be a valid rci-command. { pneum-system } excute a pneumatic system action. { trace-setting ; samples:x; undersample:x; average:x; anti-aliasing:(on/off) } start sidimat measurement. { trace-sig ; signum:x; type:x; mainindex:x; subindex:x } config a trace signal. { excit-sig ; type:x; mainindex:x; subindex:x } config injection point signal. { excit-filter ; filnum:x; type:x; par1:x; par2:x; par3:x; par4:x; par5:x } config an excitation filter. { excit-setting ; type:x; par1:x; par2:x; par3:x; par4:x; filterusage:(on/off) } config the excitation signal setting. { system-loopstatus ; status: S1 S2 ... Sn } toggles a control loop on/off. the status parameters should be one or many of:(READ, CACHE, RESTORE, OVERALLON, OVFFON, PFFON, PNEUMON, OVERALLOFF, OVFFOFF, PFFOFF, PNEUMOFF, TEMPSENSORON, TEMPSENSOROFF, ETHERCATSFFON, ETHERCATSFFOFF, ETHERCATMOTON, ETHERCATMOTOFF) { individual-loopstatus ; velocity:x; position:x; pneumatic:x } set the individual loop status of a control loop. { clear-cached-measurements ; measurement1; measurement2, ... } add the text to the markdown string as paragraph2. { waitms ; ms} wait the time period ms. { cache-measurement ;} cache the actual sidimat measurement. { __;path} add a picture to the markdown string. when Path is not absolute then it is relative to the first evaluated auto measurement file path (original-path). { tabelheader ;colh1;colh2; ...} add a table header with the headers {colh1, colh2, ...}. { tabelrow ;result1;result2; ...} add a new row to the table with the cells content {result1, result2, ....}. Cells content is a text or a specification result (see description below). The table rows have to directly follow the table header. { save ;path} save the mardown string to .md file (filename) and convert the markdown string to a html. furthermore it convert the html file to a pdf file. { doc-prop ; property1 : value; property1 : value; ...} sets document properties like author, serial number ... etc. each property consist of two by a double point seperated terms. the first one is the property name { serialnr , author , tester , title , systemname } and the second term is the property value. { excute ;cmd} excutes the command line cmd. The excuting path is the original-path. If cmd is a .bat file then the file will be executed. Specification results Here is a list with possible specification result could be used as table cell content. Specification result starts with a specification opeartion name (spec-op-name) followed by dot (.) followed by specicfication operation value keyword (spec-op-key) followed by dot (.) followed by specification parameter (spec-par) which will be the cell content. Syntax: {spec-op-name.spec-op-key.spec-par} spec_name : the name of the SpeckCheck operation example (CheckSpec_#VelXtrasOl). spec-op-key : one of the following specification check operations: max : the maximum y-value. max-pos : the x-position of the maximum y-value. ocl-lbw : the isolation lower active band width value. ocl-hbw : the isolation lower active band width value. ocl-damp : the isolation active damping. check-point : the y-value at a specific point at the x-axis. min : the minimum y-value. pk-pk : the peak to peak y-value. check-upper-spec-curve : check if a curve \"signal\" lies under a spec-curve. spec-par : one of the following parameter: minmax : the specification range [min max]. measured : measured value. result : specification check status of the spec-op-key the result is one from {Passed, Failed}. Example 1 Example1 <Operation Name=\"Report\"> <Value> <anyType xsi:type=\"xsd:string\">para1;Force Mobility Axis Wise Open Loop Measurements at raw input </anyType> <anyType xsi:type=\"xsd:string\">para2;Force Mobility Measurements</anyType> <anyType xsi:type=\"xsd:string\">text;Here are the force mobility measurements. Measured at raw input during the Open loop.</anyType> </Value> </Operation> 2 Example2 <Operation Name=\"Operation\"> <Value> <anyType xsi:type=\"xsd:string\">directory;reset:dummy</anyType> <anyType xsi:type=\"xsd:string\">excit-setting;type:0; filterusage:off</anyType> </Value> </Operation> <Operation Name=\"Report\"> <Value> <anyType xsi:type=\"xsd:string\">para2;Specification Result Tables</anyType> <anyType xsi:type=\"xsd:string\">text;Additional Text could be added here.</anyType> <anyType xsi:type=\"xsd:string\">para3;Force Mobility Resonance Frequncy</anyType> <anyType xsi:type=\"xsd:string\">tableheader;Axis;Min;Max;Unit;Measured Value;Result</anyType> <anyType xsi:type=\"xsd:string\">tablerow;Xtrans;CheckSpec_#FMXt7OCLAW.max-pos.specmin;CheckSpec_#FMXt7OCLAW.max-pos.specmax;Hz;CheckSpec_#FMXt7OCLAW.max-pos.measured;CheckSpec_#FMXt7OCLAW.max-pos.result</anyType> <anyType xsi:type=\"xsd:string\">tablerow;Ytrans;CheckSpec_#FMYt7OCLAW.max-pos.specmin;CheckSpec_#FMYt7OCLAW.max-pos.specmax;Hz;CheckSpec_#FMYt7OCLAW.max-pos.measured;CheckSpec_#FMYt7OCLAW.max-pos.result</anyType> <anyType xsi:type=\"xsd:string\">tablerow;Ztrans;CheckSpec_#FMZt7OCLAW.max-pos.specmin;CheckSpec_#FMZt7OCLAW.max-pos.specmax;Hz;CheckSpec_#FMZt7OCLAW.max-pos.measured;CheckSpec_#FMZt7OCLAW.max-pos.result</anyType> <anyType xsi:type=\"xsd:string\">tablerow;Xrot;CheckSpec_#FMXr7OCLAW.max-pos.specmin;CheckSpec_#FMXr7OCLAW.max-pos.specmax;Hz;CheckSpec_#FMXr7OCLAW.max-pos.measured;CheckSpec_#FMXr7OCLAW.max-pos.result</anyType> <anyType xsi:type=\"xsd:string\">tablerow;Yrot;CheckSpec_#FMYr7OCLAW.max-pos.specmin;CheckSpec_#FMYr7OCLAW.max-pos.specmax;Hz;CheckSpec_#FMYr7OCLAW.max-pos.measured;CheckSpec_#FMYr7OCLAW.max-pos.result</anyType> <anyType xsi:type=\"xsd:string\">tablerow;Zrot;CheckSpec_#FMZr7OCLAW.max-pos.specmin;CheckSpec_#FMZr7OCLAW.max-pos.specmax;Hz;CheckSpec_#FMZr7OCLAW.max-pos.measured;CheckSpec_#FMZr7OCLAW.max-pos.result</anyType> </Value> </Operation>"
  },
  "samba19xui/ReportValue.html": {
    "href": "samba19xui/ReportValue.html",
    "title": "SiDiMaT19xA auto measurement Report operation value | SAMBA19x Website",
    "keywords": "SiDiMaT19xA auto measurement Report operation value The Report operation basically services to generate a report containing SiDiMaT19xA measurement or a logging measurement graphs and result table of the auto specification conditions. The value of this operation is a collection of the values in the following table (values have to be used without brackets). The value first word \" italic \" is a keyword and has to be written correct. Value Description { par1 ;text} add the text to the markdown string as paragraph1 (header1). { par2 ;text} add the text to the markdown string as paragraph2. { par3 ;text} add the text to the markdown string as paragraph3. { par4 ;text} add the text to the markdown string as paragraph4. { par5 ;text} add the text to the markdown string as paragraph5. { par6 ;text} add the text to the markdown string as paragraph6. { text ;text} add the text to the markdown string. { pic ;path} add a picture to the markdown string. when Path is not absolute then it is relative to the first evaluated auto measurement file path (original-path). { tabelheader ;colh1;colh2; ...} add a table header with the headers {colh1, colh2, ...}. { tabelrow ;result1;result2; ...} add a new row to the table with the cells content {result1, result2, ....}. Cells content is a text or a specification result (see description below). The table rows have to directly follow the table header. { save ;path} save the mardown string to .md file (filename) and convert the markdown string to a html. furthermore it convert the html file to a pdf file. { doc-prop ; property1 : value; property1 : value; ...} sets document properties like author, serial number ... etc. each property consist of two by a double point seperated terms. the first one is the property name { serialnr , author , tester , title , systemname } and the second term is the property value. { excute ;cmd} excutes the command line cmd. The excuting path is the original-path. If cmd is a .bat file then the file will be executed. Specification results Here is a list with possible specification result could be used as table cell content. Specification result starts with a specification opeartion name (spec-op-name) followed by dot (.) followed by specicfication operation value keyword (spec-op-key) followed by dot (.) followed by specification parameter (spec-par) which will be the cell content. Syntax: {spec-op-name.spec-op-key.spec-par} spec_name : the name of the SpeckCheck operation example (CheckSpec_#VelXtrasOl). spec-op-key : one of the following specification check operations: max : the maximum y-value. max-pos : the x-position of the maximum y-value. ocl-lbw : the isolation lower active band width value. ocl-hbw : the isolation lower active band width value. ocl-damp : the isolation active damping. check-point : the y-value at a specific point at the x-axis. min : the minimum y-value. pk-pk : the peak to peak y-value. check-upper-spec-curve : check if a curve \"signal\" lies under a spec-curve. spec-par : one of the following parameter: minmax : the specification range [min max]. measured : measured value. result : specification check status of the spec-op-key the result is one from {Passed, Failed}. Example 1 Example1 <Operation Name=\"Report\"> <Value> <anyType xsi:type=\"xsd:string\">para1;Force Mobility Axis Wise Open Loop Measurements at raw input </anyType> <anyType xsi:type=\"xsd:string\">para2;Force Mobility Measurements</anyType> <anyType xsi:type=\"xsd:string\">text;Here are the force mobility measurements. Measured at raw input during the Open loop.</anyType> </Value> </Operation> 2 Example2 <Operation Name=\"Operation\"> <Value> <anyType xsi:type=\"xsd:string\">directory;reset:dummy</anyType> <anyType xsi:type=\"xsd:string\">excit-setting;type:0; filterusage:off</anyType> </Value> </Operation> <Operation Name=\"Report\"> <Value> <anyType xsi:type=\"xsd:string\">para2;Specification Result Tables</anyType> <anyType xsi:type=\"xsd:string\">text;Additional Text could be added here.</anyType> <anyType xsi:type=\"xsd:string\">para3;Force Mobility Resonance Frequncy</anyType> <anyType xsi:type=\"xsd:string\">tableheader;Axis;Min;Max;Unit;Measured Value;Result</anyType> <anyType xsi:type=\"xsd:string\">tablerow;Xtrans;CheckSpec_#FMXt7OCLAW.max-pos.specmin;CheckSpec_#FMXt7OCLAW.max-pos.specmax;Hz;CheckSpec_#FMXt7OCLAW.max-pos.measured;CheckSpec_#FMXt7OCLAW.max-pos.result</anyType> <anyType xsi:type=\"xsd:string\">tablerow;Ytrans;CheckSpec_#FMYt7OCLAW.max-pos.specmin;CheckSpec_#FMYt7OCLAW.max-pos.specmax;Hz;CheckSpec_#FMYt7OCLAW.max-pos.measured;CheckSpec_#FMYt7OCLAW.max-pos.result</anyType> <anyType xsi:type=\"xsd:string\">tablerow;Ztrans;CheckSpec_#FMZt7OCLAW.max-pos.specmin;CheckSpec_#FMZt7OCLAW.max-pos.specmax;Hz;CheckSpec_#FMZt7OCLAW.max-pos.measured;CheckSpec_#FMZt7OCLAW.max-pos.result</anyType> <anyType xsi:type=\"xsd:string\">tablerow;Xrot;CheckSpec_#FMXr7OCLAW.max-pos.specmin;CheckSpec_#FMXr7OCLAW.max-pos.specmax;Hz;CheckSpec_#FMXr7OCLAW.max-pos.measured;CheckSpec_#FMXr7OCLAW.max-pos.result</anyType> <anyType xsi:type=\"xsd:string\">tablerow;Yrot;CheckSpec_#FMYr7OCLAW.max-pos.specmin;CheckSpec_#FMYr7OCLAW.max-pos.specmax;Hz;CheckSpec_#FMYr7OCLAW.max-pos.measured;CheckSpec_#FMYr7OCLAW.max-pos.result</anyType> <anyType xsi:type=\"xsd:string\">tablerow;Zrot;CheckSpec_#FMZr7OCLAW.max-pos.specmin;CheckSpec_#FMZr7OCLAW.max-pos.specmax;Hz;CheckSpec_#FMZr7OCLAW.max-pos.measured;CheckSpec_#FMZr7OCLAW.max-pos.result</anyType> </Value> </Operation>"
  },
  "samba19xui/gui/samba19xui_um_.html": {
    "href": "samba19xui/gui/samba19xui_um_.html",
    "title": "Introduction | SAMBA19x Website",
    "keywords": "SAMBA19xUI User Interface Manual SAMBA19xUI AUTHOR(S): MSHAT REVISION: 08 DATE OF PRINT: December 12, 2017 DOCUMENT CHANGE & HISTORY RECORD Name Last Update Status Version ECR/PR/IP Comment MSHAT 28.01.2016 Draft 00 First version MSHAT 14.09.2016 Draft 01 Modification related to SAMBA19xUI 1.9.0.5, which is a part of the SAMBA1.9.x installation package. MSHAT 02.11.2016 Released 02 Modification related to SAMBA19xUI 1.9.0.6. MSHAT 16.11.2016 Released 03 Modification related to SAMBA19xUI 1.9.0.7. Added Appendix. MSHAT 08.12.2016 Released 04 Modification related to SAMBA19xUI 1.9.0.8. MSHAT 10.04.2017 Released 05 Modification related to SAMBA19xUI 1.9.0.9. MSHAT 25.04.2017 Released 06 Modification related to SAMBA19xUI 1.9.0.10. MSHAT 09.05.2017 Released 07 Modification related to SAMBA19xUI 1.9.0.11. MSHAT 09.05.2017 Released 08 Modification related to SAMBA19xUI RC02 V1.9.0.13. Notice! Although this document has been prepared with the utmost care, errors of any kind cannot be totally discounted. The contents of this document may be periodically revised, amended or changed otherwise by the originator without notice. You are invited to report any deficiencies / recommendations to IDE. Windows 7 ®, Windows 8 ® are registered trademarks of the Microsoft Corporation, USA. © Copyright 2015, Integrated Dynamics Engineering GmbH Introduction Remark : SAMBA19xUI is compatible with firmware version 3.3.00 and higher. Language This manual is originally written in English language. Overview This document describes how to use the “User Interface” for the opticon controller. The “User Interface” allows querying and changing nearly all configurable controller settings. Intended Audience The software and this document is intended for users of an IDE vibration isolation system. Requirements In order to run this software, the following requirements must be met: Windows 7®, Windows 8®, or later version. Personal computer with x86- or x64-based microprocessor 2.8 GHz or higher, 4GB RAM are recommended. SVGA-resolution with a minimum of 1600x900 pixel and 16-Bits high colors. Mouse or compatible pointing device Microsoft .Net Frame work 4.5.2 or higher. Contact Integrated Dynamics Engineering GmbH Hermannstrasse 9-13 65479 Raunheim, GERMANY Phone: +49 (0)6142 9400-0 INSTALLATION Copy the installation package from the CD to your PC. Read the SAMBA19x installation Guide document. Getting Started Your PC can communicate with the opticon controller with a USB connection or serial (RS232) connection. Use an A/B USB cable or a null modem cable. Make sure that the FTDI USB-To-Serial converter driver is installed. This is needed to connect to controller via USB connector. Start the SAMBA19xUI User Interface program with a right-click on the SAMBA19xUI shortcut and select Run as Admin. Note: The SAMBA19xUI has to run with administrative privileges. Otherwise the SAMBA19xUI doesn’t start. Start-Up The SAMBA19xUI uses the communication server like the other SAMBA applications. This means only selected COM Ports in the communication server could be used to talk to controller. Note1 : Ensure that the used com port number is configured “selected” by the “Communication Server Configuration Tool”. Otherwise the connection will not be established. Figure 3.1.1 Communication Server Configuration Tool Note2 : If you connect via the USB port, the port will be shown as an additional com port (Virtual Com Port). Note3 : The standard baud rate for the Opticon controller is 57600. After the start of the SAMBA19xUI choose the com port and confirm with the “Connect” button to establish the connection. Note4 : The used com ports by the CommServer could be configured by SAMBA19xUI version 1.9.0.8 and higher assuming the SAMBA19xUI is running with administrator privileges. (By some PCs with 64Bits operation system this doesn’t work properly). Note5 : SAMBA19xUI version 1.9.0.9 accept command line arguments to adjust the com port and baud rate. Call “SAMBA19xUI.exe 1 57600” to launch SAMBA19xUI and to connect automatically to a controller on com port 1 using 57600 baudrate. The command line arguments structure regarding the com port number and baud rate has been modified up SAMBA19xUI RC02 V1.0.0.1. Com port could be set by “#CP” prefix and baud rate could be set by “#BR” prefix (example: call “SAMBA19xUI #CP 1 #BR 57600”). Furthermore the command line argument accepts SAMBA19xUI configuration files and SAMBA19xUI label files file. Figure 3.1.2: Connection with a controller. Description Overview The SAMBA19xUI like the old SAMBA_UI has a tabs structure the so called menus. Some tabs “main tabs” contains sub-tabs “sub-menus”. In this document the tabs are called pages. The appearance of some pages is dynamic. This means the containing control elements on the page is dependent on the firmware of the connected opticon. Note: SAMBA19xUI configuration files (*.samba19x_config) could be opened by drag and drop. Connect Page The “Connect” page allows you to connect or disconnect to a controller. Figure 4.1.1: Connect Page. Use “ Baud Rate ” combo box to adjust the baud rate. The default baud rate for all opticon controller is 57600. Use “ Connect ” button to establish the connection with the controller. Use “ Disconnect ” button to disconnect the communication. Use “ Terminate Comm Server and Connect ” button to close the Comm Server session, if one is already started and to connect with a new session. This option is recommended after a communication trouble. Use “ Update Comm Ports list ” button to refresh lists of the available com ports. Figure 4.1.2: Connect Page after a successful connection with controller. Context Menu Click the right mouse button to display the SAMBA19xUI context menu. Figure 4.2.1: Context Menu. About Click “ About ” menu item to display the about dialog. It contains info about the SAMBA19xUI version information and build date. Figure 4.2.2: About Window Refresh Timer A couple of status parameters are continuously refreshed from the controller through a timer event. Click “ Refresh Timer ” menu item to Start/Stop the timer. UI Options SAMBA19xUI contains control elements for new firmware features. New firmware version higher than 3.3.102 provides information about the new features. The info about the new features is included in parameter “ System Configuration Info ”. The SAMBA19xUI reads those info. Then it adjusts its control components regarding to the system configuration info. Click “ UI Options ” menu item to show the “ UI Setting ” window. Figure 4.2.3: UI Setting. Figure 4.2.4: UI Setting. The system configuration info could be modified manually. The modification applies only for the SAMBA19xUI but not for the connected firmware. Disable “ Load System Configuration from Controller ” check box to change the user interface setting manually. Enable “ Auto Loop Switch ” option when the firmware supports the automatic loop switching. Enable “ Non Linear Position Control ” option when the firmware supports the nonlinear position control feature. Enable “ Cascaded Position Control ” option when the firmware supports the cascaded position control feature. Enable “ Event Logging ” option when the firmware supports the event logging feature. Enable “ System Safety Routine ” option when the firmware supports the system safety feature. Enable “ EtherCat Support ” option when the firmware supports the EtherCat communication. Enable “ Pneumatic Ramp Support ” option when the firmware supports the Pneumatic Ramp Support. Enable “ Temperature Sensor Support ” option when the firmware supports the temperature sensor AD-Mapping. Enable “ Safety and Earth Quake Monitor Support ” option when the firmware supports this feature. Enable “ Extended ADC-Channels Support ” option when the firmware supports all existing AD-Channels signals. Enable “ Position and Pneumatic Individual Loop Status Support ” option if the firmware supports the position and pneumatic individual loop status. Enable “ Reference Metrology System Support ” option if the firmware supports the reference metrology system. Enable “ Polynomial System Support ” option if the firmware supports the polynomial system. Enable “ Offset Support for all Linear Motors ” option if the firmware supports the offset for all 12 linear motors. Remark : It is strongly recommended to enable the “ Load System Configuration from Controller ” option to load the system “Firmware” configuration from controller. This option should deactivated only for firmware version older than 3.3.103 which doesn’t contains system configuration info and they supports special features. Controller Page The controller page consists of a couple sub-pages “system setting page, AD/DA setting page and motor protection Page”. System Settings Page The “System Setting” page contains a global parameters setting. Figure 4.3.1: System Setting with EtherCat Support. Figure 4.3.2: System Setting without EtherCat Support. Loops Configuration Use “ Loops Configuration ” to configure the various control loops. Only configured control loops are processed in the firmware. The velocity loop is in the firmware fixed configured. Note : Configuring additional loops loads the processor, therefore please take care about the system load “processor load” by changing the loop configuration. System loop shouldn’t exceeds 80%. Control Item Description Shows whether the velocity feedback loop is configured or not. Toggles the configuration status of the position loop on/off. It also shows the configuration status of the position loop. Toggles the configuration status of the pneumatic loop on/off. It also shows the configuration status of the pneumatic loop. Toggles the configuration status of the whole standard feed forward subsystem “FF-Subsystem” on/off. It also shows the configuration status of the complete FF-Subsystem. Toggles the configuration status of the stage part of FF-Subsystem “SFF” on/off. This contains the first 4 feed forward control channels. It also shows the configuration status of the SFF-Subsystem. Toggles the configuration status of the floor part of FF-Subsystem “FFF” on/off. This contains the last 3 feed forward control channels. It also shows the configuration status of the FFF-Subsystem. Toggles the configuration status of the pneumatic FF-Subsystem “PFF”. It also shows the configuration status of the PFF-Subsystem. Table 4.3.1: Loop Configuration Control Items. Performance Monitor Setting Use “ Performance Monitor Setting ” to specifies the performance monitor signal and the configuration parameters. The actual performance status is shown here. Control Item Description Specifies the I/O-Signal “monitor signal” which should be monitored as performance indicator. Specifies the threshold for a good performance. Specifies the minimal trigger time. The monitor signal has to exceed the threshold value at least for this time to toggles the performance status to not okay. Specifies the hold time duration for the performance status “Not Okay”. Shows the actual performance status. Shows the counter of the trigger time and the countdown of the hold time. Table 4.3.2: Performance Monitor Setting Control Item. Switch Criterion Setting Use “ Switch Criterion Setting ” group box to configure the parameters for the automatic loop switching. If the criterion is fulfilled and the “ Loop Switch Setting ” “Auto” is active the velocity loop will be deactivated and the position loop activated for a specific time “ Hold Time ”. The “ Switch criterion Setting ” group box is optional (not always present) and firmware dependent. It is present only for firmware which supports the “ Auto Loop Switch ” routine. Control Item Description Specifies the I/O-Signal “monitor signal” which should be monitored for the automatic loop switching. Specifies the threshold for the monitor signal. Specifies the minimal trigger time. The monitor signal has to exceed the trigger level at least for this time to trigger the auto loop switching. Specifies the hold time duration for the loop switching. Shows the counter of the trigger time and the countdown of the hold time. Table 4.3.3: Switch Criterion Setting Control Items. Loop Switch Setting Figure 4.3.3: System Setting Page with comments. Control Item Description The above button specifies whether the velocity loop status is always running (doesn’t mean it is active). The below LED shows whether the velocity loop is active. The above button specifies whether the position loop status is always running (doesn’t mean it is active). The below LED shows whether the position loop is active. Toggles the automatic loop parameter on/off and it shows its status. If it is on then the velocity and the position always running status are off. Automatic loop on. When velocity loop and position loop always running (see the left above picture), it is not possible to switch off the position loop by its button. Clicking the position button leads to switch the position always running status but it doesn’t switch the position loop off (see left middle picture). Click auto button to activate the auto loop switch and also to switch the position loop off (see the left below picture). Table 4.3.4: Loop Switch Setting Control Items. Stage FF-Signals The stage FF-Signal group box contains some settings which belong the stage FF-Signal. Control Item Description Specifies whether the type of the stage FF-Signal is analogue or digital. This option is valid only for firmware version older than 3.2.29. This is an option for a special customer solution. It is valid only for firmware older than 3.2.x. Table 4.3.5: Stage FF-Signals Control Items. EtherCat Setting The “ EtherCat Setting ” group box is firmware dependent. It is present just for firmware with EtherCat support. Control Item Description This option leads to overwrite the stage FF-Signals through the FF-Signals, which are provided by the EtherCat master. When this option is on, then the motors values which are provided by the EtherCat master are added to the motor outputs. Table 4.3.6: EtherCat Setting Control Items. Ramp Setting Use the “ Ramp Setting ” to configure the behaviour of the linear motor at startup phase. Control Item Description Specifies the type of outputs ramp. Specifies the ramp time for the linear motors respectively for the velocity axes outputs. Table 4.3.7: Ramp Setting Control Items. Sample Frequency/System Load Here the controller sample frequency could be adjusted. Furthermore the processor load is displayed. Control Item Description Specifies the controller sample frequency value. Click this button to accept the modified sample frequency value. Take care about the system “processor” load before increasing the sample frequency. For a certain operation system load shouldn’t exceeds 80%. Shows the system load. Table 4.3.8: Sample Frequency/System Load Control Items. AD/DA Mapping Page The appearance of the AD/DA-Mapping page is firmware dependent. Use the “ AD/DA Mapping ” page to change the AD- and DA-Mapping of the input signals and output signals. Change “ Used ADC Num ” to change the number of the AD-Inputs which will be read by the firmware. Note : The value of input signals with AD-Mapping-Number equals to 44 are set to zero. Note : Reading additional AD-Inputs loads the processor “DSP” performance and could leads to crash the firmware. Therefore take care about the system load by increasing the used ADC-Number. For a certain operation system load shouldn’t exceeds 80%. Note : See appendix for the right AD-Mapping for the temperature sensors. Figure 4.3.4: AD/DA-Mapping Page with supporting off all physical inputs (AD-Converter-Channels). Figure 4.3.5: AD/DA-Mapping Page. Motor Protection Page Motor Threshold Setting Group Box Figure 4.3.6: Motor Protection Page. Figure 4.3.7: Motor Protection Page with Offset Support for all Linear Motors. Click “ Set Threshold ” to send the changed threshold values to controller. Click “ Set Offset ” to send the changed threshold values to controller. Motor Overheating Setting Motor Overheating Setting Control Item Description Specifies the smooth factor of the running averaging which is used to calculate the temperature respectively motor overcurrent values. Time period before reactivate the motors after an overheating case. Activate this option to use the motor temperature sensors instead the motor overcurrent values “modelled temperature” Activate to disable all motors in case of overheating of one motors. Table 4.3.9: Motor Overheating Setting Control Items. Status Page The “Status” main menu contains two sub menus (“ Status ” Page and “ Signals Display ” page). Status Page Figure 4.4.1: Status page. Figure 4.4.2: Status Page with position and pneumatic individual loop status. Signals Display Page Up to 16 signals values could be continue displayed in big font. The signals are adjustable (Controller IO-Signal “Inputs, outputs, loops axes value …etc”). Note : The event logging monitor signals are used here as IO-Signals. Changing these IO-Signals here will change automatically the event logging monitor signals and vice versa. Figure 4.4.3: Signals Display Page. Excitation Setting Control Item Description Specifies the IO-Signal which its value will be continue displayed. Saves the event logging configuration parameters, which contains the IO-Signals. Loads the event logging configuration parameters, which contains the IO-Signals. Table 4.4.1: Signals Display Control Items Velocity Page The “ Velocity ” main menu contains two sub menus (“ Tuning ” Page and “ Sensor/Motor Matrix ” page). Velocity Tuning Page Figure 4.5.1: Velocity Tuning Page Velocity Loop Filters Click on any filter button” ” to open the “ Filter Setting Dialog ” and to change its setting. Click “ Update ” button to accept the change for the clicked filter. Click “ Update for all Axes” button to accept the change for the clicked filter number for all axes. Change the “ Axis Limiter ” value to specify the velocity axis output limit. Excitation Use “ Excitation ” group box to configure an excitation signal and its injection point “signal”. Excitation Setting Control Item Description Click “ Accept Change ” button to accept the modification of the excitation setting and to send it to the controller. Specifies the excitation signal type. Specifies the excitation filters. Specifies the injection node “signal” of the excitation signal. Table 4.5.1: Excitation Control Items. Excitation Type Parameters White Noise “Gain [-1,+1]” the gain range [-1,+1] corresponds to [-32000, +32000 digits]. Sine Wave “Gain [-1,+1]” the gain range [-1,+1] corresponds to [-32000, +32000 digits]. Sine wave frequency in Hz. Duty Cycle “Gain [-1,+1]” the gain range [-1,+1] corresponds to [-32000, +32000 digits]. High Period in millisecond. During this period the signal amplitude equals the adjusted “Gain” Low Period in millisecond. During this period the signal amplitude is set to zero Chirp Sine “recursive” “Gain [-1,+1]” the gain range [-1,+1] corresponds to [-32000, +32000 digits]. Start “lowest” frequency of the chirp sine. End “Highest” frequency of the chirp sine. Time Period of the chirp sine in second. Table 4.5.2: Excitation Types and their Parameters. Diagnostic Signals Diagnostic Signals Control Item Description Specifies the IO-Signal which applies to the Diag0 BNC-Box on the controller front panel. Specifies the IO-Signal which applies to the Diag1 BNC-Box on the controller front panel. Table 4.5.3: Diagnostic Signals Control Items. Tuning Helping Hand Use the “ Tuning Helping Hand ” to simplify the configuration of the excitation injection point and diagnostic signals by measuring the frequency response function of the velocity loop axes. Tuning Helping Hand Control Item Description Specifies after which stage the axis will be measured. Click a button to specify the axis which will be measured. Table 4.5.4: Tuning Helping Hand Control Items. Sensor/Motor Matrix Use the “ Sensor/Motor Matrix ” page to configure “build” the velocity logical axes by changing inputs “sensors” respectively outputs “actuators” multipliers (6 degree of freedom). Figure 4.5.2: Velocity Sensor/Motor Matrix Page with 7 sensors. Figure 4.5.3: Velocity Sensor/Motor Matrix Page with 8 sensors. Position page The “ Position ” main menu contains four sub menus. Its appearance is firmware dependent. The axes number, the filters number as well as the number of the proximity offsets are firmware dependent. Tuning page The position “ Tuning ” page has a dynamic appearance. Its appearance depends on the running firmware of the opticon controller. It contains the position filter setting, proximity sensor offsets, excitation group box, and tuning helping hand group box. There is a field, which displays the actual proximity sensor input values and the position error relative to the offsets values. Furthermore it contains the cascaded position and nonlinear position control configuration parameters. The cascaded and nonlinear position control features are firmware dependent. They are not in standard features. Figure 4.6.1: Position Tuning Page Figure 4.6.2: Position Tuning Page (Firmware supports 10 position axes and 6 position filters and position individual loop status). Figure 4.6.3: Position Tuning Page with Nonlinear Position Control Support. Figure 4.6.4: Position Tuning Page with Cascaded Position Control Support Proximity Offsets The proximity offsets values are subtracted from the proximity inputs values to build the proximity without offset inputs. Proximity Offsets Control Item Description Specifies the offset value for the vertical proximity of isolator 1. Specifies the offset value for the vertical proximity of isolator 2. Specifies the offset value for the vertical proximity of isolator 3. Specifies the offset value for the vertical proximity of isolator 4. Specifies the offset value for the horizontal proximity of isolator 1. Specifies the offset value for the horizontal proximity of isolator 2. Specifies the offset value for the horizontal proximity of isolator 3. Specifies the offset value for the horizontal proximity of isolator 4. Table 4.6.1: Proximity Offsets Control Items. Excitation/Diagnostic See sections 4.5.1.2 and 4.5.1.3. Cascaded Position Setting The cascaded position control is firmware dependent. It is supported only in special firmware versions. The cascaded position control is used to get more position stability and accuracy. The vertical position is controlled by a cascaded control loop. The cascaded control loop consists of two control loops one is the position loop and the other is the pneumatic loop. Only the first 3 position axes are used. The cascaded control Cascaded Position Setting Control Item Description Specifies the hysteresis value for switching between cascaded and normal position control. Specifies the pre-filter between the position loop and pneumatic loop. Table 4.6.2: Cascaded Position Setting Control Items. Nonlinear Position Setting The nonlinear position is firmware dependent. It is supported only in special firmware versions. It is applies for the first three position loop axes. The nonlinear position supports the pneumatic loop to stabilize the payload position by low frequency systems with nonlinear floatation behaviour. Nonlinear Position Setting Control Item Description Specifies the operation type of the nonlinear position control. AtOutput: the position axes output are used to switch nonlinear on/off. AtOutput: the position axes input are used to switch nonlinear on/off. None: nonlinear position control off. Activates resetting the position filters by toggling the nonlinear position control. Specifies the position window where the nonlinear position control is switched off. Specifies the position window where the nonlinear position control is switched on. Table 4.6.3: Nonlinear Position Control Items. Tuning Helping Hand Use the “ Tuning Helping Hand ” to simplify the configuration of the excitation injection point and diagnostic signals by measuring the frequency response function of the position loop axes. Tuning Helping Hand Control Item Description Specifies after which stage the axis will be measured. Click a button to specify the axis which will be measured. Table 4.6.4: Position Tuning Helping Hand Control Items. Sensor Matrix Page Figure 4.6.5: Sensor Matrix Page with 6 axes. Figure 4.6.6: Sensor Matrix Page with 8 axes. Use “ Sensor Matrix ” to specifies the inputs “devices” used by the position loop and their multipliers. Motor Matrix Page Figure 4.6.7: Motor Matrix Page with 6 axes. Figure 4.6.8: Motor Matrix Page with 8 axes. Use “ Motor Matrix ” to specifies the outputs “devices” used by the position loop and their multipliers. Proxy Adjustment Page The “Proxy Adjustment” page is displaying the proximity sensors values in a big font. It is intended to help adjusting the proximity sensors by manufacturing the systems. Figure 4.6.9: Proximity Adjustment Page. Pneumatic Page The “ Pneumatic ” page contains just one submenu “ Tuning Page ”. Its appearance depends on the running firmware. The number of valve outputs and the inputs number are firmware dependent. Furthermore the payload floatation setting depends on the firmware. Pneumatic Tuning page Figure 4.7.1: Pneumatic Tuning Page Figure 4.7.2: Pneumatic Tuning Page with 8 inputs, 8 outputs and pneumatic ramp. Figure 4.7.3: Pneumatic Tuning Page with 8 inputs, 8 outputs and pneumatic ramp. Use “ Sensor Matrix ” and “ Valve Matrix ” to configure the pneumatic logical axes (the vertical 3 degrees of freedom “Ztrans, Xrot and Yrot). Use “ Pneumatic Filter ” group box to change the axes filter settings by clicking on the filter button. Use “ Valve Offset ” group box to specify resp. modify the Up- and Down-Offset values. Change “ Isolator Offsets ” values to change the isolator floatation heights separately “isolator wise”. Control Item Description Click this button to drive the system up “floatation”. Click this button to drive the system down “deflating”. Click this button to accept the actual valve outputs as valve up-offsets. Click this button to accept the actual valve outputs as valve down-offsets. Toggles the pneumatic loop status On/Off. Toggles “ Use the setpoint for all axes ” option on/off. Toggles the valve dithering on/off. Toggles the move system up after startup “controller power cycle” On/Off. Table 4.7.1: Pneumatic Loop common Control Items. Floatation Config Use “ Floatation Config ” group box to configure the system floatation settings. Floatation Config Control Item Description Specifies the value which will be added to the initial proximity value to build the reference height “RefPoint” for down state. Specifies the set point “floatation height” for the payload. Specifies the position error tolerance value. Table 4.7.2: Floatation Config Control Items. Dithering Config Use “ Dithering Config ” group box to configure the dither signal, which is added to the valve output. The dither signal is a sine wave signal with adjustable amplitude “Amount” and frequency. Dithering Config Control Item Description Specifies the amplitude value of the dither sine wave signal. Specifies the frequency value of the dither sine wave signal. Specifies the learning constant for the dither compensation adaptive filter “Alpha” could be specified. Table 4.7.3: Dither Config Control Items. Pneumatic Ramp Setting Use “Pneumatic Ramp Setting” to specify the value of the pneumatic ramp parameter. Pneumatic Ramp Setting Control Item Description Specifies the running average smooth factor used to calculate the isolator’s height from of the proximity values. Specifies the gradient value for the reference point “RefPoint” by moving the system up. Specifies the gradient value for the reference point “RefPoint” by moving the system down. This is the time period to drive the valve output from Down-Offset to Up-Offset values. Table 4.7.4: Pneumatic Ramp Setting Control Items. Feed Forward Page The “ Feed Forward ” page contains two subpages “ FF Tuning, FF Gains ”. FF Tuning Page The “ FF Tuning ” page contains nearly all configuration “tuning” parameters for the standard feed forward control channels. Figure 4.8.1: FF Tuning Page. FF Global Setting Control Item Description Specifies the reference input signal of the FF-Channel. Specifies the adaptive “learning” constant of the “LMS-Algorithm” for the FF-Channel. Toggles the FF-Channel-Output for the corresponding axis On/Off. . Those are the reference filters. They are associated to the FF-Channel. They are used to pre-filter the input signals. Click on the filter button to change its setting. Those are the secondary filters. They are associated to the FF-Channel. They are used to pre-filter the input signal used by the LMS-Algorithm. Click on the filter button to change its setting. Those are the error filters. They are associated to the velocity axes. They are used to pre-filter the velocity axis. Table 4.8.1: FF Global Setting Control Items. Stage Signal Multipliers Use “ Stage Signal Multipliers ” group box to adjust the stage signals multipliers. The multipliers manipulate the stage signals levels and also the tuning of the stage FF-Subsystem. Stage Signal Multipliers Control Item Description Specifies the multiplier value of the stage signal XPos. Specifies the multiplier value of the stage signal XAcc. Specifies the multiplier value of the stage signal YPos. Specifies the multiplier value of the stage signal YAcc. Table 4.8.2: Stage Signal Multipliers Control Items. Stage Signal Offsets Use “ Stage Signal Offsets ” group box to configure the offset values for stage position signals. The offsets values influence the stage signal level of the stage position signals and also the calculated stage FF-Signals “ZrXacc and ZrYacc”. Stage Signal Offsets Control Item Description Specifies the offset value of the stage signal XPos. Specifies the offset value of the stage signal YPos. Table 4.8.3: Stage Signal Offset Control Items. Stage Signal Maximums Use “ Stage Signal Maximums ” group box to configure the max values for the stage position signals. The maxima values the calculated stage FF-Signals “ZrXacc and ZrYacc”. Stage Signal Maximums Control Item Description Specifies the maximum value of the stage signal XPos. Specifies the maximum value of the stage signal YPos. Table 4.8.4: Stage Signal Maxima Control Items. Threshold/Gains Number Use “ Threshold/Gains Number” group box to adjust the FF-Output threshold value and the used gains number and to toggles the FF-Subsystem, the adaptive status and using the raw axis input on/off. Threshold/Gains Number Control Item Description Specifies the maximum value for axis output part coming from the FF-Subsystem. Specifies the gains “coefficients” number of all FIR-Filters. Toggles the FF-Subsystem On/Off. Toggles the FIR-Coefficients adaption On/Off. This options specifies whether the velocity axis raw input or the filtered velocity axis signal after is used as error signal. Table 4.8.5: Threshold/Gains Num Control Items. FF Gains Page On the FF Gains the user is able to edit respectively modify the FIR-Filter gains “coefficients” manually. Click the respective “ Source ” button to access the gains of its FF-Channel. Table 4.8.6: FF Gains Page. Pneumatic FF Page The “ Pneumatic FF ” page contains two subpages “ PFF Tuning, PFF Gains ”. PFF Tuning Page The “ PFF Tuning ” page contains nearly all configuration “tuning” parameters for the pneumatic feed forward control channels. Figure 4.9.1: PFF Tuning Page. PFF Global Setting Control Item Description Specifies the reference input signal of the pneumatic feed forward channel “PFF-Channel”. Specifies the adaptive “learning” constant of the “LMS-Algorithm” for the PFF-Channel. Toggles the PFF-Channel-Output for the corresponding pneumatic axis On/Off. Those are the reference filters. They are associated to the PFF-Channel. They are used to pre-filter the input signals. Click on the filter button to change its setting. Those are the secondary filters. They are associated to the PFF-Channel. They are used to pre-filter the input signal used by the LMS-Algorithm. Click on the filter button to change its setting. Those are the error filters. They are associated to pneumatic axes. They are used to pre-filter the pneumatic axis. Table 4.9.1: PFF Global Setting Control Items. Threshold/Gains Number Threshold/Gains Number Control Item Description Specifies the maximum value for pneumatic axis output part coming from the PFF-Subsystem. Specifies the gains “coefficients” number of all FIR-Filters. Toggles the PFF-Subsystem On/Off. Toggles the FIR-Coefficients adaption On/Off. Table 4.9.2: Threshold/Gains number Control Items. PFF Gains Page On the “PFF Gains” page the user is able to show respectively modify the FIR-Filter gains “coefficients” manually. Click the respective “ Source ” button to access gains of its PFF-Channels. Figure 4.9.2: PFF Gains Page. Save/Load Setup The “ Save/Load Setup ” page contains only one subpage “ Save/Load ”. Figure 4.10.1: Save/Load Page Save/Load/Clear NVRAM Control Item Description Click this button to save the actual parameters setting into the NVRAM. Click this button to load the parameters setting from the NVRAM. Click this button to clear the already saved parameters setting from NVRAM. Click this button to save the actual parameters setting to a setup “xml” file. Click this button to load the actual parameters setting from a setup “xml” file. This action doesn’t mean the loaded parameters are saved automatically into NVRAM. If this is desired then click the corresponding button . Toggles the NVRAM-Protection On/Off. By active NVRAM-Protection both button clear NVRAM and save into NVRAM are disabled. Table 4.10.1: Save/Load/Clear NVRAM Control Items. Save/Load File Control Item Description Click this button to save the actual parameters setting to a setup “xml” file. Click this button to load the actual parameters setting from a setup “xml” file. This action doesn’t mean the loaded parameters are saved automatically into NVRAM. If this is desired then click the corresponding button . Table 4.10.2: Save/Load File. NVRAM Areas Check Sum Information. Note : The NVRAM check sum information are not automatically loaded from the controller by activating the save/Load-Page like by the old SAMBA_UI. Furthermore the check sum numbers are not build automatically by saving into NVRAM like the old SAMBA_UI. Control Item Description Shows the saved and the actual check sum numbers of the various NVRAM areas (monitor, firmware and configuration). Calculate the NVRAM areas check sum numbers and save them into NVRAM. Read the saved check sum numbers. Table 4.10.2: Save/Load File. Set/Generate Label File The label file contains labels for the user interface control items like the labels for the velocity loop inputs and outputs, input signals names, physical signals names (ADC-Signals) … etc. It influences the appearance of the user interface. If there is no label file specified the SAMBA19x_UI uses the hard coded default labels. Control Item Description Shows the actual adjusted label file. Click this button to generate a default label file. Click this button to reset the labels to the default labels. (Modification requires restart ofSAMBA19x_UI). Click this button to set the labels to specific label file. (Modification requires restart ofSAMBA19x_UI). Table 4.10.3: Set/Generate Label File Note : By changing the label file a SAMBA19xUI restart is required to enable the new labels. Special Page The special page is firmware dependent. It could be empty or it could has many pages which are containing a customized features. Safety Page The safety page contains the setting for the safety routine “performance routine” and earth quake detection routine. The safety routine could be called a performance monitoring routine, because it monitor the performance of the system regarding to its vibration and position. Figure 4.11.1: Safety Page. The safety routine uses the “root mean square” RMS-Values of the geophone and proximity sensors to detect a safety respectively performance mal function. The earth quake routine uses the RMS-Values of the floor geophone sensors, which are placed on the ground, to detect an earth quake. Safety and Earth Quake Status Control Item Description Shows the vibration status ok or not ok. Shows the vibration status ok or not ok. Shows if an earth quake has been detected or not. Table 4.11.1: Safety and Earth Quake Status. Safety Setting Safety Setting Control Item Description Geophone Limit Specifies the limit value for the geophone sensor RMS-Values, which shouldn’t be exceeded. Otherwise the vibration status becomes not okay. Proximity Limit Specifies the limit value for the proximity sensor RMS-Values, which shouldn’t be exceeded. Otherwise the position status becomes not okay. RMS Time Window Specifies the time period for the safety RMS-Values. Table 4.11.2: Safety Setting Control Items. Earth Quake Setting Earth Quake Setting Control Item Description Geophone Limit Specifies the limit value for the floor geophone sensor RMS-Values, which shouldn’t be exceeded. Otherwise the earth quake status becomes on. RMS Time Window Specifies the time period for the earth quake RMS-Values. Table 4.11.3: Earth Quake Setting Control Items. System Safety Page The system safety page contains the configuration data of the performance monitoring system. The vibration of velocity loop axes and the position of the position loop axes are monitored. For each velocity and position loop axis there is an adjustable threshold value. By the vibration monitoring the root mean square values of the velocity axes raw inputs about 1 seconds are built. By the position monitoring the position axes values after last filter are used. The vibration status is Ok when all RMS-Values of the velocity axes are below their threshold values. Otherwise it is not ok. The position status is Ok when all values of the position axes are below their threshold values. Otherwise it is not ok. Figure 4.11.2: System safety Page. Not all Firmware supports getting the position loop axes actual values. By such a firmware the safety system looks like the below figure. Figure 4.11.3: System safety without position axes values. Polynomial Page The polynomial page contains the configuration data of the polynomial system. Figure 4.11.4: Polynomial Page Polynomial Configuration Earth Quake Setting Control Item Description Toggles the polynomial processing status and overall active status on off. Saves the current polynomial configurations to a file. Loads an already saved polynomial configuration from file. Specifies the input signal of a specific polynomial. Specifies the output signal of a specific polynomial. Displays the current value of the input signal of a specific polynomial. Displays the current value of the output signal of a specific polynomial. Specifies the first coefficient value of a specific polynomial. Specifies the second coefficient value of a specific polynomial. Specifies the third coefficient value of a specific polynomial. Specifies the limiter value for a specific polynomial. Toggles a specific polynomial on/off. Table 4.11.4: Polynomial Setting Control Items. Troubleshooting Can’t run SAMBA19xUI Ensure that the .Net framework 4.5.2 or higher is installed. Run the SAMBA19xUI as administrator. No Communication. Check if the controller is powered on and the monitor LED is blinking. Check if either a USB cable or a serial cable connects the controller with the PC. Check if the used com port is selected by the “Communication Server ” Use “ Terminate Comm Server and Connect ” button to establish the connection. SAMBA19xUI hangs up during connecting to controller By a communication failure with the controller and disconnecting, the communication server could hang up. When one try to reconnect to the controller using the “ Connect ” button the SAMBA19xUI hangs up. Solution: Terminate the SAMB19xUI using the task manager. Restart SAMBA19xUI and connect to the controller using “ Terminate Comm Server and Connect ”. SAMBA19xUI doesn’t refresh the status parameters from controller The SAMBA19xUI is connected to controller but it doesn’t refresh the status parameters like the loop status, individual loop status, pneumatic floating status parameters and position values. Solution: Enable the refresh timer from the context menu. Sometimes you have to do it twice to enable. SAMBA19xUI doesn’t start or it rises with and error message If the SAMBA19xUI doesn’t start. Solution: Start SAMBA19xUI with administrator privileges. Ensure the required .Net framework is installed. If a failure occurs that cannot be solved, contact our technical support. Phone: +49 (0) 6142 94000 Known Bugs and Problems The following section lists the currently known bugs. These bugs will be resolved in future versions of the software. Description Date Version Status Solved When the application runs for a rather long time “days”, it might happen that the communication with the controller stops. 1.9.0.4 Bug, open No SAMBA19xUI version 1.9.0.4 is not able to communicate with firmware version older 3.3.0. (It is still not recommended to use the SAMBA19xUI for firmware older 3.3.0). 1.9.0.4 Known issue Solved in 1.9.0.5 During loading all parameters from the controller by saving the actual parameters to xml file. The loading status window freezes after loading a couple of parameters. Work around: Wait until loading all parameters from controller is finished and go on with saving to the xml file. 1.9.0.4 Known Issue No Note: For more Information about software bugs and issues see the SAMBA19x “Software Revision History.pdf”. Appendix Temperature Sensors AD-Mapping Sensor ADC Channel Number Standard Opticon 19 Zoll front panel Opticon OutX1Temp 44 44 OutY1Temp 26 28 OutZ1Temp 27 29 OutX2Temp 28 30 OutY2Temp 44 44 OutZ2Temp 29 31 OutX3Temp 44 44 OutY3Temp 30 32 OutZ3Temp 31 33 OutX4Temp 32 34 OutY4Temp 44 44 OutZ4Temp 33 35 Table 7.1.1: AD-Mapping for the temperature sensors."
  },
  "GuiUserManuals/idefigureviewer/IDEFigureViewerUserManual.html": {
    "href": "GuiUserManuals/idefigureviewer/IDEFigureViewerUserManual.html",
    "title": "Contents | SAMBA19x Website",
    "keywords": "AUTHOR(S): Moneer Shatat-Herres REVISION: 00 DATE OF PRINT: December 12, 2017 DOCUMENT CHANGE & HISTORY RECORD Name Last Update Status Version Comment MSHAT 12.12.2017 Draft 00 Modification related to IDEFigureViewer RC02 1.0.0.0 Contents IDEFigureViewer User Manual 1 1 Contents 3 2 Introduction 4 2.1 Language 4 2.2 Introduction 4 2.3 Intended Audience 4 2.4 Requirements 4 2.5 Contact 4 2.6 INSTALLATION 5 3 Getting Started 6 3.1 Start-Up 6 4 Description 7 4.1 Control Panel 7 4.1.1 Control Buttons Toolbar 7 4.1.2 How to open file 8 4.1.3 Plot context menu 9 4.1.4 Plot Operations 11 4.1.5 Plot Properties Dialog 12 5 idefigure mat files structure 14 5.1 .idefigure matlab structure Description 14 6 Troubleshooting 17 6.1 Can't run IDEFigureViewer 17 7 Known Bugs and Problems 18 Figure 4.1.1: Control Panel Overview. 7 Figure 4.1.2: Open idefigure. 9 Figure 4.1.3: plot menu enabled. 10 Figure 4.1.4: Plot Context Menu. 10 Figure 4.1.7: Plot property window. 13 Table 4.1.1: Control buttons bar 8 Table 4.1.2: Plot Context Menu Items. 11 Table 4.1.4: Plot operation key shortcuts. 12 Table 4.1.6: Plot Property Window Control Items. 12 Table 5.1.1: IDEFigure matlab structure. 15 Table 5.1.2: Serie matlab structure. 15 Table 5.1.3: Annotation matlab Structure. 16 Introduction The IDEFigureViewer tool has been built to visualize the *.idefigure files. The idefigure file are plot-files generated by the various SAMBA19x applications (Sidimat19x, Sidimat19xA, View3D19x and LoggingTool). Furthermore it allows modifying the plots and then to save it. Language This manual is originally written in English language. Overview This document describes how to use the IDEFigureViewer tool, open and modify an idefigure plot file. Intended Audience The software and this document is intended for users of an IDE vibration isolation system. Requirements In order to run this software, the following requirements must be met: Windows 7®, Windows 8®, or later version. Personal computer with x86- or x64-based microprocessor 2.8 GHz or higher and 4GB RAM or higher are recommended. SVGA-resolution with a minimum of 1600x900 pixel and 16-Bits high colors. Mouse or compatible pointing device Microsoft .Net Frame work 4.5.2 or higher. Contact Integrated Dynamics Engineering GmbH Hermannstrasse 9-13 65479 Raunheim, GERMANY Phone: +49 (0)6142 9400-0 INSTALLATION Copy the installation package from the CD to your PC. Read the SAMBA19x Installation Guide document. Getting Started Your already installed the lastest SAMBA19x version and your PC meets the reguirements above Start the IDEFigureViewer program with a right-click on the IDEFigureViewer desktop shortcut and select Run as Admin. Alternative you could start it from the window start menu. {width=\"5.114583333333333in\" height=\"5.395833333333333in\"} Start-Up [!NOTE] Idefigure files could be opened by drag and drop the file or by using the open file toolbar button. Description The IDEFigureViewer tools basically consists of two main panels \"Control buttons toolbar and Graphs panel\". The control panel contains settings and the graphs panel displays the plots of the measured signal. (See figure 4.1.1) Control Panel The control panel contains on the top a control buttons and a few setting tabs \"Connection, Graphs, Excitation, Trace Setting ...etc\". {width=\"6.299305555555556in\" height=\"4.426388888888889in\"} []{#_Toc500853184 .anchor}Figure 4.1.1: Control Panel Overview. Control Buttons Toolbar {width=\"2.7916666666666665in\" height=\"0.3541666666666667in\"} The control buttons bar consists of a few buttons to save, open idefigure file and to modify plots. Control Item Description . Auto rescales all plots. . Opens an idefigure file. . Saves the opened idefigure file. . Copies graph panel to clipboard. . Saves the graph panel to jpg file. . Toggles the grid of all plots on/off. . Toggles the plot context menu on/off. . Opens this user manual. []{#_Toc500853189 .anchor}Table 4.1.1: Control buttons bar How to open file There are three way to open an idefigure with the IDEFigureViewer: By drag and drop the idefigure file on the IDEFigureViewer desktop symbol \"link\". This will start the IDEFigureViewer and open the dropped file. Using the \"open ifefigure file\" toolbar button (see table above). By drag and drop a file on an already started IDEFigureViewer window. When a file is successful opened then its path appears in the title bar. {width=\"6.299305555555556in\" height=\"4.426388888888889in\"} []{#_Toc500853185 .anchor}Figure 4.1.2: Open idefigure. Plot context menu The context menu is disabled by default. To enable it toggles the plot context menu button from toolbar on. {width=\"6.299305555555556in\" height=\"4.09375in\"} []{#_Toc500853186 .anchor}Figure 4.1.3: plot menu enabled. {width=\"6.291666666666667in\" height=\"4.427083333333333in\"} []{#_Toc500853187 .anchor}Figure 4.1.4: Plot Context Menu. Context Menu Item Description Manipulate Curves Allows modifying a curve by using a polynomial equation first order. Curves Toggles displaying the curves on/off. Delete curve Deletes a curve. Add marker Adds a new point marker to a curve. Add line marker Adds a new line marker t a curve. Delete markers Deletes all markers of the plot. Add Curve from CSV Adds a curve from a csv file to the plot. The CSV consists of two column separated by space, semicolon or comma. Legend Toggles displaying the legned of the plot on/off. Rescale Rescales the plot. []{#_Toc461179551 .anchor}Table 4.1.2: Plot Context Menu Items. Plot Operations The next table contains some plots operations key shortcuts. Note : The mouse right button operations in the next table are enabled only when the plot context menu is disabled. Control Item Key shortcut Add marker Left shift key+ left mouse button double click. Select/deselect marker Left shift key + left mouse button click. Delete selected marker Del key. Move selected marker Left shift key+ left/right arrow key. Move marker Left mouse down + mouse move Plot panning Right mouse down + mouse move Zooming Mouse wheel. Zoom out Ctrl key + right mouse button double click. Zoom selected plot area Ctrl key + right mouse button down + mouse move. Open plot properties dialog Left mouse button double click. []{#_Toc461179553 .anchor}Table 4.1.4: Plot operation key shortcuts. Plot Properties Dialog The plot property dialog allows the user to modify the plot properties of the selected plot or all plots. Control Item Description . Changes the figure title and its font size. . Changes plot title and its font size. . Toggles the legend on/off. . Toggles grid on/off. . Toggles accepting the changes for all figure plots on/off. . Axis label. . Axis scale minimum. . Axis scale maximum. . Axis grid minor step. . Axis grid major step. . Axis font size. . Axis scale type. []{#_Toc500853192 .anchor}Table 4.1.6: Plot Property Window Control Items. {width=\"4.166666666666667in\" height=\"3.125in\"} []{#_Toc500853188 .anchor}Figure 4.1.7: Plot property window. idefigure mat files structure The IDEFigures (*.sidimat19x are saved in matlab format. .idefigure matlab structure Description IDEFigure consist of MxN Graph-Matrix (Plot-Matrix, Model-Matrix) where M is the RowNumber and N is the ColumnNumber of the iDEFigure. Graph-Matrix Structure by 3x3 Graph-Matrix: Model0 Model1 Model2 Model3 Model4 Model5 Model6 Model7 Model8 xx=load(\\\"xrot\\_raw\\_frf\\_ol\\_m.idefigure\\\") xx = //IDEFigure structure scalar structure containing the fields: MeasurementType = IdeFigure //this is the measurement type Version = 1 // IDEFigure Structure version FigureTitle = //this is title of the figure FigureTitleFontSize = 14 //font size of the figure title RowNumber = 3 //Row numbers in figure ColumnNumber = 1 //column number in figure, the graph number Model0 = // Graph-Structure, first graph in the 3x1 Graph-Matrix scalar structure containing the fields: Version = 1 // Graph structure Version Title = //Title of the Graph LogX = 1 //Logarithmic x-axis (1: logarithmic, 0:linear) LogY = 0 //Logarithmic x-axis (1: logarithmic, 0:linear) Grid = on //Grid status (on,off) Legend = 1 //Legend status (0,1) Xaxis = //x-axis structure scalar structure containing the fields: Version: 1x1 scalar //Version of the axis structure Title: 0x0 sq\\_string //Label of the x-axis TitleFontSize: 1x1 scalar //title font size Prop: 1x4 matrix //Axis Scale Properties containing Scale {min max minorstep majorstep} Yaxis = //Y-axis structure (see x-axis) scalar structure containing the fields: Version: 1x1 scalar Title: 1x14 sq\\_string TitleFontSize: 1x1 scalar Prop: 1x4 matrix Annotations = //Annotation structure scalar structure containing the fields: Version: 1x1 scalar // Annotations structure Version Annotation0: 1x1 scalar struct //Annotation structure Annotation1: 1x1 scalar struct //Annotation structure Annotation2: 1x1 scalar struct //Annotation structure Series = //Series \"Curves\" structure scalar structure containing the fields: Serie1: 1x1 scalar struct //Serie \"Curve\" structure Model1 = []{#_Toc461179563 .anchor}Table 5.1.1: IDEFigure matlab structure. xx.Model0.Series.Serie1 ans = scalar structure containing the fields: Title = Vel Xrot Raw/Excitation //Serie Title Serie = //2 dimensional array containing the (x,y) pairs. Columns 1 through 9: 0.00000 0.24000 0.48000 0.72000 0.96000 1.20000 1.44000 1.68000 1.92000 -47.01777 -19.74275 -27.61559 -13.96998 -4.44243 -1.02031 -1.81286 -3.54399 4.22259 Columns 10 through 18: 2.16000 2.40000 2.64000 2.88000 3.12000 3.36000 3.60000 3.84000 4.08000 8.07258 16.54702 19.15587 19.87028 20.90579 21.40222 22.44204 20.61854 17.68427 Columns 19 through 27: 4.32000 4.56000 4.80000 5.04000 5.28000 5.52000 5.76000 6.00000 6.24000 15.69454 14.56121 13.44503 12.86091 12.07755 11.50960 10.28915 9.97069 9.78908 Columns 28 through 36: 6.48000 6.72000 6.96000 7.20000 7.44000 7.68000 7.92000 8.16000 8.40000 8.78665 8.44608 8.06616 7.70098 7.56921 7.34422 6.54481 6.27385 5.96678 []{#_Toc461179564 .anchor}Table 5.1.2: Serie matlab structure. xx.Model0.Annotations ans = scalar structure containing the fields: Version = 1 //Structure Version Annotation0 = scalar structure containing the fields: Type = Point //Annotation type Position = //Annotation Position in graph 3.6000 22.4420 //Annotation Text to display Text = X:3.6 Y:22.442 []{#_Toc461179565 .anchor}Table 5.1.3: Annotation matlab Structure. Troubleshooting Can't run IDEFigureViewer Ensure that the .Net framework 4.5.2 or higher is installed. If a failure occurs that cannot be solved, contact our technical support. Phone: +49 (0) 6142 94000 Known Bugs and Problems The following section lists the currently known bugs. These bugs will be resolved in future versions of the software. Description Date Version Status Solved x x x x x"
  },
  "firmware/fw_doc.html": {
    "href": "firmware/fw_doc.html",
    "title": "Common Info | SAMBA19x Website",
    "keywords": "Active Vibration Isolation Systems Firmware Functionality and Parameter Description AUTHOR(S): REVISION: 1.0 DATE: August 2, 2017 Common Info Document Revision Information: Revision Date Author Description Revision 1.0 01.12.2016 MSHAT First revision Definitions Controller This is a digital control unit equipped with a DSP “Digital Signal Processor”. It controls the AVIS. Firmware This is the software running on the controller in the normal mode. The firmware contains all the control algorithms and performance and safety procedure to provide the AVIS. Normal mode This is a controller operation mode when the firmware of the active vibration isolation system is running Monitor mode This is a controller operation mode when the monitor program is running. This mode is intended to update the firmware. Monitor program “Firmware loader” This is the software running on the controller in monitor operation mode to update the firmware. Proximity Displacement sensor Geophone Velocity sensor Velocity loop This is the control loop to cancel the vibration. The geophones are used as a Feedback signal. Pneumatic Loop This is the control loop to get the system payload to its operation position in case of pneumatic systems. The proximities are here used as a feedback signal. Position loop This is the control loop to keep the position of the payload quite. The proximities are used as a feedback signals. Reference Documents Document Name Discription Remote Command Interface description This contains an overview about the RCI-commands. Digital filter in TC standard firmware This document describes the digital filters implemented in the firmware. SAMBA19xUI User Interface Manual User manual for the SAMBA19xUI User Interface. C67monitor tool user manual This document contains a description of the monitor tool to upload the firmware on the opticon controller. Opticon_Digital_IO_Specification This document describes the functionality and specification of the opticon digital I/O Interface. Abbreviations Firmware The running program on the embedded controller. This can be in binary or hexadecimal format. This program controls the IDE Systems. AVIS Active Vibration Isolation System IIR2-Filter Infinite Impulse Response filter second order Xtrans “Xt” The translation X-Axis of the 6 degrees of freedom Ytrans “Yt” The translation Y-Axis of the 6 degrees of freedom Ztrans “Zt” The translation Z-Axis of the 6 degrees of freedom Xrot “Xr” The rotation X-Axis of the 6 degrees of freedom Yrot “Yr” The rotation Y-Axis of the 6 degrees of freedom Zrot “Zr” The rotation Z-Axis of the 6 degrees of freedom X1FB The geophone input signal of Isolator #1 in the X-direction Y1FB The geophone input signal of Isolator #1 in the Y-direction Z1FB The geophone input signal of Isolator #1 in the Z-direction X2FB The geophone input signal of Isolator #2 in the X-direction Y2FB The geophone input signal of Isolator #2 in the Y-direction Z2FB The geophone input signal of Isolator #2 in the Z-direction X3FB The geophone input signal of Isolator #3 in the X-direction Y3FB The geophone input signal of Isolator #3 in the Y-direction Z3FB The geophone input signal of Isolator #3 in the Z-direction X4FB The geophone input signal of Isolator #4 in the X-direction Y4FB The geophone input signal of Isolator #4 in the Y-direction Z4FB The geophone input signal of Isolator #4 in the Z-direction Z1prox The vertical proximity sensor input signal of Isolator #1 Z2prox The vertical proximity sensor input signal of Isolator #2 Z3prox The vertical proximity sensor input signal of Isolator #3 H1prox The horizontal proximity sensor input signal off Isolator #1 H2prox The horizontal proximity sensor input signal off Isolator #2 H3prox The horizontal proximity sensor input signal off Isolator #3 X1Out The linear motor of Isolator #1 in the X-direction Y1Out The linear motor of Isolator #1 in the Y-direction Z1Out The linear motor of Isolator #1 in the Z-direction X2Out The linear motor of Isolator #2 in the X-direction Y2Out The linear motor of Isolator #2 in the Y-direction Z2Out The linear motor of Isolator #2 in the Z-direction X3Out The linear motor of Isolator #3 in the X-direction Y3Out The linear motor of Isolator #3 in the Y-direction Z3Out The linear motor of Isolator #3 in the Z-direction X4Out The linear motor of Isolator #4 in the X-direction Y4Out The linear motor of Isolator #4 in the Y-direction Z4Out The linear motor of Isolator #4 in the Z-direction IIR2-Filter Infinite Impulse Response filter second order Firmware Versions conforming to this document Firmware name Version Description C67_STD_FW3.3.121.hex 3.3.121 Special firmware for opticon controller. Table of Figures Figure 3.1: The principal design of the firmware used for the AVIS 8 Figure 4.1: Velocity loop flow chart 9 Figure 5.1: Position loop flow chart 13 Figure 6.1: Pneumatic loop flow chart 18 Figure 6.2: The pneumatic startup phase flow chart 21 Figure 6.3: Move up action flow chart. 22 Figure 6.4: Move down action flow chart. 22 Figure 7.1: Flow chart of FF control channel 27 Figure 8.1: Flow chart of FF control channel 33 Figure 9.1: Flowchart of the motor overcurrent routine 36 Figure 9.2: Flowchart of the motor overcurrent routine 37 Figure 10.1: Flowchart for the automatic loop switch 41 Figure 11.1: Excitation nodes of the velocity loop 42 Figure 11.2: Excitation nodes of the position loop 43 Figure 11.3: Excitation nodes of the pneumatic loop 43 Figure 12.1: Diagnostic nodes of the velocity loop 45 Figure 12.2: Diagnostic nodes of the position loop 46 Figure 12.3: Diagnostic nodes of the pneumatic loop 46 Figure 13.1: Flowchart of the input signals 48 Figure 14.1: Ramp driving flow diagram. 51 Table of tables Table 4.1: Loop status 12 Table 5.1: Position individual loop status bit-mask 16 Table 6.1: Vertical status “Payload vertical position status” 19 Table 6.2: Explanation of notions and variables. 20 Table 6.3: Pneumatic individual loop status bit-mask 24 Table 6.4: Parameters of the pneumatic loop 25 Table 7.1: Parameters used to calculate the additional stage input signals 30 Table 7.2: Various FF parameters 32 Table 8.1: Various pneumatic SFF parameters 35 Table 9.1: Parameters of the motor overcurrent routine 38 Table 10.1: Parameters of automatic loop switch 40 Table 11.1: Parameters of the noise excitation 44 Table 15.1: Monitor and Reset Keys functionality. 52 Table 15.2: Monitor and Reset LEDs functionality 52 Table 16.1: Amplifier digital signals. 53 Table 18.1: Digital input functionality description. 55 Table 18.2: Digital output functionality description. 55 Table 19.1: Various parameters 56 Table 19.2: Read-Only Parameters. 57 Introduction This document basically describes the structure and functionality of the firmware which is used for the IDE active vibration isolation systems “AVIS”. Furthermore it describes all parameters that are configurable and accessible by the remote command interface. The functionality and the effect of the parameters are in this document described. The firmware supports the remote commands interface “RCI” as an interface to a host PC. To change and configure all parameters the SAMBA19xUI user Interface version 1.9.0.7 or higher is needed. All configurable parameters are accessible through the remote command interface RCI (See Remote Command Interface description). Firmware Common Description The firmware is the software running on the embedded controller; in our case opticon-controller. This document is intended to describe the firmware running on the opticon controller. The firmware contains the implementation of the control algorithms of the various control loops, safety, failsafe, monitoring and diagnostic routine. Furthermore it contains the implementation of the remote command interface “RCI”. The RCI is the interface to communicate to the controller; it allows the user to access all firmware parameters, for more information about the RCI see the reference document Remote Command Interface description . The biggest differences of this firmware version to prior versions are: Introducing of the temperature sensor inputs. Introducing of a performance routine and earth quake detection routine. Introducing of the position and pneumatic individual loop status. Introducing of the power supply current limit. The following flow diagram shows the principal layout of the firmware containing the various control loops, noise generator and diagnostic tool and so on. Figure 3.1: The principal design of the firmware used for the AVIS Velocity Loop Velocity Loop Overview The velocity loop is the control loop using the geophone input signals as feedback signals. The velocity loop builds the 6 degrees of freedom of the AVIS (called ‘logical axes’) using the geophone signals and the sensor steering matrix or “input steering matrix”. The ‘sensor steering matrix’ assigns each sensor signal to the logical axes using its multiplier. The built logical axes are filtered through seven filter stages ‘IIR2-Filter’. The output of the seventh filter will be limited by FB-Limiter. In case of activated FF-subsystem the FF-Axes-Output are added to velocity logical axes. Furthermore in case of electro pneumatic loop and the dither compensation status is active then the dither compensation axes output will be added to the axes output. The logical axis then affects the corresponding motors by another matrix called motor steering matrix or “Output steering matrix”. The following flow chart describes the process of the velocity loop algorithm. Figure 4.1: Velocity loop flow chart The following equations describe the calculation of the logical axes. (1) (2) Whereas: : Logical axes raw input. : Axes output, this is the axes output after the summation point in the flow chart. : Velocity sensor vector (X1FB, Y1FB, Z1FB, X2FB, Z2FB, Y3FB, Z3FB and Z4FB). : Velocity motor vector (X1Out, Y1Out, Z1Out, … , X4Out, Y4Out, Z4Out). Velocity Loop Parameters Sensor Steering Matrix Coefficients (Logical Axis Input Multipliers) Equation #3 calculates the logical axis using the geophone signals (3) For each logical axis there are 7 coefficients (multipliers), one coefficient for each sensor. Changing the multiplier affects the behavior of the axis. For SAMBA-UI users the sensor steering matrix is located on the “ Velocity loop” sheet. For SAMBA19xUI users the sensor steering matrix is located on the “ Velocity, Velocity Matrix” sheet. The sensor steering matrix is adjustable through VSSMV and VGSMV RCI-Commands. Motor Steering Matrix Coefficients (Logical Axis Output Multipliers) Equation #4 calculates the logical axis (4) For each logical axis there are 12 coefficients “multipliers”, each multiplier corresponds to one motor output of the 12 motors. Changing the multiplier affects the corresponding motors output. For SAMBA-UI users the motor steering matrix is located on the “ Velocity loop” sheet. For SAMBA19xUI users the motor steering matrix is located on the “ Velocity, Velocity Matrix” sheet. The motor steering matrix is adjustable through VSMMV and VGMMV RCI-Commands. Stage Filter Parameter As mentioned above the velocity loop contains 42 filters “controllers” for filtering the signals of the 6 logical axes and to stabilize the velocity loop. Each axis will be filtered by 7 configurable filters. The used filters in the firmware are IIR2-Filters “Infinite Impulse Recursive second order”. There are 6 configurable parameters for each filter that the user can modify. The first parameter is the filters type and the other five are the configuration parameters related to this filter type. Not each filter type needs 5 configuration parameters, some filters have 3 parameters, others have only 2 parameters and others don’t have any configuration parameters. For more information about the filters and to know how to configure them see “ digital filter in TC standard firmware ”. This PDF file is included in the SAMBA package. For SAMBA-UI users the velocity loop filters could be configured on the “Velocity loop” sheet. For SAMBA19xUI users the velocity loop filters could be configured on the “Velocity, Velocity Filter” sheet. The stage filters of the velocity loop are configurable through VSVFS and VGVFS RCI-Commands. Individual Loop status The individual loop status is a velocity loop setting parameter to switch the logical axis separately on/off. Each bit of the first 6 bits of this parameter corresponds to a logical axis. Table 4.1: Loop status Bit Corresponding axis Bit1 Xtrans Bit2 Zrot Bit3 Ytrans Bit4 Ztrans Bit5 Yrot Bit6 Xrot For SAMBA UI users individual loop status could be found on the “Velocity loop” sheet. For SAMBA19xUI users individual loop status could be found on the “Velocity, Velocity Filter” or ”Status” sheet. The individual loop status could be set or get using BSSTS or BGSTS RCI-Command. FB-Limiter Each velocity axes has a limiter value. The output of the seventh stage will be limited by the limiter value. The limiter values are adjustable using the RCI-Commands BSFBL and BGFBL . For SAMBA UI users the FB-Limiter could be accessed on the “Velocity loop” sheet. For SAMBA19xUI users the FB-Limiter could be accessed on the “Velocity loop, Velocity Filter” sheet. Position Loop Parameters Position Loop Overview The position loop is a part of the firmware to control the position of AVIS. The input- and output-devices of the position loop are configurable, and they could be any sensor respectively actuator signal. The position loop in the firmware is optional and can be switched off. It is fixed implemented in the firmware but the firmware processes the position loop algorithm only if it is configured “enabled”. In the default setting the position loop is disabled. To use the position control loop to control the position of the payload the proximity-without-offset “ Prox1_NO , … , ProxH4_NO ” input signals should be configured as the input devices and the linear motors as output devices of the logical axes. The position loop works principal like the velocity loop. It contains input and output steering matrix to build the 6 degrees of freedom. The logical axes go through 6 digital filters “controllers”. The following figure show the principal design of the position loop implemented in the firmware. Figure 5.1: Position loop flow chart The position loop consists of 10 logical axes “FB-Loops”. The last two axes are realizing the control loops for the inclinometer control loop. Equations 5 und 6 describe the building of the 6 degrees of freedom “logical axis” for the position axis. (5) (6) Whereas: : Logical axes raw input. : Position axes output. It is equal to the logical axis after stage 3, when the position loop is on “active”. : Position sensor multiplier vector with 6 elements, the sensor signals are configurable. : Position actuator multiplier vector with 8 elements, the actuator signals are configurable. Position Loop Parameters Sensor steering Matrix Coefficients (Logical Axis Input Multipliers) The logical axis of the position loop will be calculated through equation 7. (7) For each position logical axis there are 6 sensor multipliers. Changing the sensor matrix coefficient influences the logical axis amount. For SAMBA-UI users the sensor steering matrix is located on the “ Position loop” sheet. For SAMBA19xUI users the sensor steering matrix is located on the “ Position, Sensor Matrix” sheet. The sensor matrix coefficients of the position loop are accessible through the Two RCI-Commands CSSMV and CGSMV . Motor Steering Matrix Coefficients (Logical Axis Output Multiplier) The following equation calculates the motor outputs from the position logical axis output. (8) For each logical axis there are 8 coefficients “multipliers”. Each multiplier corresponds to one actuator “output devices”. Changing the multiplier affects the corresponding actuator output. For SAMBA-UI users the sensor steering matrix is located on the “ Position loop” sheet. For SAMBA19xUI users the sensor steering matrix is located on the “ Position, Motor Matrix” sheet. The motor matrix coefficients of the position loop are accessible through the Two RCI-Commands CSMMV and CGMMV . Stage Filter Parameter The position loop contains 24 filters to filter and stabilize the 6 logical axes. Each axis is filtered through 4 filters. The filters are configurable. For more information about the filters and to understand how to configure them see “ Digital filter in TC standard firmware ”. This PDF file is included in SAMBA installation folder. For SAMBA UI users the position loop filters could be found on the “Position loop” sheet. For SAMBA19xUI users the position loop filters could be found on the “Position, Tuning” sheet. The position loop filters are configurable through the two RCI-Commands CSPFS and CGPFS . Position Individual Loop status The individual loop status toggles the logical axis separately on/off. Each bit of this parameter corresponds to a logical axis. Table 5.1: Position individual loop status bit-mask | Bit | Corresponding axis | | ------- | ---------------------- | | Bit1 | Xrot | | Bit2 | Yrot | | Bit3 | Ytrans | | Bit4 | Ytrans | | Bit5 | Zrot | | Bit6 | Ztrans | For SAMBA19xUI users the position individual loop status could be found on the “Position, Tuning” or ”Status” sheet. The individual loop status could be set or get using BSSST or BGSST RCI-Command. Position loop inputs and outputs devices As mentioned above the input and output signals of the position loop are configurable and they could be any sensor (input) signal respectively any actuator (motor) signal. For SAMBA UI users the inputs devices could be configured on sheet “Position loop” . For SAMBA19xUI users the inputs devices could be configured on sheet “ Position, Sensor Matrix” . The position loop input devices will be configured using the RCI-Commands CSPSD And CGPSD . For SAMBA UI users the outputs devices could be configured on sheet “Position loop” . For SAMBA19xUI users the outputs devices could be configured on sheet “ Position, Motor Matrix” . The position loop output devices are configurable using the RCI-Commands CSPMD and CGPMD . Proximity Offset For each proximity sensor input there is an offset supported in the firmware. Three of them are for the vertical proximities “ZxProx” and the other three are for the horizontal proximities “HxProx”. The offset will be subtracted from the actual input value to build the virtual input signal (Prox_NO “proximity-without-offset”). Changing the offset influences the proximity-without-offset signals and so the position logical axis, if those signals are configured as input devices. The offset values define the absolute position that the position loop tries to hold. The best values for the offset are the actual proximity values, when the system payload is not vibrating and all control loops are switched off “minimal energy state”. In case of an electro pneumatic system the vertical proximity offsets should be equal to the set point used for the payload leveling by the pneumatic loop. For SAMBA-UI user the proximity offset values are accessible on the sheet “ Position loop” . For SAMBA19xUI user the proximity offset values are accessible on the sheet “ Position, Tuning”. Proximity offset values are also accessible using the CSPOV , CGPOV and CAUCO RCI-Commands. Pneumatic Loop Overview The pneumatic loop is a feedback loop to control the inflated height of the system in case the system is equipped with electro pneumatic valves. Electro pneumatic valve means that the valve is operated by a voltage input coming from the controller. The pneumatic loop works like the position and velocity loop with logical axes. It consists of three logical axes “Ztpneum , Yrpneum and Xrpneum”. Four vertical proximity sensor inputs are used to build the logical axes using the pneumatic sensor matrix. The running setpoint is subtracted from the Ztpneu input and optional from the other two axes, when the use-setpoint-for-all-axes option is active. With this option the pneumatic loop could be configured so to control the system isolator wise (co-located, sensor/valve control). Then the logical axes signal will be filtered by four IIR2-Filters. The filtered logical axes “axes output” will be divided to the valve outputs using the pneumatic motor steering matrix. The valve offsets and the dither signal will be added to the valve outputs. The following flow chart shows the structure of the pneumatic loop algorithm implemented in the firmware. Figure 6.1: Pneumatic loop flow chart Note : The fourth input of the pneumatic loop “ProxV4” doesn’t exist in the firmware as input signal. It is internally mapped to the “InpZ4FB” input. The VRef Value is calculated using the following equation. (9) Where: : Actual VRef. : Previous VRef. : Adjusted Setpoint : Weighting constant or smoothing factor is equal to 5/SF (SF: Sample Frequency). Note : The isolator heights are calculated like the VRef value. The pneumatic loop is in the firmware configurable “optional” like the position loop. The vertical status value gives information about the current status of the payload height “VDown, VGoinguptosoftstop, VUpsoft, VGoingup, VUp, VGoingdown, VPowerup and VOk”. Table 6.1: Vertical status “Payload vertical position status” State Its Number comment VDown 0 When the payload height bellow VRefDown+SoftupHeight. During this state the control loop is off. Valve outputs are set to down-offset. VGoinguptosoftstop 1 System is inflating. Valve outputs increased from down-offset to up_offset value using the ValveOffsetRampTime parameters. During this state the control loop is off. When the valve outputs reach the up-offset the vertical status changes to VGoingup. VUpsoft 2 Not used any more VGoingup 3 VRef value increased using the Grad-Up value. The payload moves controlled up. When the Setpoint is reached the vertical status changes to VUp. VUp 4 System is inflated and the payload is at end position, but the payload position is outside the VTolerance window. VGoingdown 5 VRef value is decreased using the Grad-Down value. The payload moves controlled down. When all isolator heights are smaller than VRefDown+SoftupHeight, the vertical status changes to VDown. VPowerup 6 This is the state after switching the controller on and its duration is 500 samples of the sample frequency. In this phase the initial isolator heights are calculated. VOk 7 System is inflated and the payload height is inside the VTolerance window. Note: The vertical status is not dependent from the payload height “position”. For example if the system is inflated “VUp” and the system loses pressure and the payload position fall down below the VRefDown+SoftupHeight the status of the vertical loop doesn’t change to VDown. Please see in the next sections the flow diagrams of the various pneumatic actions to get an overview about the pneumatic loop states. Pneumatic Loop Actions and Its Startup Phase There are two actions that a user can invoke: “Go Up” and “Go Down”. The next sections explain these actions. Next Table 6.2 explains various items that are used in the next sections. Table 6.2: Explanation of notions and variables. Item Description VRef The vertical reference position that the system shall hold. Offset Valve offset, adjustable in the firmware. Control (On/Off) Specifies, whether the pneumatic logical axes output effect the valve outputs or not. If the Control is on then the logical axes affect the valve outputs otherwise the logical axes don’t affect the valve outputs when the Control is off. Pneum. Loop On Defines whether the pneumatic loop status is active. This variable is configurable in the firmware. Pneum. Loop configured When the pneumatic loop is processed by the firmware. This variable is in the firmware configurable. VTolerance This variable is basically used to determine if the status of the pneumatic loop is okay or not. It is in the firmware configurable. VTolerance Window Is equal to VRef ± VTolerance VRefdown Internal variable that is calculated by switching the controller on. It represents the initial height values of the isolators. SoftupHeight This variable is adjustable in the firmware. It is needed to determine the pneumatic loop status. Its value influences the startup phase flow. down_offset The valve offset value used by the move down action. up_offset Default valve offset value and for the move up action. Start Up Phase This is the process when the controller is switched on. The following figure shows the flow chart of the startup process. Figure 6.2: The pneumatic startup phase flow chart Move Up Action The following chart flow shows the process of the move up action. For SAMBA19xUI users this action could be triggered on the “ Pneumatic; Tuning” page. The action could be triggered using the PAMOV RCI-Command too. Figure 6.3: Move up action flow chart. Move Down Action The following chart flow shows the process of the move down process. For SAMBA19xUI users this action could be triggered on the “ Pneumatic, Tuning” sheet. The action could be triggered using the PAMOV RCI-Command too. Figure 6.4: Move down action flow chart. Pneumatic Loop Parameters Sensor steering Matrix Coefficients (Logical Axis Input Multipliers) The logical axis of the pneumatic loop will be calculated through equation 10. (10) Each pneumatic logical axis contains 4 sensor multipliers (proximity sensors). Changing the sensor matrix coefficient influences the logical axis amount. For SAMBA19XUI users the sensor steering matrix is located on the “ Pneumatic, Tuning” sheet. The sensor matrix coefficients of the pneumatic loop are accessible through the Two RCI-Commands PSPSM and PGPSM . Valve Steering Matrix Coefficients (Logical Axis Output Multiplier) The following equation calculates the valve outputs from the position logical axis output. (11) For each logical axis there are 6 coefficients “multipliers”. Each multiplier corresponds to a valve. Changing the multipliers affects the corresponding valve output. For SAMBA19xUI users the sensor steering matrix is located on the “ Pneumatic; Tuning” sheet. The motor matrix coefficients of the pneumatic loop are accessible through the Two RCI-Commands PSPSM and PGPSM . Stage Filter Parameter The pneumatic loop contains 12 filters to filter and stabilize the 3 pneumatic logical axes. Each axis is filtered through 4 filters. The filters are configurable. For more information about the filters and to understand how to configure them see “ Digital filter in TC standard firmware ”. This PDF file is included in SAMBA installation folder. For SAMBA19xUI users the pneumatic loop filters could be found on the “Pneumatic; Tuning” sheet. The pneumatic loop filters are configurable through the two RCI-Commands PSPAF and PGPAF Pneumatic Individual Loop status The individual loop status toggles the logical axis separately on/off. Each bit of the first 6 bits of this parameter corresponds to a logical axis. Table 6.3: Pneumatic individual loop status bit-mask Bit Corresponding axis Bit1 Ztpneum Bit2 Yrpneum Bit3 Xrpneum For SAMBA19xUI users the pneumatic individual loop status could be found on the “Position, Tuning” or ”Status” sheet. The individual loop status could be set or get using BSSST or BGSST RCI-Command. Other parameters All other adjustable parameters of the pneumatic loop and their description are listed in the next table. For SAMBA19xUI users all parameters in next table are accessible on the “Pneumatic; Tuning” sheet. Table 6.4: Parameters of the pneumatic loop Parameter Description Valve offset for Down “down_offset” Valve offset variable used by the pneumatic loop action move down. Configurable using PSPVO and PGPVO RCI-Commands Typical value: 5% Valve offset for Up “up_offset” Valve offset variable used by the pneumatic loop action move up. Configurable using PSPVO and PGPVO RCI-Commands Typical value: dependent on the mass of the system Vrefupadd This is a variable, where its value will be added to the proximity input signals used to build the pneumatic logical axes. There are three values for the first three proximity inputs. This variable allows adjusting the height of each isolator separately. The values are adjustable through using CSMOV and CGMOV RCI-Commands. Typical value: 0.0 Move up See figure #6. It inflates the system. This action could be triggered by PAMOV RCI-Command. Move down See figure #7. It deflates the system. This action could be triggered by PAMOV RCI-Command. Use current valve outputs as up_offset values This action sets the Up offset values to the current offset values. This action could be triggered by PAUCO RCI-Command. Use current valve outputs as down_offset values This action sets the Down offset values to the current offset values. This action could be triggered by PAUCO RCI-Command. Softupheight This variable is used to determine the vertical status of the payload. Use PSPCP and PGPCP RCI-Commands to access this variable. Typical value: 2000 digits Setpoint This variable is the desired height “absolute position” of the system. Its value influences the height of the payload. There is only one Setpoint for all isolator. Use PSPCP and PGPCP RCI-Commands to access this variable. Typical value: system dependent Setpoint status “Use setpoint for all axes” (USFA) This parameter forces subtracting the setpoint from all pneumatic axes inputs. This option allows controlling the payload isolator-wise like in the old firmware algorithm. Don’t change this variable during the system is inflated (pneumatic loop is on). Use PSPSS and PGPSS RCI-Commands to access this variable. 0: setpoint is subtracted only from Ztpneu axis. 1: setpoint is subtracted from all pneumatic axes. Typical value: system dependent VTolerance This variable is used to make a decision whether the vertical status is VOk or VUp. Furthermore it is used by the reference metrology system auto switch routine to specify the position tolerance window to leave the inclinometer mode. Use PSPCP and PGPCP RCI-Commands to access this variable. Typical value: 20µm Dither Some pressure valve need a dither on the output to overcome the effect of mechanical friction inside the valve. The dither is a sine wave signal. Dither amount This is the amplitude value of the dither signal. Use PSDIT and PGDIT RCI-Commands to access this variable. Typical value: dependent on the valve Dither Frequency This is the value of the dither signal frequency. Use PSDFR and PGDFR RCI-Commands to access this variable. Typical value: 35% Adaptive constant “Alpha” This variable is used by the adaptive algorithm to eliminate the vibration, which is caused by the valve dithering and disturbs the vertical logical axis. It is value is the learning constant for the adaptive process. Use PSDCA , PGDCA , PSDCB and PGDCB RCI-Commands to access this variable. Typical value: 1e-3 Feed Forward Subsystem Overview The FF subsystem consists basically of seven independent control channels. Their inputs (reference input) is selectable from the firmware input signals (geophones, floor geophones, proximity, stage, … signals). The error signal of the LMS-Algorithm are the velocity logical axes. Each control channel has a filter set for pre-filtering of reference input. The error inputs are pre-filtered by 2 filter set. The filtered error signal and the filtered second path signal are used by the adaptive algorithm to calculate the gains “coefficient” of the FIR filter. The output of the FIR filter is added to the velocity logical axis output see figures #1 and #2. The following flow chart shows the structure of such FF control channel. It also shows the filtering process of the reference signal and error signal. Figure 7.1: Flow chart of FF control channel Each FF-Control-Channel contains 6 FIR-Filters with a maximum coefficient “gains” number of 5, one FIR-Filter for each velocity axis. The reference input is configurable and could be set to one of the input signals provided by the firmware. The reference and second path filters are related to the reference input. The error filters are related to the velocity logical axis. There are two types of FF-Subsystems: floor feed forward “FFF” and stage feed forward “SFF”. The first 4 control channels treat the SFF and the last 3 channels treat the FFF. The LMS “Least Mean Square” adaptive algorithm is used for the SFF (for the first 4 FF-Control-Channels). For the FFF (The last three FF-Control-Channels) there are two types of adaptive algorithms implemented in the firmware the first algorithm is the LMS algorithm and the other one is the RLS “Recursive Least Square” algorithm. The FF-Subsystem is optional “configurable” in the firmware. FF parameters FF Filters The FF-Subsystem contains 54 filters to filter the reference input, the error input and to build the second path signal. Each reference input is filtered by 6 filters three in the reference path and another three in the secondary path. Each error signal is filtered by two filters and there is 6 possible error signals “the velocity logical axes”. All filters are in the firmware configurable. The reference and secondary filters are based on the reference inputs 42 filters. The error filters are based on velocity axes 12 filters and they are identical for all reference inputs. For more information about the filters and to know how to configure them see the reference document “ digital filter in TC standard firmware ”. This PDF file is included in the SAMBA software package. For SAMBA19xUI users the FF-Subsystem filters could be found and modified on the “ Feed Forward; FF Tuning” sheet. The filters are configurable using FSPFS and FGPFS RCI-Commands. FIR Gains Each reference input could be combined “configured” with max 6 logical axes “error signals”. This means there are 6 FIR Filter implemented per reference input “control channel”, one FIR for each error signal respectively output signal. The FIR filter gain number is adjustable and could be max five gains. The FF-Axis-Output will be calculated using equation 12. (12) Where : FF-Output of the n-th axis “Xtrans, Zrot …” : The j-th gain of the n-th FIR-Filter of the i-th control channel : Filtered reference input history : Gain index : Control channel index : The adjusted gains number. When the i-th FF control channel is not configured with the n-th axis, then the second summation in the above equation equals zero. There are 42 FIR-Filter with maximal 5 gains “coefficients”. The gains number of the FIR-Filters is adjustable. For SAMBA19xUI users the gains could be adjusted on the “Feed Forward; FF Gains” sheet. The gains of a specified FIR-filter could be configured through FSFFG and FGFFG RCI-Commands. Feed-Forward Configuration As mentioned above each reference input of the FF-Subsystem could be configured with up to 6 logical axes. The reference input is configured with the n-th axis means that the reference input influences “controls” the n-th Axis-Output. With other words the FF-Axis-Output produced by the reference input is added to the Axis-Output. For SAMBA19xUI users the Feed-Forward configuration could be done on the “Feed Forward; FF Tuning” sheet. To set or get the Feed-Forward configuration use FSFFC or FGFFC RCI-Command. Reference Input The reference input is adjustable and could take any available input signal in the firmware. For SAMBA19XUI users the reference input could be configured on the “ Feed Forward; FF Tuning” sheet. The reference inputs are configurable using FSFFI and FGFFI RCI-Commands. Initial parameters and signal multipliers to calculate the additional SFF-Signals The firmware supports 4 additional input signals basically used for tuning the stage FF-Subsystem. Those input signals are the result of a fixed calculation implemented in the firmware. The idea behind them is to generate SFF-Signals suitable for tuning Zrot-Axis and to generate position dependent acceleration signals that are more suitable than the standard acceleration signals to tune the SFF-Subsystem. The calculation uses four initial parameters related to the position signals. Those parameters are XposOffset, YposOffset, XposMax and YposMax. Furthermore there is a signal multiplier for each stage signals. Table 7.1: Parameters used to calculate the additional stage input signals Item Description Xacc_multiplier This the multiplier value for the Xacc signal. Yacc_multiplier This the multiplier value for the Yacc signal. Xpos_multiplier This the multiplier value for the Xpos signal. Ypos_multiplier This the multiplier value for the Ypos signal. XposOffset This is the position deviation in the X-Direction between the stage home position “zero position” and the centre of gravity of the payload. YposOffset This is the position deviation in the Y-Direction between the stage home position and the centre of gravity of the payload. XposMax This is the max position; that the stage could reach in the X-Direction. The SI unit of this variable is digit. YposMax This is the max position; that the stage could reach in the Y-Direction. The SI unit of this variable is digit. For SAMBA19xUI users the parameters in table 5 could be accessed from the SAMBA UI “ Feed Forward, FF Tuning” sheet. To configure the stage signal multipliers the RCI-Commands FSSFM and FGSFM could be used. The initial parameter values could be set or get using the RCI-Command FSZRP or FGZRP . The additional signals are calculated using the below equations. Where : The stage signal X-Acceleration. : The stage signal Y-Acceleration. : The stage X-Position signal added to the adjusted X-Position offset. : The stage X-Position signal added to the adjusted X-Position offset : The normalized stage signal X-Position. : The normalized stage signal Y-Position. : The calculated Xacc dependent on the stage Y-Position. : The calculated Yacc dependent on the stage X-Position. : The calculated Xacc dependent on the stage Y-Position for the Zrot axis, this signal should be used to compensate the Z-rotation disturbance. : The calculated Yacc depended on the stage X-Position for Zrot axis, this signal should be used to compensate the Z-Rotation disturbance. Note : Both calculated signals “CalcXacc” and “CalcYacc” are not useable. It is not recommended to use them to compensate the stage forces. Various FF Parameters Table 7.2: Various FF parameters Parameter Description FFThreshold This is the threshold variable for the FF-Axis-Output. In case of exceeding its value during adapting the gains of the selected FIR-Filter will be set to zero. In case exceeding during the adapting is off the FF-Axis-Output is limited to its value. Adjustable on SAMBA-UI sheet Feed-Forward Configurable using BSFFL and BGFFL RCI-Commands Typical value: dependent on stage GainNum This is the used gains number of the FF-FIR-Filter. Adjustable on SAMBA-UI sheet Feed-Forward Configurable using FSFFC and FSFFC RCI-Commands Typical value: 3 FFAlpha This is the learning constant “Adaption rate” for the adaptive algorithm to calculate the FIR-Filters Gains. Its value influences the convergence of the algorithm and its speed. For each control channel there is an individual learning constant. Adjustable on SAMBA-UI sheet Feed-Forward Configurable using FSFFP and FGFFP RCI-Commands FFF adaptive algorithm type This parameter specifies the type of the adaptive algorithm used for the floor feed forward control-channels “The last 3 FF-Control-Channels”. The algorithm type is adjustable on the SAMBA UI sheet Controller settings or using the RCI-Commads FSFAT and FGFAT . Use_FB_Raw This is a flag related to the error signal, if its value is set to one then the logical axis after stage 6 is used as error signal, otherwise the logical axis raw input will be used as error signal. Adjustable on SAMBA-UI sheet Feed-Forward Adjustable using FSFFC and FGFFC RCI-Commands Typical value: 1 Adaptive Status The adaptive status is including in the global LoopStatus variable. It switches On/Off the adapting of FF-Subsystem. The adaptive status could be toggled on SAMBA-UI sheet Feed-Forward. For accessing this status use FSFFS , FGFFS , FSFLS , FGFLS , FSFFP and FGFFP . Active Status The active status is including in the global LoopStatus variable and switches the FF-Subsystem On/Off. The adaptive status could be toggled on SAMBA-UI sheets Feed-Forward and Controller settings. For accessing this status use FSFFS , FGFFS , FSFLS and FGFLS . For SAMBA19xUI users the parameters in table 6 could be accessed from the SAMBA UI “ Feed Forward, FF Tuning” sheet. Pneumatic Stage Feed Forward The functionality of the pneumatic stage feed forward is like the standard stage feed forward. Only the FF-Axis-Outputs are not the velocity axes output, they are the three pneumatic axis outputs. The pneumatic FF subsystem consists basically of 4 independent control channels. Their reference input can be set to any input signals. The error signals for the adaptive algorithm are the pneumatic logical axes. The output of the FIR filter is added to the pneumatic logical axis output. The following flow chart shows the principal structure of such FF control channel. It also shows the filtering process of the reference signal and error signal. Figure 8.1: Flow chart of FF control channel The reference input is configurable and could be set to any one of the input signals supported by the firmware. The reference and second path filters are related to the reference input. The error filters are related to the pneumatic logical axis. Pneumatic Stage FF parameters FF Filters The FF-Subsystem contains 30 filters to filter the reference input and error signal and to build the second path signal. For SAMBA19xUI users the pneumatic Stage-FF-Subsystem filters could be found and modified on the “Pneum. FF; PFF Tuning” sheet. For the RCI-Interface user the filters are configurable using FSFSP and FGFSP RCI-Commands. FIR Gains Each reference input could be combined “configured” with max 3 logical axes “error signals”. This means there are 3 FIR Filter implemented per reference input “control channel”, one FIR for each error signal. The FIR filter gain number is adjustable and could be max five gains. The FF-Axis-Output will be calculated using equation 23. (23) Where : The pneumatic ff output of the n-th axis “Ztpneu, Yrpneum, Xrpneum” : The j-th gain of the n-th FIR-Filter of the i-th reference input : Filtered reference input history : Gain index : Reference input index : The adjusted gain number. For SAMBA19xUI users the gains could be adjusted on the “Pneum. FF; PFF Gains” sheet. The gains of a specified FIR-filter could be configured through FSGPF and FGGPF RCI-Commands. Feed-Forward Configuration As mentioned above each reference input of the FF-Subsystem could be configured with up to 3 pneumatic logical axes. The reference input is configured with n-th axis means that the reference input influences “controls” the n-th axis output. For SAMBA19xUI users the Feed-Forward configuration could be done on the “ Pneum. FF; PFF Tuning” sheet. To set or get the Feed-Forward configuration use FSPPF or FGPPF RCI-Commands. Reference Input The reference input is adjustable and could take any available input signal in the firmware. For SAMBA19xUI users the reference input could be configured on the “ Pneum. FF; PFF Tuning” sheet. The reference inputs are configurable using FSIPF and FGIPF RCI-Commands. Various FF Parameters Table 8.1: Various pneumatic SFF parameters Parameter Description FFThreshold This is the threshold variable for the FF-Axis-Output. In case of exceeding its value during adapting the gains of the selected FIR-Filter will be set to zero. In case exceeding during the adapting is off the FF-Axis-Output is limited to its value. Configurable using FSCPF and FGCPF RCI-Commands Typical value: dependent on stage GainNum This is the used gains number of the FF-FIR-Filter. Configurable using FSCPF and FGCPF RCI-Commands Typical value: 3 FFAlpha This is the learning constant “Adaption rate” for the adaptive algorithm to calculate the FIR-Filters Gains. Its value influences the convergence of the algorithm and its speed. For each control channel there is an individual learning constant. Configurable using FSPPF and FGPPF RCI-Commands Adaptive Status The adaptive status is including in the global LoopStatus variable. It switches On/Off the adapting of FF-Subsystem. SFF. For accessing this status use BSSTS , BGSTS. Active Status The active status is including in the global LoopStatus variable and switches On/Off the FF-Subsystem. For accessing this status use BSSTS , BGSTS . For SAMBA19xUI users all parameters in table 7 could be configured on the “ Pneum. FF; PFF Tuning” sheet. Motor Overcurrent/Overheating Routine Overview The motor overcurrent routine is a safety measure. It is intended to protect the linear motor of the AVIS from overheating and also from damaging. Furthermore it is a kind of failsafe routine. It realizes a failed operation “motor over-powering” of the system and consequently it disables either only the affected motor or all motors dependent on the used configuration. The motor overcurrent routine is implemented in the firmware and it has several con-figuration parameters. Either the temperature sensors or from the motor outputs modeled temperature values are used to detect overheating/overpowering of the motors. To toggle using the temperature sensors on/off, use BGSTS and BSSTS . In case of using the temperature sensors please ensure that AD-Channel set number is equal or greater 6. Furthermore ensure that the AD-Mapping of the temperature sensors is correct. The following flow chart demonstrates the functionality of the overcurrent routine in case of not using the temperature sensor. Figure 9.1: Flowchart of the motor overcurrent routine The motor-overcurrent will be calculated using the following equitation. (24) Where: : Actual Motor overcurrent-value : Previous Motor overcurrent-value : Actual Motor output : Motor overcurrent cooling constant “smoothing factor of the EWMA”. The motor overcurrent routine tries modeling the temperature of the linear motors. It calculates the EWMA-Value of the motor output with the “coolingconst” as weighting factor. As known the temperature development depends on the maximal current flowing through the linear motor coil and the current depends on the used controller and the resistance of the linear motor coil. Therefore the weighting factor of the EWMA has been made adjustable “coolingconst”. The following flow chart demonstrates the functionality of the overcurrent routine in case of using the temperature sensor. Figure 9.2: Flowchart of the motor overcurrent routine The motor-temperature will be calculated using the following equitation. (23) Where: : averaged Motor temperature : Previous averaged Motor temperature : Actual Motor Temperature : Weighting factor of the EWMA “CoolingConst”. The reason of averaging the temperature input values is to clean the noisy temperature sensor input. Parameters The next table contains all the configuration parameters related to the motor overcurrent routine. Table 9.1: Parameters of the motor overcurrent routine Parameter Description threshold For each linear motor there is an individual threshold variable. Its value shouldn’t be exceeded in normal operation. In case of not using temperature sensors Its value is not related to the pure motor output but it is related to the power of the motor “averaged output square”. In case of using temperature sensors this value is temperature value in grad Celsius. Adjustable using BSOCV and BGOCV RCI-Commands Typical value: system dependent DelayTime This is the delay time after overpowering process. During this time period the overpowered or all motors are disabled. Adjustable using BSOCV and BGOCV RCI-Commands Typical value: higher than 10 sec. CoolingConst This is the weighting factor for the EWMA. Adjustable using BSMCC and BGMCC RCI-Commands Typical value: system dependent, the default value is 1e-4 DisableAllFlag Disable all motors flag when one motor is overpowered. Adjustable using BSOCV and BGOCV RCI-Commands. For SAMBA19xUI users all parameters in table 8 could be configured on the “ Controller; Motor Protection” sheet. Automatic Loop Switch The automatic loop switch routine serves as a safety routine and to stabilize the AVIS by specific situation (large disturbance). In case of fulfilling the loop switch criterion and the automatic loop switch is active then the velocity loop will be switched off and the position loop will be switched on for a specified time period “hold time”. Note: In case that the automatic loop is switched off and the switch criterion is fulfilled then all motors will be switched off until the hold time is elapsed. The loop switch routine consists of a specified signal “input, output, axis … “, threshold value, trigger time and hold time. All four variables are configurable. The loop switch criterion is fulfilled when the signal level exceeds the threshold for a time period equals to the trigger time. The parameters of the automatic loop switch could be configured on SAMBA19xUI page Controller; System Settings. Table 10.1: Parameters of automatic loop switch Parameter Description SwitchSignal This is the specified signal for the auto loop switch criterion. This signal could be adjusted to any in the firmware supported signal. Use BSSWS and BGSWS RCI-Commands to configure to specify this signal. Threshold This is the threshold variable using by the auto loop switch criterion. Its value could be accessed using the RCI-Commands BSOCD and BGOCD . TriggerTime This is the trigger time variable and adjustable using the BSOCD and BGOCD RCI-Commands. HoldTime This is the hold time variable and adjustable using the BSOCD and BGOCD RCI-Commands. Figure 10.1: Flowchart for the automatic loop switch Excitation Routine The firmware offers the possibility to excite the AVIS system on a various signal nodes with various types of excitation signals (sine wave, white noise, duty cycle, and chirp sine). The excitation signal has a couple of parameters which are adjustable. The next figures demonstrate the velocity, position and pneumatic loop nodes that can be excited, additionally all actuators supported in the firmware are excitable. Sensors and FF-Subsystem signals are not excitable. The excitation signal could be optional filtered through 4 filter stages. The filters are adjustable like the filters of the control loops. The following figures show all possible injection nodes of the excitation signal. Figure 11.1: Excitation nodes of the velocity loop Figure 11.2: Excitation nodes of the position loop Figure 11.3: Excitation nodes of the pneumatic loop Table 11.1: Parameters of the noise excitation Parameter Description NoiseType This is the noise type variable. There are two adjustable types of noise sine wave and white noise. Adjustable using DSESP and DGESP RCI-Commands Noise Parameters The noise has four parameters to adjust dependent on the noise type gain, frequencies or time period. The parameters are adjustable using DSESP and DGESP RCI-Commands. NoiseInjectionPoint This is the noise injection signal, It specifies the node to be excited. Adjustable through DSNIP and DGNIP RCI-Commands. ExcitationFilterUsageFlag This is the flag determines, whether the white noise excitation signal has to be filtered or not. Adjustable through DSNFU and DGNFU RCI-Commands. ExcitationFilter There are four filters to prepare the white noise signal. The usage of those filters is in the firmware optional. Use the DSNFS and DGNFS RCI-Commands to configure the excitation filters. For SAMBA19xUI users all parameters in table 10 could be configured on the ” Velocity; Velocity Filters” and ”Position; Tuning” sheet. Diagnostic Signals The opticon-controller contains two BNC-Connectors. They are used as diagnostic outputs for measuring and monitoring various signals supported in the firmware. Sensors, actuators, velocity loop, position loop and pneumatic loop signals could be selected as diagnostic-signal. FF-Subsystem doesn’t contain any diagnostic node. For SAMBA19xUI users the two diagnostic-signals could be adjusted on sheets ”Velocity; Velocity Filters” and ”Position; Tuning” They are also adjustable through using the RCI-Commands DSDOS and DGDOS . The following figures show the signal nodes of velocity, position and pneumatic loop, which could be selected as a diagnostic-signal. Figure 12.1: Diagnostic nodes of the velocity loop Figure 12.2: Diagnostic nodes of the position loop Figure 12.3: Diagnostic nodes of the pneumatic loop AD/DA Channels The opticon controller is a digital embedded controller equipped with a DSP (Digital Signal Processor). The DSP processes the control algorithm and all other features implemented in the firmware. To handle the analog sensor signals by the DSP, they will be digitalized through AD-Converters and to drive the actuators the output signals prepared into the DSP are converted to analog signals using DA-Converters. The opticon controller is equipped with 6 AD-Converters to read up to 40 multiplexed analog inputs. The analog signals number which should be converted is adjustable per RCI-Commands NSASN and NGASN . For each actuator there is a DA-Converter available. The AD/DA channel mapping serves to assign each input signal used in the firmware to its physically AD-Channel “sensor”, respectively each output signal to its physically DA-Channel “actuator”. The ordering of inputs and outputs could be carried out on the SAMBA19xUI sheet ”Controller; AD/AD-Mapping”. The AD-Mapping is adjustable using the BSADC and BGADC RCI-Commands. The DA-Mapping is adjustable using the BSDAS and BGDAS RCI-Commands The AD-Mapping for the temperature sensors is adjustable using the BSTSA and BGTSA RCI-Commands. Figure 13.1: Flowchart of the input signals The stage FF-Signals “Xpos, Xacc, Ypos and Yacc” could be provided by different ways “analog or digital”. Adjust the AD-Mapping of the stage FF-Signals to numbers between 40 and 43 to provide the signals by the opticon Digital FF connector. Adjust the right AD-Mapping “<40” of the stage FF-Signals to provide the signals by the opticon Analog FF connector. All Input values mapped to AD-Channel’s number higher than 44 will be zeroed in the firmware. All output signals mapped to DA-Channel with a number higher than 19 will be zeroed. Outputs Ramp driving at startup phase The main intention of the ramp driving is the avoiding a suddenly jerk-forces caused by the motors at a start-up phase. There are two types of ramp driving, the first one is based on the actuator output “Motor output ramp” and the second is based on the logical velocity axes “logical axes ramp”. During the start-up phase the motor outputs respectively the velocity axes outputs values start by zero. They are increased incrementally until the ramp time is expired. The actuators reach their full output value when the ramp time is expired. The ramp time and the ramp type are through the RCI-Commands BSSUT and BGSUT adjustable. For SAMBA19xUI users their values are adjustable on sheet ”Controller, System Setting” . We get a ramp start-up phase by following cases: Turning the controller on Turning the overall loop on After motor over-current state and the overall loop is on After occurrence of the automatic loop switching and the overall loop is on. Velocity Logical axes ramp driving In case of logical axes ramp driving the velocity axes output are limited at the ramp start-up phase. The Axes-Output-limiter value starts with zero and ends after expiring the start-up time with the adjusted limiter value of the velocity axes output. Motor output ramp driving In this case the linear motor outputs values are limited at the start-up phase. The motor output-limiter value starts with zero and ends after the start-up time with the adjusted output-limiter value. The following flow diagram gives an overview about the process of the ramp driving. Figure 14.1: Ramp driving flow diagram. Monitor, Reset LED and Key Functionality The opticon-controller is equipped on the front panel with two LEDs and Keys. They are labeled as Monitor and Reset . The Following table contains an overview about the functionality of the reset and monitor keys. Table 15.1: Monitor and Reset Keys functionality. Operation Description Monitor Key “ActiveOn/Off” Press the Monitor Key for approx. 2 seconds to toggle the active loop On/Off. Reset Key “Reset” Pressing the reset key for at least 4 seconds forces a software reset. During pressing the Reset key the reset and monitor LEDs are not lighting. Run the monitor program “Monitor Mode” Press the monitor key and keep it pressed then power cycle the controller, unhand the monitor key when the two LEDs monitor and reset are lighting. Press the monitor and reset key for 4 second. When the reset and monitor LEDs are lighting unhand the reset key firstly and then unhand the monitor key. If the monitor program is running the two LEDs are lighting. Table 15.2: Monitor and Reset LEDs functionality Operation Description Monitor LED Flashing : Normal mode the firmware is running. Lighting : firmware hangs up or controller running in monitor mode. Not lighting : firmware hangs up or controller running in monitor mode. Reset LED Lighting : Overall Active Control-loop is on. Not lighting : Overall Active Control-loop is off. Amplifier operation monitoring and malfunction The controller is equipped with a current amplifier board to provide the needed power for the linear motors. Some controller are equipped with two amplifier boards. The amplifiers could be enabled/disabled by the firmware. The amplifiers provide digital status signals to the firmware. The amplifier boards status signals are listed in next table. Table 16.1: Amplifier digital signals. Signal Description Amplifier1-Plugged-In This signal detects whether the amplifier board number 1 is plugged in. Amplifier1-Power-Failure This signal detects a power supply failure of the amplifier board number 1. Amplifier1-Temp-Failure This signal detects a temperature failure of the amplifier board number 1. Amplifier2-Plugged-In This signal detects whether the amplifier board number 2 is plugged in. Amplifier2-Power- Failure This signal detects a power supply failure of the amplifier board number 2. Amplifier2-Temp- Failure This signal detects a temperature failure of the amplifier board number 2. In normal operation the amplifier board is enabled in case it is plugged in. If of amplifier board is plugged in and it has power supply failure or temperature failure, then the amplifier will be disabled and the SYS_ERR on the front panel will be switched on. In this case the digital input word is traced in a circular buffer. The circular buffer consists of the 10 elements. The circular buffer could be read by the RCI-Command DGADE . For the SAMBA19xUI users the buffer elements are displayed on the “ Status ” page. Digital I/O-Signals functionality The Digital I/O-Signals functionality is supported in standard firmware version V3.3.09 and higher. For more information see the Opticon_Digital_IO_Specification document. Digital input functionality The two digital input signals have the same functionality like the Monitor- and Reset-Key signals on the front panel of the opticon controller. The DISABLE_IN signal is equal to the monitor key signal and the RESET_IN signal is equal to the reset key signal. Signal Active state Functionality DISABLE_IN High Activate it (set to high) for >2 seconds to toggles the control-loops on/off. Assuming RESET_IN is low. If RESET_IN is high no effect. RESET_IN High Activate it (set to high) for > 4 seconds to force software reset. Digital output functionality The READY_OUT signal behaves like the RESET led on the opticon controller’s front panel. It shows the status of the vibration isolation system’s control loop. The ERROR_OUT shows system’s malfunction. The following table gives an overview about the functionality of the digital output. Signal State/Meaning READY_OUT High : when the system is active (Control loop is on) Low : when the system is passive (Control loop is OFF) ERROR_OUT High : when the linear motors are overheated or overpowered. Low : Normal operation, No malfunction Various Parameters The next table contains all remaining parameters that haven’t been explained in the above chapters. Table 19.1: Various parameters Parameter Description OutputLimiter This variable limits all linear motor outputs. If a motor exceeds the value of this variable, then the motor output value is set to this value. For SAMBA19xUI users its value is adjustable on sheet ” Controller; Motor Protection” . Adjustable using BSOPL and BGOPL RCI-Commands Typical value: system dependent, default value 30% ControllerConfiguration This variable determines whether the various loops are configured (will be processed by the firmware) or not. The position loop, Pneumatic loop and the FF-Subsystem are as mentioned optional. The velocity loop is always processed by the firmware “configured”. For SAMBA19xUI users its value is adjustable on sheet ”Controller; System Settings” . Its value is adjustable using NSEXL and NGEXL RCI-Commands Typical value: system dependent SampleFrequency This is the sample frequency of the interrupt routine processing the control loops and the other firmware features. For SAMBA19xUI users its value is adjustable on sheet ”Controller; System Settings” . Adjustable using NSSFR and NGSFR RCI-Commands This value should be changed only by experienced service engineer because a too high sample frequency causes a crashing the firmware. Typical value: 9 KHz LinearMotorOffset This variable contains 8 values to be added to the horizontal motor outputs “X1,Y1, X2, Y2, X3, Y3, X4 and Y4” as offset. Those values serve to centre the payload. The values are for each motor individual adjustable. For SAMBA19xUI users motor offset values are adjustable on sheet ”Controller; Motor Protection” . Adjustable using CSMOV and CGMOV RCI-Commands Performance monitor This routine monitors a specified signal -called monitor signal- to verify the performance of the system. When the signal level exceeds the threshold for a specified time period “trigger time” then the performance status toggled to failed and this state holds for the hold time, otherwise the performance status is okay . The monitor signal is configurable and could be sensor, actuator, velocity and position loop signal. Adjustable using DSPMV , DGPMS , and DGPMV RCI-Commands Signal This is the performance monitor signal, adjustable on the SAMBA-UI sheets ”Controller Settings” . Threshold This is the threshold variable. For SAMBA19xUI users its value is adjustable on sheet ”Controller; System Settings” . Trigger time This is the trigger time variable. For SAMBA19xUI users its value is adjustable on sheet ”Controller; System Settings” . Hold time This is the hold time variable. For SAMBA19xUI users its value is adjustable on sheet ”Controller; System Settings” . The next table shows all the read only parameters. Table 19.2: Read-Only Parameters. Parameters “Read only” Description System Load This variable is not editable it is read only. Its value demonstrates how busy the interrupt routine is. In case of creasing the sample frequency take care that the system load value doesn’t exceed 85%. For SAMBA-UI users its value is displayed on sheet ”Controller Settings” . For SAMBA19xUI users its value is displayed on sheet ”Controller; System Settings” . Use DGSLO RCI-Command to get the actual value of System load. Motor Overcurrent “overheating” Status This parameter gives information about the system status normal operation or overpowered. For SAMBA-UI users its value is displayed on sheet ”Motor Overcurrent” . For SAMBA19xUI users its value is displayed on sheet ”Controller; Motor Protection” . To get the status use BGMPS RCI-Command. Motor power For SAMBA-UI users the motor powers respectively temperature values are displayed on sheet ”Motor Overcurrent” . For SAMBA19xUI users the motor powers respectively temperature values are displayed on sheet ”Controller; Motor Ptotection” . To get the motors power values use BGMPV RCI-Command. Pneumatic Loop parameters The pneumatic loop status, the reference point, the actual axes inputs and the actual axes outputs the actual isolator heights and the actual valve outputs are included in this parameter packet. For SAMBA-UI users the above parameter values are displayed on sheet ”Pneumatic Loop” . For SAMBA19xUI users their values are displayed on sheet ”Pneumatic, Tuning” . To get those values use PGPAS RCI-Command. Pneumatic Loop parameters The actual isolator heights and the actual valve outputs are included in this parameter packet. For SAMBA-UI users the above parameter values are displayed on sheet ”Pneumatic Loop” . For SAMBA19xUI users their values are displayed on sheet ”Pneumatic, Tuning” . To get those values use PGPHV RCI-Command. Performance monitor status and counter of trigger and hold time This parameter presents the status of performance “ failed or okay ”. By SAMBA-UI it is displayed on ”Controller Settings” and Status sheets. Furthermore the counter for the trigger and hold time is displayed on the SAMBA-UI sheet ”Controller Settings” . For SAMBA19xUI users it is displayed on sheet ”Controller, System Settings” . Use the RCI-Command DGPMS to get those values. Auto loop switch status and the counter for trigger and hold time The status of the velocity and position loop and the counter of trigger and hold time are displayed on the ”Controller Settings” sheet of the SAMBA-UI and on the ”Controller, System Settings” sheet by SAMBA19xUI. Use the RCI-Command DGCSS to get those values. Summary This document describes all parameters supported by firmware. Furthermore all features and functionality implemented in the firmware have been explained. This document is a useful reference document for all users working with an AVIS."
  },
  "LoggingTool/FigureOperation.html": {
    "href": "LoggingTool/FigureOperation.html",
    "title": "Figure manipulation FigureOperation operation | SAMBA19x Website",
    "keywords": "Figure manipulation FigureOperation operation The FigureProperty lmpo-operation contains a varios actions. It's value consists of a collection of signal manipulation commands lmpo-cmd . A \" lmpo-cmd \" consists of cmd-name \" italic , polt \" and list of cmd-config seperated by a semicolon \";\" or semicolon+space \"; \". A cmd-config consists of a keyword \" polt \" and a value, they are seperated by a colon \":\" or by a colon+space \": \". Some cmd_configs are valueless. The following table describes all possible lmpo-cmds of the Figure lmpo-operation . lmpo-cmd Description { figure ; figure properties } set the figure's properties. Figure properties using the plot cmd one could set some plot properties listed in the following table. figure property Description { title :x } changes the figure title. { title-color :x } changes the title's color of the figure. Color's value format is ARGB (#FFFFFFFF). { title-fontsize :x } set the title font size. { title-font :x } set the title font type. possible font types (not implemented) { title-fontweight :x } set the title font weight. possible font weights x{bold,normal}. { title-background :x } set the title background color. Color's value format is ARGB (#FFFFFFFF). { window-title :x } changes the title of the figure window. { background :x } set the background color of the plot. Color's value format is ARGB (#FFFFFFFF). { width :x } set the width of the figure window in pixel. { height :x } set the height of the figure window in pixel. { dark-theme :x } toggle the dark theme on/off x{on,off}. { rescale :x } rescale all figure plots. <FigureActions> <Operation Name=\"FigureProperty\"> <Value> <anyType xsi:type=\"xsd:string\">figure; title:Test file; title-color:#fff0f0f0; title-fontsize:18; title-fontweight:bold; title-background:#ef202020; width:900; height:900 </anyType> </Value> </Operation> <Operation Name=\"PlotProperty\"> <Value> <anyType xsi:type=\"xsd:string\">plot; grid:on;title:Polynom output; title-color:#fff0f0f0; title-fontsize:14; border-color:#ff505050; background:#ef202020; legend-text-color:#fff0f0f0</anyType> <anyType xsi:type=\"xsd:string\">tracker-string-format;format: {0}\\n{1}: {2:0.00####}\\n{3}: {4:0.00###} </anyType> <anyType xsi:type=\"xsd:string\">curves-color; curve#1:#ff0000ff; curve#2:#ff00ff00; curve#3:#ffff0000; curve#4:#ff800000; curve#5:#ffff00ff; curve#6:#ff0080ff; curve#7:#ffffff00; curve#8:#ff8080ff; curve#9:#30408080; curve#10:#ff808000</anyType> <anyType xsi:type=\"xsd:string\">curve; curve#:1;line-style:dash</anyType> <anyType xsi:type=\"xsd:string\">add-curve-from-csv;file:\\\\rafs05\\transfer\\mshat\\ToDelete\\Samba19x Data\\LoggingTool Data\\\\Book1.csv</anyType> <anyType xsi:type=\"xsd:string\">xaxis; fontsize: 12; text-color:#fff0f0f0; label-color: #fff0f0f0; label-fontsize: 12 </anyType> <anyType xsi:type=\"xsd:string\">xaxis; minor-grid-color:#ff606060; major-grid-color: #ff707070; tick-color: #ff909090 </anyType> <anyType xsi:type=\"xsd:string\">yaxis; fontsize: 12; text-color:#fff0f0f0; label-color: #fff0f0f0; label-fontsize: 12 </anyType> <anyType xsi:type=\"xsd:string\">yaxis; minor-grid-color:#ff606060; major-grid-color: #ff707070; tick-color: #ff909090 </anyType> </Value> </Operation> <Operation Name=\"Annotation\"> <Value> <anyType xsi:type=\"xsd:string\">add; type:text;xpos:5;text-content:Centered Text</anyType> <anyType xsi:type=\"xsd:string\">add; type:text;xpos:7;text-content:topleft Text</anyType> <anyType xsi:type=\"xsd:string\">add; type:point;xpos1:3;xpos2:7</anyType> <anyType xsi:type=\"xsd:string\">add; type:hline;ypos1:-1000;ypos2:1000</anyType> <anyType xsi:type=\"xsd:string\">add; type:vline;xpos1:2;xpos2:6</anyType> <anyType xsi:type=\"xsd:string\">textann; ann#:1; text-color:#ff0000ff; text-fontsize:12 </anyType> <anyType xsi:type=\"xsd:string\">textann; ann#:2; text-color:#ff00ff00; text-fontsize:12 </anyType> <anyType xsi:type=\"xsd:string\">textann; ann#:3; text-color:#ffff0000; text-fontsize:12 </anyType> <anyType xsi:type=\"xsd:string\">textann; ann#:4; text-color:#ff800000; text-fontsize:12 </anyType> <anyType xsi:type=\"xsd:string\">lineann; ann#:1; color:#ff0000ff; text-color:#ff0000ff; text-fontsize:12 </anyType> <anyType xsi:type=\"xsd:string\">lineann; ann#:2; color:#ff00ff00; text-color:#ff00ff00; text-fontsize:12 </anyType> <anyType xsi:type=\"xsd:string\">lineann; ann#:3; color:#ffff0000; text-color:#ffff0000; text-fontsize:12 </anyType> <anyType xsi:type=\"xsd:string\">lineann; ann#:4; color:#ff800000; text-color:#ff800000; text-fontsize:12 </anyType> <anyType xsi:type=\"xsd:string\">pointann; ann#:1; color:#ff0000ff; text-color:#ff0000ff; text-fontsize:12 </anyType> <anyType xsi:type=\"xsd:string\">pointann; ann#:2; color:#ff00ff00; text-color:#ff00ff00; text-fontsize:12 </anyType> <anyType xsi:type=\"xsd:string\">pointann; ann#:3; color:#ffff0000; text-color:#ffff0000; text-fontsize:12 </anyType> <anyType xsi:type=\"xsd:string\">pointann; ann#:4; color:#ff800000; text-color:#ff800000; text-fontsize:12 </anyType> </Value> </Operation> </FigureActions>"
  },
  "LoggingTool/intro.html": {
    "href": "LoggingTool/intro.html",
    "title": "Introduction | SAMBA19x Website",
    "keywords": "Introduction The LoggingTool is intended to log system data for diagnostic coals. up to 40 signals could be logged simultaneously."
  },
  "LoggingTool/logmanintro.html": {
    "href": "LoggingTool/logmanintro.html",
    "title": "LoggManXml | SAMBA19x Website",
    "keywords": "LoggManXml To prepare and plot a logged data set it is a convenient way to use a data manipulation and plotting script file .LoggManXml . The .LoggManXml file has xml format and consists of a various actions like SignalActions to prepare the logged data, SubplotActions to plot the prepared data or the raw data and to config the plot property and FigureActions to config all plots inside the figure with the same properties. There are basically a couple of operations, SignalOperation is used by SignalActions , PlotProperty , Annotation are used by SubplotActions and FigureActions and FigureOperation used by FigureActions . Optionally there are PostOperations to save figures and plot to pictures after finishing tha plotting. This is a sample file for .LoggManXml file. <?xml version=\"1.0\" encoding=\"utf-8\"?> <SignalAndFigureConfiguration xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" FileVersion=\"1\"> <OpenMultiDataFile>false</OpenMultiDataFile> <!-- Number of logged data files to open--> <DataFilesNumber>1</DataFilesNumber> <Signals IsActive=\"true\"> <SignalActions> <Operation Name=\"SignalOperation\"> <Value> <!-- multiply the first logged signal of first opened file with 0.10526--> <anyType xsi:type=\"xsd:string\">mult; sig: F1S1; factor: 0.10526</anyType> <anyType xsi:type=\"xsd:string\">mult; sig: F1S2; factor: 0.10526</anyType> <anyType xsi:type=\"xsd:string\">mult; sig: F1S3; factor: 0.10526</anyType> <anyType xsi:type=\"xsd:string\">mult; sig: F1S4; factor: 0.10526</anyType> <anyType xsi:type=\"xsd:string\">mult; sig: F1S5; factor: 0.10526</anyType> <anyType xsi:type=\"xsd:string\">mult; sig: F1S6; factor: 0.10526</anyType> <anyType xsi:type=\"xsd:string\">mult; sig: F1S7; factor: 3.0525e-4</anyType> <anyType xsi:type=\"xsd:string\">mult; sig: F1S8; factor: 3.0525e-4</anyType> <anyType xsi:type=\"xsd:string\">mult; sig: F1S9; factor: 3.0525e-4</anyType> <anyType xsi:type=\"xsd:string\">mult; sig: F1S10; factor: 3.0525e-4</anyType> <anyType xsi:type=\"xsd:string\">mult; sig: F1S11; factor: 3.0525e-4</anyType> <!-- build average (average length = 3) of signal F1S1 and save the result to newsig AvgProxV1--> <anyType xsi:type=\"xsd:string\">average; sig: F1S1; length: 3; newsig: AvgProxV1</anyType> <anyType xsi:type=\"xsd:string\">average; sig: F1S2; length: 3; newsig: AvgProxV2</anyType> <anyType xsi:type=\"xsd:string\">average; sig: F1S3; length: 3; newsig: AvgProxV3</anyType> <anyType xsi:type=\"xsd:string\">std; sig: F1S1; param: $3SigmaProxV1; mult: 3</anyType> <anyType xsi:type=\"xsd:string\">std; sig: F1S2; param: $3SigmaProxV2; mult: 3</anyType> <anyType xsi:type=\"xsd:string\">std; sig: F1S3; param: $3SigmaProxV3; mult: 3</anyType> <anyType xsi:type=\"xsd:string\">std; sig: AvgProxV1; param: $3SigmaAvgProxV1; mult: 3</anyType> <anyType xsi:type=\"xsd:string\">std; sig: AvgProxV2; param: $3SigmaAvgProxV2; mult: 3</anyType> <anyType xsi:type=\"xsd:string\">std; sig: AvgProxV3; param: $3SigmaAvgProxV3; mult: 3</anyType> </Value> </Operation> </SignalActions> </Signals> <Figures> <!--Fugure#1 !--> <Figure IsActive=\"true\" Title=\"Proximity Sensor\" RowNumber=\"3\" ColumnNumber=\"2\"> <Subplots> <Subplot Row=\"1\" Column=\"1\"> <SubPlotActions> <Operation Name=\"PlotProperty\"> <Value> <anyType xsi:type=\"xsd:string\">yaxis; label:ProxV1[um]; major-grid-width:5; minor-grid-width:1;</anyType> <anyType xsi:type=\"xsd:string\">curves; sig:F1S1</anyType> </Value> </Operation> <Operation Name=\"Annotation\"> <Value> <anyType xsi:type=\"xsd:string\">add; type: text; xpos: 10000; ypos: -11; text-content: ProxV1 3Sigma[um]= $3SigmaProxV1</anyType> <anyType xsi:type=\"xsd:string\">textann; ann#: 1; text-color:#FF0000FF; text-fontsize: 15; background: #40505050; </anyType> </Value> </Operation> </SubPlotActions> </Subplot> <Subplot Row=\"1\" Column=\"2\"> <SubPlotActions> <Operation Name=\"PlotProperty\"> <Value> <anyType xsi:type=\"xsd:string\">yaxis; label:ProxH1[um]</anyType> <anyType xsi:type=\"xsd:string\">curves; sig:F1S4</anyType> </Value> </Operation> </SubPlotActions> </Subplot> <Subplot Row=\"2\" Column=\"1\"> <SubPlotActions> <Operation Name=\"PlotProperty\"> <Value> <anyType xsi:type=\"xsd:string\">yaxis; label:ProxV2[um]; major-grid-width:5; minor-grid-width:1;</anyType> <anyType xsi:type=\"xsd:string\">curves; sig:F1S2</anyType> </Value> </Operation> <Operation Name=\"Annotation\"> <Value> <anyType xsi:type=\"xsd:string\">add; type: text; xpos: 10000; ypos: -11; text-content: ProxV2 3Sigma[um]= $3SigmaProxV2</anyType> <anyType xsi:type=\"xsd:string\">textann; ann#: 1; text-color:#FF0000FF; text-fontsize: 15; background: #40505050; </anyType> </Value> </Operation> </SubPlotActions> </Subplot> <Subplot Row=\"2\" Column=\"2\"> <SubPlotActions> <Operation Name=\"PlotProperty\"> <Value> <anyType xsi:type=\"xsd:string\">yaxis; label:ProxH2[um]</anyType> <anyType xsi:type=\"xsd:string\">curves; sig:F1S5</anyType> </Value> </Operation> </SubPlotActions> </Subplot> <Subplot Row=\"3\" Column=\"1\"> <SubPlotActions> <Operation Name=\"PlotProperty\"> <Value> <anyType xsi:type=\"xsd:string\">yaxis; label:ProxV3[um]; major-grid-width:5; minor-grid-width:1;</anyType> <anyType xsi:type=\"xsd:string\">curves; sig:F1S3</anyType> </Value> </Operation> <Operation Name=\"Annotation\"> <Value> <anyType xsi:type=\"xsd:string\">add; type: text; xpos: 10000; ypos: -11; text-content: ProxV3 3Sigma[um]= $3SigmaProxV3</anyType> <anyType xsi:type=\"xsd:string\">textann; ann#: 1; text-color:#FF0000FF; text-fontsize: 15; background: #40505050; </anyType> </Value> </Operation> </SubPlotActions> </Subplot> <Subplot Row=\"3\" Column=\"2\"> <SubPlotActions> <Operation Name=\"PlotProperty\"> <Value> <anyType xsi:type=\"xsd:string\">yaxis; label:ProxH3[um]</anyType> <anyType xsi:type=\"xsd:string\">curves; sig:F1S6</anyType> </Value> </Operation> </SubPlotActions> </Subplot> </Subplots> <FigureActions> <Operation Name=\"PlotProperty\"> <Value> <anyType xsi:type=\"xsd:string\">plot; grid:on</anyType> <anyType xsi:type=\"xsd:string\">xaxis; label:time[sec.];min:0</anyType> </Value> </Operation> </FigureActions> </Figure> <!--2 figure !--> <Figure IsActive=\"true\" Title=\"Valve Output\" RowNumber=\"5\" ColumnNumber=\"1\"> <Subplots> <Subplot Row=\"1\" Column=\"1\"> <SubPlotActions> <Operation Name=\"PlotProperty\"> <Value> <anyType xsi:type=\"xsd:string\">curves; sig:F1S7</anyType> <anyType xsi:type=\"xsd:string\">yaxis; label:Valve1[V]</anyType> </Value> </Operation> </SubPlotActions> </Subplot> <Subplot Row=\"2\" Column=\"1\"> <SubPlotActions> <Operation Name=\"PlotProperty\"> <Value> <anyType xsi:type=\"xsd:string\">yaxis; label:Valve2[V]</anyType> <anyType xsi:type=\"xsd:string\">curves; sig:F1S8</anyType> </Value> </Operation> </SubPlotActions> </Subplot> <Subplot Row=\"3\" Column=\"1\"> <SubPlotActions> <Operation Name=\"PlotProperty\"> <Value> <anyType xsi:type=\"xsd:string\">yaxis; label:Valve3[V]</anyType> <anyType xsi:type=\"xsd:string\">curves; sig:F1S9</anyType> </Value> </Operation> </SubPlotActions> </Subplot> <Subplot Row=\"4\" Column=\"1\"> <SubPlotActions> <Operation Name=\"PlotProperty\"> <Value> <anyType xsi:type=\"xsd:string\">yaxis; label:Pvout[bar]</anyType> <anyType xsi:type=\"xsd:string\">curves; sig:F1S10</anyType> </Value> </Operation> </SubPlotActions> </Subplot> <Subplot Row=\"5\" Column=\"1\"> <SubPlotActions> <Operation Name=\"PlotProperty\"> <Value> <anyType xsi:type=\"xsd:string\">yaxis; label:Pin3[bar]</anyType> <anyType xsi:type=\"xsd:string\">curves; sig:F1S11</anyType> </Value> </Operation> </SubPlotActions> </Subplot> </Subplots> <FigureActions> <Operation Name=\"PlotProperty\"> <Value> <anyType xsi:type=\"xsd:string\">plot; grid:on</anyType> <anyType xsi:type=\"xsd:string\">xaxis; label:time[sec.];min:0</anyType> </Value> </Operation> </FigureActions> </Figure> <!--3 figure !--> <Figure IsActive=\"true\" Title=\"Average Vertical Proximity Sensor\" RowNumber=\"3\" ColumnNumber=\"1\"> <Subplots> <Subplot Row=\"1\" Column=\"1\"> <SubPlotActions> <Operation Name=\"PlotProperty\"> <Value> <anyType xsi:type=\"xsd:string\">yaxis; label:Avg ProxV1[um]; major-grid-width:5; minor-grid-width:1</anyType> <anyType xsi:type=\"xsd:string\">curves; sig:AvgProxV1</anyType> </Value> </Operation> <Operation Name=\"Annotation\"> <Value> <anyType xsi:type=\"xsd:string\">add; type: text; xpos: 10000; ypos: -11; text-content: ProxV1 3Sigma[um]= $3SigmaAvgProxV1</anyType> <anyType xsi:type=\"xsd:string\">textann; ann#: 1; text-color:#FF0000FF; text-fontsize: 15; background: #40505050; </anyType> </Value> </Operation> </SubPlotActions> </Subplot> <Subplot Row=\"2\" Column=\"1\"> <SubPlotActions> <Operation Name=\"PlotProperty\"> <Value> <anyType xsi:type=\"xsd:string\">yaxis; label:Avg ProxV2[um]; major-grid-width:5; minor-grid-width:1</anyType> <anyType xsi:type=\"xsd:string\">curves; sig:AvgProxV2</anyType> </Value> </Operation> <Operation Name=\"Annotation\"> <Value> <anyType xsi:type=\"xsd:string\">add; type: text; xpos: 10000; ypos: -11; text-content: ProxV2 3Sigma[um]= $3SigmaAvgProxV2</anyType> <anyType xsi:type=\"xsd:string\">textann; ann#: 1; text-color:#FF0000FF; text-fontsize: 15; background: #40505050; </anyType> </Value> </Operation> </SubPlotActions> </Subplot> <Subplot Row=\"3\" Column=\"1\"> <SubPlotActions> <Operation Name=\"PlotProperty\"> <Value> <anyType xsi:type=\"xsd:string\">yaxis; label:Avg ProxV3[um]; major-grid-width:5; minor-grid-width:1</anyType> <anyType xsi:type=\"xsd:string\">curves; sig:AvgProxV3</anyType> </Value> </Operation> <Operation Name=\"Annotation\"> <Value> <anyType xsi:type=\"xsd:string\">add; type: text; xpos: 10000; ypos: -11; text-content: ProxV3 3Sigma[um]= $3SigmaAvgProxV3</anyType> <anyType xsi:type=\"xsd:string\">textann; ann#: 1; text-color:#FF0000FF; text-fontsize: 15; background: #40505050; </anyType> </Value> </Operation> </SubPlotActions> </Subplot> </Subplots> <FigureActions> <Operation Name=\"PlotProperty\"> <Value> <anyType xsi:type=\"xsd:string\">plot; grid:on</anyType> <anyType xsi:type=\"xsd:string\">xaxis; label:time[sec.];min:0</anyType> </Value> </Operation> </FigureActions> </Figure> </Figures> </SignalAndFigureConfiguration> '''"
  },
  "LoggingTool/PlotPropertyOperation.html": {
    "href": "LoggingTool/PlotPropertyOperation.html",
    "title": "Plot manipulation PlotProperty operation | SAMBA19x Website",
    "keywords": "Plot manipulation PlotProperty operation The PlotProperty lmpo-operation contains a varios actions. It's value consists of a collection of signal manipulation commands lmpo-cmd . A \" lmpo-cmd \" consists of cmd-name \" italic , polt \" and list of cmd-config seperated by a semicolon \";\" or semicolon+space \"; \". A cmd-config consists of a keyword \" polt \" and a value, they are seperated by a colon \":\" or by a colon+space \": \". Some cmd_configs are valueless. The following table describes all possible lmpo-cmds of the Operation lmpo-operation . lmpo-cmd Description { curves ; curve#1 :x; curve#2 :x; ... ; curve#n :x } add the listed signals \"curves\" from the signals dictionary to the plot. { plot ; plot properties } set the plot's properties. { tracker-string-format ; format :x; } set the format of the plot's tracker. { add-curve-from-csv ; file :x; } add a signal from csv file to the signals dictionary. { default-curves-color ; curve#1 :x; curve#1 :x; ...; curve#x :x } specifies the default curves colors of the plot. { curves-remove ; curve#1 :; curve#1 :; ...; curve#x : } chnages the curves colors of listed curves. { curves-line-color or curves-color ; curve#1 :color; curve#2 :color; ... ; curve#n :color } sets the curve line color of the listed curves. Color's value format is ARGB (#FFFFFFFF)} { curves-line-style ; curve#1 :style; curve#2 :style; ... ; curve#n :style } sets the curve line style, style values are {\"automatic\",\"dash\",\"dashdashdot\",\"dashdashdotdot\",\"dashdot\",\"dashdotdot\",\"dot\",\"longdash\",\"longdashdot\",\"longdashdotdot\"}. { curves-line-thickness ; curve#1 :thick; curve#2 :thick; ... ; curve#n :thick } sets the curve line thickness of the listed curves.} { curves-title ; curve#1 :title; curve#2 :title; ...; curve#n :title } sets the curve title of the listed curves.} { xaxis ; x-axis properties } | set the x-axis properties. { yaxis ; y-axis properties } | set the y-axis properties. plot lmpo-cmd configuration cmd-config using the plot cmd one could set the plot properties listed in the following table. plot property Description { title :x } changes the plot title. { title-color :x } changes the title's color of the plot. Color's value format is ARGB (#FFFFFFFF). { title-fontsize :x } set the title font size. { title-font :x } set the title font type. possible font types () { title-fontweight :x } set the title font weight. possible font weights () { legend-style :x } set the legend style x{inside,outside}. { legend : x switch legend on off x{on,off} { grid : x switch grid on off x{on,off} { background :x } set the background color of the plot. Color's value format is ARGB (#FFFFFFFF). { legend-text-color :x } set the legend text color . Color's value format is ARGB (#FFFFFFFF). { legend-background :x } set the legend text color . Color's value format is ARGB (#FFFFFFFF). { legend-text-fontsize :x } set the legend text font size. { border-thickness :x } set the thickniss of the plot's border. the thickniss is given in pixel. { border-color :x } set the color of the plot's border. Color's value format is ARGB (#FFFFFFFF). { rescale :x } rescale the plot. X-Axis properties using the plot cmd one could set some plot properties listed in the following table. x-axis property Description { log : {on|off} } set the y-axis label. { label :x } set the x-axis label. { label-fontsize :x } set the x-axis label font size. { label-color :x } set the x-axis label color. Color's value format is ARGB (#FFFFFFFF). { fontsize :x } set the x-axis font size. possible font x{\"Arial\", \"Calibri\", ...} { min :x } set the x-axis minimum. { max :x } set the x-axis maximim. { text-color :x } set the x-axis text color . Color's value format is ARGB (#FFFFFFFF). { major-grid-width :x } set the x-axis major grid width. { minor-grid-width :x } set the x-axis minor grid width. { major-grid-color :x } set the x-axis major grid color. Color's value format is ARGB (#FFFFFFFF). { minor-grid-color :x } set the x-axis minor grid color.color's value format is ARGB (#FFFFFFFF). { tick-color :x } set the x-axis tick color.color's value format is ARGB (#FFFFFFFF). { line-color :x } set the x-axis line color.color's value format is ARGB (#FFFFFFFF). Y-Axis properties using the plot cmd one could set some plot properties listed in the following table. y-axis property Description { log : {on|off} } set the y-axis label. { label :x } set the y-axis label. { label-fontsize :x } set the y-axis label font size. { label-color :x } set the y-axis label color. Color's value format is ARGB (#FFFFFFFF). { fontsize :x } set the y-axis font size. possible font types () { min :x } set the y-axis minimum. { max :x } set the y-axis maximim. { text-color :x } set the x-axis text color . Color's value format is ARGB (#FFFFFFFF). { major-grid-width :x } set the y-axis major grid width. { minor-grid-width :x } set the y-axis minor grid width. { major-grid-color :x } set the y-axis major grid color. Color's value format is ARGB (#FFFFFFFF). { minor-grid-color :x } set the y-axis minor grid color.color's value format is ARGB (#FFFFFFFF). { tick-color :x } set the y-axis tick color.color's value format is ARGB (#FFFFFFFF). { line-color :x } set the y-axis line color.color's value format is ARGB (#FFFFFFFF). <Operation Name=\"PlotProperty\"> <Value> <anyType xsi:type=\"xsd:string\">yaxis; label:ProxV2[um]; major-grid-width:5; minor-grid-width:1;</anyType> <anyType xsi:type=\"xsd:string\">xaxis; label:Time[sec]; major-grid-width:10; minor-grid-width:5;</anyType> <anyType xsi:type=\"xsd:string\">curves; sig:F1S2</anyType> <anyType xsi:type=\"xsd:string\">plot; grid:on; title:PlotTitle; title-font-size:14; title-font-color: #FFFF0000; legend: on; legend-style: inside</anyType> </Value> </Operation>"
  },
  "LoggingTool/gui/gettingstarted.html": {
    "href": "LoggingTool/gui/gettingstarted.html",
    "title": "Getting started | SAMBA19x Website",
    "keywords": "Getting started Your PC can communicate with the opticon controller with a USB connection or se-rial (RS232) connection. Use an A/B USB cable or a null modem cable. Make sure that the FTDI USB-To-Serial converter driver is installed. Start the SiDiMaT19xA program with a right-click on the SiDiMaT19xA desktop shortcut and select Run as Admin. Alternative you could start it from the window start menu. Start-Up After the start of the program choose the connection device and confirm it with the “Connect” button. To talk to the controller SiDiMaT19xA uses the communication server like the other SAMBA software package tools. Note1: Ensure that the selected com port number is configured by the “Communica-tion Server Configuration Tool”. Otherwise the connection will not be established. Communication Server Configuration Tool Note2: If you connect via the USB port, the port will be shown as an additional com port (Virtual Com Port). Figure: Connection with a controller."
  },
  "LoggingTool/gui/intro.html": {
    "href": "LoggingTool/gui/intro.html",
    "title": "Introduction | SAMBA19x Website",
    "keywords": "Introduction The SiDiMaT19xA tool has been built to visualize the IDE-Opticon controller signals supported by the opticon firmware. Furthermore, SiDiMaT19xA allows to start an au-to measurement containing many of SiDiMaT19xA measurements. Warning SiDiMaT19xA is not compatible for controller with a running firmware ver-sion older than 3.3.xx. Intended Audience The software and this document is intended for users of an IDE vibration isolation system. Requirements In order to run this software, the following requirements must be met: Windows 7®, Windows 8®, or later version. Personal computer with x86- or x64-based microprocessor 2.8 GHz or higher and 4GB RAM or higher are recommended. SVGA-resolution with a minimum of 1600x900 pixel and 16-Bits high colors. Mouse or compatible pointing device Microsoft .Net Frame work 4.5.2 or higher. Contact Integrated Dynamics Engineering GmbH Hermannstrasse 9-13 65479 Raunheim, GERMANY Phone: +49 (0)6142 9400-0"
  },
  "LoggingTool/gui/knownbugs.html": {
    "href": "LoggingTool/gui/knownbugs.html",
    "title": "KNOWN BUGS AND PROBLEMS | SAMBA19x Website",
    "keywords": "KNOWN BUGS AND PROBLEMS The following section lists the currently known bugs. These bugs will be resolved in future versions of the software. Description Date Version Status"
  },
  "LoggingTool/gui/Sidimat19xA_Operation.1.html": {
    "href": "LoggingTool/gui/Sidimat19xA_Operation.1.html",
    "title": "| SAMBA19x Website",
    "keywords": ""
  },
  "sidimat19xa/LoggValue.html": {
    "href": "sidimat19xa/LoggValue.html",
    "title": "SiDiMaT19xA auto measurement Logg operation value | SAMBA19x Website",
    "keywords": "SiDiMaT19xA auto measurement Logg operation value The Logg operation basically services to log data from the controller using the logging functionality. Furthermore it prepares the logged data and plots it in a plot-figure. The value of this operation is a collection of the values in the following table (values have to be used without brackets). The value first word \" italic \" is keyword and has to be written correct. Value Description { load-logg-setting-file ;path} Opens logging setting file and send it to controller. Path has the extension .Logg19xConfig . { load-logg-setting-file ;path} Opens logging setting file and send it to controller. Path has the extension .Logg19xConfig . { load-logg-setting-file ;path} Opens logging setting file and send it to controller. Path has the extension .Logg19xConfig ."
  },
  "sidimat19xa/ReportValue.html": {
    "href": "sidimat19xa/ReportValue.html",
    "title": "SiDiMaT19xA auto measurement Report operation value | SAMBA19x Website",
    "keywords": "SiDiMaT19xA auto measurement Report operation value The Report sam-operation basically services to generate a report containing SiDiMaT19xA measurement or a logging measurement graphs and result table of the auto specification conditions. The value of this operation is a collection of the values in the following table (values have to be used without brackets). The value first word \" italic \" is a keyword and has to be written correct. Value Description { par1 ;text} add the text content as paragraph1 \"header1\". { par2 ;text} add the text content as paragraph2. { par3 ;text} add the text content as paragraph3. { par4 ;text} add the text content as paragraph4. { par5 ;text} add the text content as paragraph5. { par6 ;text} add the text content as paragraph6. { text ;text} add the text to the markdown string. { pic ;filepath} add a picture to the markdown string. when Path is not absolute then it is relative to the first evaluated auto measurement file path (original-path). { tabelheader ;colh1;colh2; ...} add a table header with the headers {colh1, colh2, ...}. { tabelrow ; result1 ; result2 ; ...} add a new row to the table with the cells content {result1, result2, ....}. Cells content is a text or a specification result (see description below). The table rows have to directly follow the table header. { save ;path} save the mardown string to .md file (filename) and convert the markdown string to a html. furthermore it convert the html file to a pdf file. { doc-prop ; property1 : value; property1 : value; ...} sets document properties like author, serial number ... etc. each property consist of two by a double point seperated terms. the first one is the property name { serialnr , author , tester , title , systemname } and the second term is the property value. { excute ;cmd} excutes the command line cmd. The excuting path is the original-path. If cmd is a .bat file then the file will be executed. Specification results Here is a list with possible specification result could be used as table cell content. Specification result starts with a specification opeartion name (spec-op-name) followed by dot (.) followed by specicfication operation value keyword (spec-op-key) followed by dot (.) followed by specification parameter (spec-par) which will be the cell content. Syntax: {spec-op-name.spec-op-key.spec-par} spec_name : the name of the SpeckCheck operation example (CheckSpec_#VelXtrasOl). spec-op-key : one of the following specification check operations: max : the maximum y-value. max-pos : the x-position of the maximum y-value. ocl-lbw : the isolation lower active band width value. ocl-hbw : the isolation lower active band width value. ocl-damp : the isolation active damping. check-point : the y-value at a specific point at the x-axis. min : the minimum y-value. pk-pk : the peak to peak y-value. check-upper-spec-curve : check if a curve \"signal\" lies under a spec-curve. spec-par : one of the following parameter: minmax : the specification range [min max]. measured : measured value. result : specification check status of the spec-op-key the result is one from {Passed, Failed}. Examples 1 Example <Operation Name=\"Report\"> <Value> <anyType xsi:type=\"xsd:string\">para1;Force Mobility Axis Wise Open Loop Measurements at raw input </anyType> <anyType xsi:type=\"xsd:string\">para2;Force Mobility Measurements</anyType> <anyType xsi:type=\"xsd:string\">text;Here are the force mobility measurements. Measured at raw input during the Open loop.</anyType> </Value> </Operation> 2 Example <Operation Name=\"Operation\"> <Value> <anyType xsi:type=\"xsd:string\">directory;reset:dummy</anyType> <anyType xsi:type=\"xsd:string\">excit-setting;type:0; filterusage:off</anyType> </Value> </Operation> <Operation Name=\"Report\"> <Value> <anyType xsi:type=\"xsd:string\">para2;Specification Result Tables</anyType> <anyType xsi:type=\"xsd:string\">text;Additional Text could be added here.</anyType> <anyType xsi:type=\"xsd:string\">para3;Force Mobility Resonance Frequncy</anyType> <anyType xsi:type=\"xsd:string\">tableheader;Axis;Min;Max;Unit;Measured Value;Result</anyType> <anyType xsi:type=\"xsd:string\">tablerow;Xtrans;CheckSpec_#FMXt7OCLAW.max-pos.specmin;CheckSpec_#FMXt7OCLAW.max-pos.specmax;Hz;CheckSpec_#FMXt7OCLAW.max-pos.measured;CheckSpec_#FMXt7OCLAW.max-pos.result</anyType> <anyType xsi:type=\"xsd:string\">tablerow;Ytrans;CheckSpec_#FMYt7OCLAW.max-pos.specmin;CheckSpec_#FMYt7OCLAW.max-pos.specmax;Hz;CheckSpec_#FMYt7OCLAW.max-pos.measured;CheckSpec_#FMYt7OCLAW.max-pos.result</anyType> <anyType xsi:type=\"xsd:string\">tablerow;Ztrans;CheckSpec_#FMZt7OCLAW.max-pos.specmin;CheckSpec_#FMZt7OCLAW.max-pos.specmax;Hz;CheckSpec_#FMZt7OCLAW.max-pos.measured;CheckSpec_#FMZt7OCLAW.max-pos.result</anyType> <anyType xsi:type=\"xsd:string\">tablerow;Xrot;CheckSpec_#FMXr7OCLAW.max-pos.specmin;CheckSpec_#FMXr7OCLAW.max-pos.specmax;Hz;CheckSpec_#FMXr7OCLAW.max-pos.measured;CheckSpec_#FMXr7OCLAW.max-pos.result</anyType> <anyType xsi:type=\"xsd:string\">tablerow;Yrot;CheckSpec_#FMYr7OCLAW.max-pos.specmin;CheckSpec_#FMYr7OCLAW.max-pos.specmax;Hz;CheckSpec_#FMYr7OCLAW.max-pos.measured;CheckSpec_#FMYr7OCLAW.max-pos.result</anyType> <anyType xsi:type=\"xsd:string\">tablerow;Zrot;CheckSpec_#FMZr7OCLAW.max-pos.specmin;CheckSpec_#FMZr7OCLAW.max-pos.specmax;Hz;CheckSpec_#FMZr7OCLAW.max-pos.measured;CheckSpec_#FMZr7OCLAW.max-pos.result</anyType> </Value> </Operation>"
  },
  "sidimat19xa/am-cmds/definitions.html": {
    "href": "sidimat19xa/am-cmds/definitions.html",
    "title": "Definitions and abbreviations | SAMBA19x Website",
    "keywords": "Definitions and abbreviations Here are some definitions and abbreviations related to the sidimat auto measurement. Note sam : sidimat19xA auto measurement. Note sam-file : this is a sidimat19xA auto measurement file with the file extension .SiDiMaTAMF . Basically it consists of a collection of AutoMeasurement-Objects Automeasurement . Each AutoMeasurement-object consists of a collections of operations the so called \"sam-operation\" . Note sam-operation : contains different auto measurement actions. It basically consists of a collection of operation-name and optionally a value. It's value contains a list of sam commands \" sam-cmd \". Note Some sam-operation are valueless. Note sam-cmd : consists of cmd-name \" italic , polt \" and optionally a list of cmd-config objects seperated by a semicolon \";\" or semicolon+space \"; \". cmd-name and cmd_config objects are seperated by a semicolon \";\" or semicolon+space \"; \". Some sam-cmd are cmd-config-less. Note cmd-config : consists of cmd-keyword \" polt \" and value the cmd-keyword and its value are seperated by colon \":\" or colon+space \": \". Some cmd_configs consist only of a keyword (valueless). Note filepath : If filepath string contains a colon ':' or start with double backslash \"\\\\\", then absolute path is assummed, otherwise the path is assumed to be relative to the working-directory . Note path : If path string contains a colon ':' or start with double backslash \"\\\\\", then absolute path is assummed, otherwise the path is assumed to be relative to the working-directory . Note original-directory : the directory where the first sam file is opened and executed. Note working-directory : the working directory for sam-operation . By starting the a sam file the working-directory is set to the original-directory . Note sytem-loop-status-actions : READ, CACHE, RESTORE, OVERALLON, OVFFON, PFFON, PNEUMON, OVERALLOFF, OVFFOFF, PFFOFF, PNEUMOFF, TEMPSENSORON, TEMPSENSOROFF, ETHERCATSFFON, ETHERCATSFFOFF, ETHERCATMOTON, ETHERCATMOTOFF. Note lmpo-operation : contains different auto measurement actions. It basically consists of a collection of operation-name and optionally a value. It's value contains a list of sam commands \" lmpo-cmd \". Note Some lmpo-operation are valueless. Note lmpo-cmd : consists of cmd-name \" italic , polt \" and optionally a list of cmd-config objects seperated by a semicolon \";\" or semicolon+space \"; \". cmd-name and cmd_config objects are seperated by a semicolon \";\" or semicolon+space \"; \". Note Some lmpo-cmd are cmd-config-less."
  },
  "sidimat19xa/am-cmds/intro.html": {
    "href": "sidimat19xa/am-cmds/intro.html",
    "title": "Sidimat19xA Auto Measurement | SAMBA19x Website",
    "keywords": "Sidimat19xA Auto Measurement Overview This section describes all auto measurement operation \"sam-operation\" , which could be included in the sidimat19xa auto measurement file \"sam-file\" . The next table lists all sam-operations. sam-operations An operation consists of a operation name and a value. The value is a collection of one or many command strings, which triggers an action. sam-operation name Value (sam-cmd) Description CheckSpec See CheckSpec Checks the specification of one or many curves of an IDEFigure figure. Report see Report Writes an entry to the auto measurement report. Its value contains a collection of actions (operations). OpenAndExcuteAutoMeasurementFile { filepath } Opens the auto measurement file filepath and excutes it. The filepath has the extension .SiDiMaTAMF . Measure {None} Evaluates the sidimat19xa measurement. RCICommand {Valid ascii RCI-Command} Sends the ascii RCI-Command to controller. InvokeRCIMethod {Not supported} SetParameter {Not supported} Operation See Operation SetTraceInfo { } Configures the trace setting parameters. SetExcitSig { } Sets the setting of the excitation signal. SetExcitFil {filnum;type;p1;p2;p3;p4;p5} Sets an excitation file. SetExcitSetting {iosig} Set the injection point of the excitation signal. The value of this operation is from type IOSignalType {type mainindex subindex}. ExcitFilterUsage {on or off} toggles the filtering of the excitation signal on/off. VelIndividualLoopStatus {status} Sets the status of the individual velocity loop. the format of status is binary. OverAllActiveLoopStatus {status} Sets the OverallActive status. The value status could be one from the following states {on, off}. SystemLoopStatus {action} Evaluates an system loop status action. The value action could be one action or many by space seperated actions from the following actions {Read, Cache, Restore, OverAllOff, OverAllOff, FFOn, FFOff, PFFOn, PFFOff, PneumOn, PneumOff}. CacheMeasurement {none} caches the actual sidimat measurement. ClearAllCachedMeasurement {none} clears all cached sidimat measurements. Waitms {ms} Forces the auto measuring thread to sleep for the specific time ms. ms is given in milisecond. ChangeCreateDirectory { path } Sets the working-directory to path. If the path doesn't exist, then it will be created. ResetDirectory {none} Sets the working-directory to original-directory . SaveRawMeasurement { filepath } Saves Sidimat measurement including the cached measurement to .sidimat19x file (path). SaveFRFFigure { filepath } Saves the frequency response figure of Sidimat measurement including the cached measurement to .IDEFigure file (filepath). SaveTimeSpecFigure { filepath } Saves the time/spectrum figure of Sidimat measurement including the cached measurement to .IDEFigure file (filepath). SaveFRF2Picture { filepath } Saves the frequency response figure of Sidimat measurement including the cached measurement to .png file (filepath). SaveTimeSpec2Picture { filepath } Saves the time/spectrum figure of Sidimat measurement including the cached measurement to .png file (filepath). RescalePlots {plots} Rescale the sidimat plots listed is the value plots. The value plots could be one plot or many by space seperated plots from the following plots {Amplitude, Phase, Coherence, Time1, Time2, Spectrum1, Spectrum2}. AddCurveFromCsvFileTo { filepath ;plots} Adds curve x/y-pairs from a simicolon seperated .csv file ( filepath ) to a sidimat plot. The value plots could be one plot or many by space seperated plots from the following plots {Amplitude, Phase, Coherence, Time1, Time2, Spectrum1, Spectrum2}. Save See Save Saves an idefigure to file or picture. It also saves a sidimat19x raw measurement. Logg See Logg Handles the internal logging actions. Measurement See Measurement Value Handles the internal logging actions."
  },
  "sidimat19xa/am-cmds/MeasurementSamOperation.html": {
    "href": "sidimat19xa/am-cmds/MeasurementSamOperation.html",
    "title": "| SAMBA19x Website",
    "keywords": ""
  },
  "sidimat19xa/am-cmds/OperationSamOperation.html": {
    "href": "sidimat19xa/am-cmds/OperationSamOperation.html",
    "title": "SiDiMaT19xA auto measurement Report operation value | SAMBA19x Website",
    "keywords": "SiDiMaT19xA auto measurement Report operation value The Operation sam-operation contains a varios auto measurement actions. It's value consists of a collection of auto measurement commands sam-cmd . A \" sam-cmd \" consists of cmd-name \" italic , polt \" and list of cmd-config seperated by a semicolon \";\" or semicolon+space \"; \". A cmd-config consists of a keyword \" polt \" and a value, they are seperated by a colon \":\" or by a colon+space \": \". Some cmd_configs are valueless. The following table describes all possible sam-cmds of the Operation sam-operation . sam-cmd Description { measure } start sidimat measurement. { rci-command ; command :val } send val to controller as ASCII rci-command, text has to be a valid rci-command. () { pneum-system ; move :{up,down}; setpoint :val; tolerance :val; softupheight : val; timeout : val; wait-for :{ok,down,up} } excute a pneumatic system action pneum-system sam-cmd .. { trace-setting ; samples :x; undersample :x; average :x; anti-aliasing :(on/off) } set the trace settings. x is a number. { trace-sig ; signum :x; type :x; mainindex :x; subindex :x } config a trace signal, x starts by zero. { excit-sig ; type :x; mainindex :x; subindex :x } config injection point signal, x starts by zero. { excit-filter ; filnum :x; type :x; par1 :x; par2 :x; par3 :x; par4 :x; par5 :x } config an excitation filter. { excit-setting ; type :x; par1 :x; par2 :x; par3 :x; par4 :x; filterusage :(on/off) } config the excitation signal setting. { system-loopstatus ; status : S1 S2 ... Sn} toggles a control loop on/off. status parameters should be one or many by a space seperated sytem-loop-status-actions . { individual-loopstatus ; velocity :x; position :x; pneumatic :x } set the individual loop status of one or many control loops. { cache-measurement ;} cache the actual sidimat measurement. { clear-measurement ; x } clear the chached sidimat measurement, x is one of {measurements1, measurement2, ... } . { clear-cached-measurements ; } clear all chached sidimat measurements . { waitms ; time :ms} wait the time period ms. ms is millisecond. { directory ; file : path; reset } changes the working directory to file or reset the working directory to original-directory. { rescale-plots ; plot1 : plotname; plot2 :plotname; ...} rescale the plots with the given plotnames. plotname is one of {Amplitude, Phase, Coherence, Time1, Time2, Spectrum1, Spectrum2}. { add-from-csv ; file : filepath ; title :; plot1 : plotname; plot2 :plotname; ...} Adds curve x/y-pairs from a simicolon seperated .csv file (filepath) to a sidimat plot listed here. The plotname is one of {Amplitude, Phase, Coherence, Time1, Time2, Spectrum1, Spectrum2}. title is optional and specifies the curve name. { spec-failed-action ; action : x} sets the action which should be triggered by failed specification check. x is one of {inform-user,user-confirmation-to-continue,stop-auto-measurement, none} Examples Example1 The following operation actions listed below measures the open/closed force mobilty transfer function of the Yrot axis. <Operation Name=\"Operation\"> <Value> <anyType xsi:type=\"xsd:string\">individual-loopstatus; velocity:011111</anyType> <anyType xsi:type=\"xsd:string\">clear-cached-measurements;</anyType> <anyType xsi:type=\"xsd:string\">trace-sig;signum:2; type:2; mainindex:5; subindex:-1</anyType> <anyType xsi:type=\"xsd:string\">excit-sig;type:4; mainindex:5; </anyType> <anyType xsi:type=\"xsd:string\">waitms; time:2000;</anyType> <!-- cmd-config-less sam-cmd --> <anyType xsi:type=\"xsd:string\">measure;</anyType> <anyType xsi:type=\"xsd:string\">cache-measurement;</anyType> <anyType xsi:type=\"xsd:string\">individual-loopstatus; velocity:111111</anyType> <anyType xsi:type=\"xsd:string\">waitms; time:2000;</anyType> <anyType xsi:type=\"xsd:string\">measure;</anyType> </Value> </Operation> Example2 <!-- Yrot Axis--> <AutoMeasurent Name=\"FMYrotRawOCL\" IsEnabled=\"true\"> <OperationList> <Operation Name=\"Operation\"> <Value> <anyType xsi:type=\"xsd:string\">individual-loopstatus; velocity:101111</anyType> <anyType xsi:type=\"xsd:string\">clear-cached-measurements;</anyType> <anyType xsi:type=\"xsd:string\">trace-sig;signum:2; type:2; mainindex:4; subindex:-1</anyType> <anyType xsi:type=\"xsd:string\">excit-sig;type:4; mainindex:4; </anyType> <anyType xsi:type=\"xsd:string\">waitms; time:2000;</anyType> <anyType xsi:type=\"xsd:string\">measure;</anyType> <anyType xsi:type=\"xsd:string\">cache-measurement;</anyType> <anyType xsi:type=\"xsd:string\">individual-loopstatus; velocity:111111</anyType> <anyType xsi:type=\"xsd:string\">waitms; time:2000;</anyType> <anyType xsi:type=\"xsd:string\">measure;</anyType> </Value> </Operation> <Operation Name=\"Save\"> <Value> <anyType xsi:type=\"xsd:string\">frf2fig;file:Yrot_Raw_OCL_AW_FRF.idefigure</anyType> <anyType xsi:type=\"xsd:string\">time2fig;file:Yrot_Raw_OCL_AW_TimeSpec.idefigure</anyType> <anyType xsi:type=\"xsd:string\">frf2pic;file:Yrot_Raw_OCL_AW_FRF.png</anyType> <anyType xsi:type=\"xsd:string\">time2pic;file:Yrot_Raw_OCL_AW_TimeSpec.png</anyType> <anyType xsi:type=\"xsd:string\">raw;file:Yrot_Raw_OCL_AW.sidimat19x</anyType> </Value> </Operation> <Operation Name=\"CheckSpec_#FMYr0OCLAW\"> <Value> <anyType xsi:type=\"xsd:string\">cache;file:Yrot_Raw_OCL_AW_FRF.idefigure</anyType> <anyType xsi:type=\"xsd:string\">max; sig:F1P1S2; specmin:18.5; specmax:23.7;rmin:1;rmax:15</anyType> <anyType xsi:type=\"xsd:string\">max-pos; sig:F1P1S2; specmin:2.0; specmax:3.0; rmin:1; rmax:15</anyType> <anyType xsi:type=\"xsd:string\">ocl-lbw; olsig:F1P1S2; clsig:F1P1S1; rmin:1; rmax:14; specmax:1.5</anyType> <anyType xsi:type=\"xsd:string\">ocl-hbw;olsig:F1P1S2; clsig:F1P1S1; specmin:11; rmin:1; rmax:14;</anyType> <anyType xsi:type=\"xsd:string\">ocl-damp;olsig:F1P1S2; clsig:F1P1S1; specmin:17; rmin:1; rmax:14;</anyType> </Value> </Operation> <Operation Name=\"Report\"> <Value> <anyType xsi:type=\"xsd:string\">para3;Yrot Force Mobility at raw input Open/Close Loop</anyType> <anyType xsi:type=\"xsd:string\">text;Here are the force mobility measurements. Measured at the velocity axes raw input</anyType> <anyType xsi:type=\"xsd:string\">pic;Measurements\\ForceMobility\\Raw_OCL_AW\\Yrot_Raw_OCL_AW_FRF.png</anyType> </Value> </Operation> </OperationList> </AutoMeasurent> 3 Example"
  },
  "sidimat19xa/am-cmds/SaveSamOperation.html": {
    "href": "sidimat19xa/am-cmds/SaveSamOperation.html",
    "title": "SiDiMaT19xA auto measurement Save operation value | SAMBA19x Website",
    "keywords": "SiDiMaT19xA auto measurement Save operation value The Save operation basically services to save a SiDiMaT19xA measurement or a logging measurement to a file or a picture. The value of this operation is a collection of the values in the following table (values have to be used without brackets). The value first word \" italic \" is keyword and has to be written correct. Value Description { frf2pic ;path} saves the SiDiMaT19xA frequency response measurement to .png file (path). Path has the extension .png. { frf2fig ;path} saves the SiDiMaT19xA frequency response measurement to .IDEFigure file(path). The .IDEFigure format is a kind of matlab format. Path has the extension .IDEFigure. { time2pic ;path} saves the SiDiMaT19xA time/spectrum measurement to .png file(path). Path has the extension .png. { time2fig ;path} saves the frequency response measurement to .png file(path). Path should have the extension .png. { raw ;path} saves the SiDiMaT19xA complete measurement to .sidimat19x file (path). The .IDEFigure format is a kind of matlab format. Path has the extension .sidimat19x. { logg2fig ;path,fignum} saves the logging measurement figure with the number (fignum) to .IDEFigure file (path). If fignum is omitted the first figure is saved. Path has the extension .IDEFigure. { logg2pic ;path,fignum} saves the logging measurement figure with the number (fignum) to .png file. If fignum is omitted, the first figure is saved. Path has the extension .IDEFigure. Examples 1 Example The following operation actions listed below measures the open/closed force mobilty transfer function of the Yrot axis. <Operation Name=\"Operation\"> <Value> <anyType xsi:type=\"xsd:string\">individual-loopstatus; velocity:011111</anyType> <anyType xsi:type=\"xsd:string\">clear-cached-measurements;</anyType> <anyType xsi:type=\"xsd:string\">trace-sig;signum:2; type:2; mainindex:5; subindex:-1</anyType> <anyType xsi:type=\"xsd:string\">excit-sig;type:4; mainindex:5; </anyType> <anyType xsi:type=\"xsd:string\">waitms; time:2000;</anyType> <anyType xsi:type=\"xsd:string\">measure;</anyType> <anyType xsi:type=\"xsd:string\">cache-measurement;</anyType> <anyType xsi:type=\"xsd:string\">individual-loopstatus; velocity:111111</anyType> <anyType xsi:type=\"xsd:string\">waitms; time:2000;</anyType> <anyType xsi:type=\"xsd:string\">measure;</anyType> </Value> </Operation>"
  },
  "sidimat19xa/gui/description.html": {
    "href": "sidimat19xa/gui/description.html",
    "title": "GUI DESCRIPTION | SAMBA19x Website",
    "keywords": "GUI DESCRIPTION Control Panel Connection tab Control Buttons Bar Excitation/Diag tab Open/Save sidimat parameter setting tab Dies ist ein Beispiel für einen Referenz-Link. Dies ist [ein Beispiel][figure2] für einen Referenz-Link. Dies ist ein Beispiel für einen Referenz-Link. The new SiDiMaT19xA tools basically consists of two main panels “Control panel and Graphs panel”. The control panel contains settings and the graphs panel displays the plots of the measured signal. (See next figure). Figure: SiDiMaT19x \"GUI overview Control Panel The control panel contains on the top a control buttons and a few setting tabs “Con-nection, Graphs, Excitation, Trace Setting …etc”. Control Buttons Bar The control buttons bar consists of a few buttons to switch the between time and frequency response plots and to save, cache, open, save and add sidimat19xa measurement. Control Item Description Toggles to the time/spectrum plot view. Toggles to the frequency response plot view. Caches the current sidimat19x measurement. Deletes the last cached sidimat19x measurement. Adds a sidimat19x measurement to the current one. Opens a sidimat19x measurement. Saves the current sidimat19x measurement. Opens an auto measurement file and executes it. Table: Control buttons bar Connection Tab The “Connection” tab allows you to connect or disconnect to a controller. Figure 4.1.2: Connection tab. Use \"Connect\" button to establish the connection with the controller. Use “Disconnect” button to disconnect the communication. Use “Terminate Comm Server and Connect” button to close the Comm Server ses-sion, if one is already started and to connect with a new session. This option is rec-ommended after a communication trouble. Use “Update Comm Ports list” button to refresh lists of the available com ports. Figure: Connect Page after a successful connection with controller. Excitation/Diag Tab Using the excitation tab the noise injection point, the excitation setting “type and pa-rameters” and the excitation filter settings and usage could be adjusted. Figure 4.1.5: Excitation/Diag Tab. Control Item Description m Click “Accept Change” button to accept the modification of the excitation setting and to send it to the controller. d Specifies the excitation signal type. d Toggles the noise filter usage On/Off and specifies the excitation filters. d Specifies the injection node “signal” of the excitation signal. Table 4.1.2: Excitation Tab Control Items. Excitation Type Parameters White Noise (1) “Gain [-1,+1]” the gain range [-1,+1] corresponds to [-32000, +32000 digits]. Sine Wave (1) “Gain [-1,+1]” the gain range [-1,+1] corresponds to [-32000, +32000 digits]. (2) Sine wave frequency in Hz. Duty Cycle (1) “Gain [-1,+1]” the gain range [-1,+1] corresponds to [-32000, +32000 digits]. (2) High Period in millisecond. During this peri-od the signal amplitude equals the adjusted “Gain”. (3) Low Period in millisecond. During this period the signal amplitude is set to zero. Chirp Sine “recursive” (1) “Gain [-1,+1]” the gain range [-1,+1] corresponds to [-32000, +32000 digits]. (2) Start “lowest” frequency of the chirp sine. (3) End “Highest” frequency of the chirp sine. (4) Time Period of the chirp sine in second. Table 4.1.3: Excitation Types and their Parameters. Trace Setting Tab The trace setting tab allows to configure all the trace parameter. Control Item Description Click “Channel0” button to select the first signal to be traced. Click “Channel1” button to select the second signal to be traced. Specifies the trace length. Specifies under sampling rate. Toggles the usage of the Anti-Aliasing filter On/Off. Specifies the average number of the meas-urement. Starts/Stops the measurement. This option appears only for firmware with fast data acquiring support. Enables this option to accelerate the trace data acquiring. Table 4.1.4: Trace Setting Tab Control Item. Figure 4.1.6: Trace Setting Tab. Figure 4.1.7: Trace Setting Tab with fast Data Load Support. Open/Save Sidimat Parameter Setting Tab Control Item Description Click to load sidimat parameters from a si-dimat configuration file “SiDiMaT19xAConfig”. Click to save the actual sidimat parameters to a sidimat configuration file “SiDiMaT19xAConfig”. Table 4.1.6: Save/Load Sidimat Parameter Setting Control Items. Figure 4.1.9: Save/Load Sidimat Parameter Setting Tab."
  },
  "sidimat19xa/gui/filestructure.html": {
    "href": "sidimat19xa/gui/filestructure.html",
    "title": "MEASUREMENT MAT FILES STRUCTURE | SAMBA19x Website",
    "keywords": "MEASUREMENT MAT FILES STRUCTURE All sidimat measurement (*.sidimat19x, *.idefigure) are saved in matlab format. .idefigure matlab structure description IDEFigure consist of MxN Graph-Matrix (Plot-Matrix, Model-Matrix) where M is the RowNumber and N is the ColumnNumber of the iDEFigure. Graph-Matrix Structure by 3x3 Graph-Matrix: | | | | -|-|- Model0 | Model1 | Model2 Model3 | Model4 | Model5 Model6 | Model7 | Model8 >> xx=load(\"xrot_raw_frf_ol_m.idefigure\") xx = //IDEFigure structure scalar structure containing the fields: MeasurementType = IdeFigure //this is the measurement type Version = 1 // IDEFigure Structure version FigureTitle = //this is title of the figure FigureTitleFontSize = 14 //font size of the figure title RowNumber = 3 //Row numbers in figure ColumnNumber = 1 //column number in figure, the graph number Model0 = // Graph-Structure, first graph in the 3x1 Graph-Matrix scalar structure containing the fields: Version = 1 // Graph structure Version Title = //Title of the Graph LogX = 1 //Logarithmic x-axis (1: logarithmic, 0:linear) LogY = 0 //Logarithmic x-axis (1: logarithmic, 0:linear) Grid = on //Grid status (on,off) Legend = 1 //Legend status (0,1) Xaxis = //x-axis structure scalar structure containing the fields: Version: 1x1 scalar //Version of the axis structure Title: 0x0 sq_string //Label of the x-axis TitleFontSize: 1x1 scalar //title font size Prop: 1x4 matrix //Axis Scale Properties containing Scale {min max minorstep majorstep} Yaxis = //Y-axis structure (see x-axis) scalar structure containing the fields: Version: 1x1 scalar Title: 1x14 sq_string TitleFontSize: 1x1 scalar Prop: 1x4 matrix Annotations = //Annotation structure scalar structure containing the fields: Version: 1x1 scalar // Annotations structure Version Annotation0: 1x1 scalar struct //Annotation structure Annotation1: 1x1 scalar struct //Annotation structure Annotation2: 1x1 scalar struct //Annotation structure Series = //Series “Curves” structure scalar structure containing the fields: Serie1: 1x1 scalar struct //Serie “Curve” structure Model1 = Table 5.1.1: IDEFigure matlab structure. >> xx.Model0.Series.Serie1 ans = scalar structure containing the fields: Title = Vel Xrot Raw/Excitation //Serie Title Serie = //2 dimensional array containing the (x,y) pairs. Columns 1 through 9: 0.00000 0.24000 0.48000 0.72000 0.96000 1.20000 1.44000 1.68000 1.92000 -47.01777 -19.74275 -27.61559 -13.96998 -4.44243 -1.02031 -1.81286 -3.54399 4.22259 Columns 10 through 18: 2.16000 2.40000 2.64000 2.88000 3.12000 3.36000 3.60000 3.84000 4.08000 8.07258 16.54702 19.15587 19.87028 20.90579 21.40222 22.44204 20.61854 17.68427 Columns 19 through 27: 4.32000 4.56000 4.80000 5.04000 5.28000 5.52000 5.76000 6.00000 6.24000 15.69454 14.56121 13.44503 12.86091 12.07755 11.50960 10.28915 9.97069 9.78908 Columns 28 through 36: 6.48000 6.72000 6.96000 7.20000 7.44000 7.68000 7.92000 8.16000 8.40000 8.78665 8.44608 8.06616 7.70098 7.56921 7.34422 6.54481 6.27385 5.96678 Table 5.1.2: Serie matlab structure. >> xx.Model0.Annotations ans = scalar structure containing the fields: Version = 1 //Structure Version Annotation0 = scalar structure containing the fields: Type = Point //Annotation type Position = //Annotation Position in graph 3.6000 22.4420 //Annotation Text to display Text = X:3.6 Y:22.442 Table 5.1.3: Annotation matlab Structure. .sidimat19x matlab structure Description IDEFigure consists of one or more of opticon trace data “RawDatx”. >> xx=load(\"xrot_stage7_ocl.sidimat19x\") xx = scalar structure containing the fields: MeasurementType = SiDiMat19x Version = 1 RawDat1 = scalar structure containing the fields: Version = 1 //Structure version SampleRate = 6000 //controller sample rate during tracing UnderSample = 5 //trace under sample number SampleNumber = 5000 // traced data number AverageNumber = 4 // trace averages SignalName = //Trace signals name scalar structure containing the fields: Sig0: 1x12 sq_string Sig1: 1x15 sq_string DataSet = //Trace data array 2x(sampleNumber*AverageNumber)-array. This array contains the traced data of the two trace signals. Columns 1 through 8: -2.7344e+003 -2.9265e+003 -2.6285e+003 -2.6919e+003 -2.8300e+003 -2.6299e+003 -2.6821e+003 -2.4236e+003 -2.7434e+003 -2.7056e+003 -2.6472e+003 -2.6658e+003 -2.6704e+003 -2.6295e+003 -2.6498e+003 -2.6562e+003 Columns 9 through 16: -2.0755e+003 -2.4358e+003 -2.8244e+003 -2.5403e+003 -2.3636e+003 -2.9963e+003 -2.9254e+003 -2.5269e+003 -2.6239e+003 -2.6445e+003 -2.6592e+003 -2.6326e+003 -2.5962e+003 -2.6090e+003 -2.5843e+003 -2.5773e+003 Columns 17 through 24: Table 5.2.1: .sidimat19x matlab structure."
  },
  "sidimat19xa/gui/gettingstarted.html": {
    "href": "sidimat19xa/gui/gettingstarted.html",
    "title": "Getting started | SAMBA19x Website",
    "keywords": "Getting started Your PC can communicate with the opticon controller with a USB connection or se-rial (RS232) connection. Use an A/B USB cable or a null modem cable. Make sure that the FTDI USB-To-Serial converter driver is installed. Start the SiDiMaT19xA program with a right-click on the SiDiMaT19xA desktop shortcut and select Run as Admin. Alternative you could start it from the window start menu. Start-Up After the start of the program choose the connection device and confirm it with the “Connect” button. To talk to the controller SiDiMaT19xA uses the communication server like the other SAMBA software package tools. Note1: Ensure that the selected com port number is configured by the “Communica-tion Server Configuration Tool”. Otherwise the connection will not be established. Communication Server Configuration Tool Note2: If you connect via the USB port, the port will be shown as an additional com port (Virtual Com Port). Figure: Connection with a controller."
  },
  "sidimat19xa/gui/intro.html": {
    "href": "sidimat19xa/gui/intro.html",
    "title": "Introduction | SAMBA19x Website",
    "keywords": "Introduction The SiDiMaT19xA tool has been built to visualize the IDE-Opticon controller signals supported by the opticon firmware. Furthermore, SiDiMaT19xA allows to start an au-to measurement containing many of SiDiMaT19xA measurements. Warning SiDiMaT19xA is not compatible for controller with a running firmware ver-sion older than 3.3.xx. Intended Audience The software and this document is intended for users of an IDE vibration isolation system. Requirements In order to run this software, the following requirements must be met: Windows 7®, Windows 8®, or later version. Personal computer with x86- or x64-based microprocessor 2.8 GHz or higher and 4GB RAM or higher are recommended. SVGA-resolution with a minimum of 1600x900 pixel and 16-Bits high colors. Mouse or compatible pointing device Microsoft .Net Frame work 4.5.2 or higher. Contact Integrated Dynamics Engineering GmbH Hermannstrasse 9-13 65479 Raunheim, GERMANY Phone: +49 (0)6142 9400-0"
  },
  "sidimat19xa/gui/knownbugs.html": {
    "href": "sidimat19xa/gui/knownbugs.html",
    "title": "KNOWN BUGS AND PROBLEMS | SAMBA19x Website",
    "keywords": "KNOWN BUGS AND PROBLEMS The following section lists the currently known bugs. These bugs will be resolved in future versions of the software. Description Date Version Status"
  },
  "sidimat19xa/gui/Sidimat19xA_Operation.1.html": {
    "href": "sidimat19xa/gui/Sidimat19xA_Operation.1.html",
    "title": "| SAMBA19x Website",
    "keywords": ""
  },
  "sidimat19xa/gui/troubleshooting.html": {
    "href": "sidimat19xa/gui/troubleshooting.html",
    "title": "TROUBLESHOOTING | SAMBA19x Website",
    "keywords": "TROUBLESHOOTING Can’t run SiDiMaT19xA Ensure that the .Net framework 4.5.2 or higher is installed. Run the SiDiMaT19xA as administrator. No Communication Check if the controller is powered on and the monitor LED is blinking. Check if either a USB cable or a serial cable connects the controller with the PC. Check if the used com port is selected by the “Communication Server” . Use \"Terminate Comm Server and Connect\" button to establish the connection. If a failure occurs that cannot be solved, contact our technical support. Phone: +49 (0) 6142 94000"
  },
  "samba19xui/CheckSpecValue.html": {
    "href": "samba19xui/CheckSpecValue.html",
    "title": "SiDiMaT19xA auto measurement CheckSpec operation value | SAMBA19x Website",
    "keywords": "SiDiMaT19xA auto measurement CheckSpec operation value The CheckSpec operation basically services to checks a specification of a SiDiMaT19xA measurement or a logging measurement which is saved in .IDEFigure file. The value of this operation is a collection of the values in the following table (values have to be used without brackets). The value first word \" italic \" is keyword and has to be written correct. Value Description { cache ;path1;path2; ... } load a plot curves (series) from a .IDEFigure files {path1:first file, path2: second file, ...}. The curves are added \"saved\" into a dictionary. The curves in the dictionary are identified by their label which is consisting of three letters and three number sample (F1P2S2: this signal#2 of plot#2 of file#1). path1, path2 ... are optional. { check-point ;sig;ss;se;x} checks the sig y-value of the point at the x-axis x. { check-upper-spec-curve ;sig1;sig2;specmin;specmax;xpos} checks the sig y-value amplitude of the point at xpos. { max ;sig;ss;se;rs,re} checks if the sig maximum y-value lies in the range [ss - se]. Values in x-axis range [rs - re] are used. rs and re are optional. { min ;sig;ss;se;rs,re} checks if sig minimum y-value lies in the range [ss - se]. Values in x-axis range [rs - re] are used. rs and re are optional. { max-pos ;sig;ss;se;rs,re} checks the x-axis position of the y-maximum value. Values in x-axis range [rs - re] are used. rs and re are optional. { ocl-lbw ;sig1;sig2;ss;se;rs,re} finds the open closed loop active bandwidth lower point. sig1:open loop; sig2: closed loop; Values in x-axis range [rs - re] are used. rs and re are optional. { ocl-hbw ;sig1;sig2;ss;se;rs,re} checks the open closed loop active bandwidth lower point position lies in [ss - se]. sig1:open loop; sig2: closed loop; Values in x-axis range [rs - re] are used. rs and re are optional. { ocl-damp ;sig1;sig2;ss;se;rs,re} checks the open closed loop damping value, if it lies in the range [ss - se]. sig1:open loop; sig2: closed loop; Values in x-axis range [rs - re] are used. rs and re are optional."
  },
  "samba19xui/intro.html": {
    "href": "samba19xui/intro.html",
    "title": "Add your introductions here! | SAMBA19x Website",
    "keywords": "Add your introductions here!"
  },
  "sidimat19xa/intro.html": {
    "href": "sidimat19xa/intro.html",
    "title": "Add your introductions here! | SAMBA19x Website",
    "keywords": "Add your introductions here!"
  },
  "firmware/RCI2/enumerations/systemactions.html": {
    "href": "firmware/RCI2/enumerations/systemactions.html",
    "title": "System actions | SAMBA19x Website",
    "keywords": "System actions All system actions supported in the firmware listed below Number Name Description 0 action_none do nothing. 1 action_overall_active_status toggles overall active status on/off. 2 action_pneum_status toggles pneumatic loop on/off. 3 action_pos_status toggles position loop on/off. 4 action_ff_status toggles FF-Subsystem on/off. 5 action_ff_adaptive_status toggles FF-Subsystem adaptive on/off. 6 action_ff_use_raw_status toggles FF-Subsystem use raw input option on/off. 7 action_pff_status toggles FF-Subsystem on/off. 8 action_pff_adaptive_status toggles FF-Subsystem adaptive on/off. 9 action_use_temp_sensor toggles the motor protection use temperature sensor option on/off. 10 action_noise_filter_status toggles using the noise filters on/off. 11 use_ethercat_ff_sig toggles ethercat ff-signals on/off. 12 use_ethercat_output toggles ethercat output on/off. 13 action_disable_all_motor toggles the motor protection disable all motors option on/off. 14 action_pneum_move_up moves pneumatic system up. 15 action_pneum_move_down moves pneumatic system down. 16 action_pneum_go_to move pneumatic system to a specific height. 17 action_pneum_setpoint_status toggles the pneumatic use setpoint for all axes option on/off. 18 action_pneum_move_up_at_startup_status toggles the pneumatic move up after startup option on/off. 19 action_pneum_dither_comp_status toggles the pneumatic dither compensation option on/off. 20 action_pneum_accept_valveout_for_up updates the pneumatic valve up-offset from the current valve outputs. 21 action_pneum_accept_valveout_for_down updates the pneumatic valve down-offset from the current valve outputs. 22 action_nv_save saves actual parameters to NV-RAM \"*non-volatile memory\". 23 action_nv_restore restores parameters from NV-RAM \"*non-volatile memory\". 24 action_nv_clear clears NV-RAM \"*non-volatile memory\". 25 max_action_type n"
  },
  "LoggingTool/AnnotationOperation.html": {
    "href": "LoggingTool/AnnotationOperation.html",
    "title": "Plot manipulation Annotation operation | SAMBA19x Website",
    "keywords": "Plot manipulation Annotation operation The Annotation lmpo-operation contains a varios actions. It's value consists of a collection of signal manipulation commands lmpo-cmd . A \" lmpo-cmd \" consists of cmd-name \" italic , polt \" and list of cmd-config seperated by a semicolon \";\" or semicolon+space \"; \". A cmd-config consists of a keyword \" polt \" and a value, they are seperated by a colon \":\" or by a colon+space \": \". Some cmd_configs are valueless. The following table describes all possible lmpo-cmds of the Operation lmpo-operation . lmpo-cmd Description { add ; Annotation types } add annotation to the plot. { textann ; ann#1 :x; Text annotation properties } set the properties of the x-th text annotation. { pointann ; ann#1 :x; Text annotation properties } set the properties of the x-th point annotation. { lineann ; ann#1 :x; Line annotation properties } set the properties of the x-th line annotation. Anotation types using the add cmd one could set annotation listed in the following table. Anotation type Description { type: : text ; xpos :x; ypos :x; text-content :x } add a text annotation at ( xpos , ypos )-position to the plot title. { type: : point ; xpos :x; text-content :x } add a point annotation at xpos -position to the plot title. { type: : hline ; ypos :x } add a horizontal line annotation at ypos -position to the plot title. { type: : vline ; xpos :x } add a horizontal line annotation at xpos -position to the plot title. Text annotation properties Text annotation properties are listed in the following table. Property Description { text-color :x } set text color of the text annotation. Color has the hex format #ffffff00. { background :x } set background of the text annotation. Color has the hex format #ffffff00. { text-fontsize :x } set text fontsize of the text annotation. { text-content :x } set text of the text annotation. Point annotation properties Point annotation properties are listed in the following table. Property Description { text-color :x } set text color of the point annotation. Color has the hex format #ffffff00. { color :x } set color of the point annotation. Color has the hex format #ffffff00. { text-fontsize :x } set text font size of the point annotation. { text-content :x } set text of the point annotation. Line annotation properties Line annotation properties are listed in the following table. Property Description { text-color :x } set text color of the line annotation. Color has the hex format #ffffff00. { color :x } set color of the line. Color has the hex format #ffffff00. { text-fontsize :x } set text font size of the line annotation. { text-orientation :{horizontal,vertical} } set the text orientation of the line annotation. { line-style :x } set text of the line annotation. { line-thickness :x } set line thickniss of the line annotation. <Operation Name=\"Annotation\"> <Value> <anyType xsi:type=\"xsd:string\">add; type:text;xpos:5;text-content:Centered Text</anyType> <anyType xsi:type=\"xsd:string\">add; type:text;xpos:7;text-content:topleft Text</anyType> <anyType xsi:type=\"xsd:string\">add; type:point;xpos1:3;xpos2:7</anyType> <anyType xsi:type=\"xsd:string\">add; type:hline;ypos1:-1000;ypos2:1000</anyType> <anyType xsi:type=\"xsd:string\">add; type:vline;xpos1:2;xpos2:6</anyType> <anyType xsi:type=\"xsd:string\">textann; ann#:1; text-color:#ff0000ff; text-fontsize:12 </anyType> <anyType xsi:type=\"xsd:string\">textann; ann#:2; text-color:#ff00ff00; text-fontsize:12 </anyType> <anyType xsi:type=\"xsd:string\">textann; ann#:3; text-color:#ffff0000; text-fontsize:12 </anyType> <anyType xsi:type=\"xsd:string\">textann; ann#:4; text-color:#ff800000; text-fontsize:12 </anyType> <anyType xsi:type=\"xsd:string\">lineann; ann#:1; color:#ff0000ff; text-color:#ff0000ff; text-fontsize:12 </anyType> <anyType xsi:type=\"xsd:string\">lineann; ann#:2; color:#ff00ff00; text-color:#ff00ff00; text-fontsize:12 </anyType> <anyType xsi:type=\"xsd:string\">lineann; ann#:3; color:#ffff0000; text-color:#ffff0000; text-fontsize:12 </anyType> <anyType xsi:type=\"xsd:string\">lineann; ann#:4; color:#ff800000; text-color:#ff800000; text-fontsize:12 </anyType> <anyType xsi:type=\"xsd:string\">pointann; ann#:1; color:#ff0000ff; text-color:#ff0000ff; text-fontsize:12 </anyType> <anyType xsi:type=\"xsd:string\">pointann; ann#:2; color:#ff00ff00; text-color:#ff00ff00; text-fontsize:12 </anyType> <anyType xsi:type=\"xsd:string\">pointann; ann#:3; color:#ffff0000; text-color:#ffff0000; text-fontsize:12 </anyType> <anyType xsi:type=\"xsd:string\">pointann; ann#:4; color:#ff800000; text-color:#ff800000; text-fontsize:12 </anyType> </Value> </Operation>"
  },
  "LoggingTool/SignalOperation.html": {
    "href": "LoggingTool/SignalOperation.html",
    "title": "Log manipulation SignalOperation operation value | SAMBA19x Website",
    "keywords": "Log manipulation SignalOperation operation value The SignalOperation lmpo-operation contains a varios actions. It's value consists of a collection of signal manipulation commands lmpo-cmd . A \" lmpo-cmd \" consists of cmd-name \" italic , polt \" and list of cmd-config seperated by a semicolon \";\" or semicolon+space \"; \". A cmd-config consists of a keyword \" polt \" and a value, they are seperated by a colon \":\" or by a colon+space \": \". Some cmd_configs are valueless. The following table describes all possible lmpo-cmds of the Operation lmpo-operation . sam-cmd Description { remove-points ; sig1 :x; sig2 :x; ...; sign :x; first :x; last :x; index1 :x; index2 :x } removes points from the listed signals (sig1 ... sign). { title ; sig :x; title :title; } changes the title of sig. { clone ; sig :x; newsig :x; [ title :x;] } clones sig to newsig and set title to newsig. { remove ; sig1 :x; sig2 :x; ...; sign :x} removes all listed signals (sig1 ... sign) from signals dictionary. { add-from-csv ; file :filepath; sig :x; } export sig from signals dictionary to a csv file. { export-to-csv ; file :x; sig :x; [ title :x;] } add newsig from a csv file to signals dictionary and set title to newsig. The newsig will be labeled with title . { xysig ; xsig :x; ysig :x; newsig :x; [ title :x;] } build new signal (x: xsig y-axis, y: ysig y-axis). The newsig will be labeled with title . { add ; sig :x; factor :x; [ newsig :x;] [ title :x] } add factor to sig and optional save the resultto newsig .The newsig will be labeled with title . If newsig ist ommitted the sig will be overwritten. { mult ; sig :x; factor :x; [ newsig :x;] } multiply factor with sig and optional save the result to newsig . If newsig is ommitted the sig will be overwritten. { divide ; sig :x; factor :x; [ newsig :x;] } divide sig through factor and optional save the result to newsig . If newsig is ommitted the sig will be overwritten. { subt ; sig :x; factor :x; [ newsig :x;] } subtracts factor from sig and optional save the result to newsig . If newsig is ommitted the sig will be overwritten. { avg ; sig :x; param :x; [ mult :x]} build the average value of sig y-value-serie then optionally multiply the result with mult and save the result to param in the parameter dictionary. { max ; sig :x; param :x; ; [ mult :x]} build the maximum value of sig y-value-serie then optionally multiply the result with mult and save the result to param in the parameter dictionary. { min ; sig :x; param :x; [ mult :x]} build the minimum value of sig y-value-serie then optionally multiply the result with mult and save the result to param in the parameter dictionary. { std ; sig :x; param :x; [ mult :x]} build the standard diviation value of sig y-value-serie then optionally multiply the result with mult and save the result to param in the parameter dictionary. { pkpk ; sig :x; param :x; [ mult :x]} build the peak-to-peak value of sig y-value-serie then optionally multiply the result with mult and save the result to param in the parameter dictionary. { median ; sig :x; length :x; [ newsig :x;] [ title :x;] } calculate the median (with the length length ) of the sig y-values and optionally save the result to newsig . The newsig is labeled with title . If newsig is ommitted the sig will be overwritten. { average ; sig :x; length :x; [ newsig :x;] [ title :x;] } calculate the average (with the length length ) of the sig y-values and optionally save the result to newsig . The newsig is labeled with title . If newsig is ommitted the sig will be overwritten. { rms ; sig :x; length :x; [ newsig :x;] [ title :x;] } calculate the root mean square \"rms\" (with the length length ) of the sig y-values and optionally save the result to newsig . The newsig will be labeled with title . If newsig is ommitted the sig will be overwritten. { derivative ; sig :x; length :x; [ newsig :x;] [ title :x;] } calculate the derivative of the sig y-values and optionally save the result to newsig . The newsig will be labeled with title . If newsig is ommitted the sig will be overwritten. { integrate ; sig :x; length :x; [ newsig :x;] [ title :x;] } integrates the sig y-values and optionally save the result to newsig . The newsig will be labeled with title . If newsig is ommitted the sig will be overwritten. { add-2sig ; sig1 :x; sig2 :x; [ newsig :x;] [ title :x;]} add sig1 with sig2 and optionally save the result to newsig . If newsig is ommitted the sig1 will be overwritten. The newsig will be labeled with title . { mult-2sig ; sig1 :x; sig2 :x; [ newsig :x;] [ title :x;]} multiply sig1 with sig2 and optionally save the result to newsig . If newsig is ommitted the sig1 will be overwritten. The newsig will be labeled with title . { subt-2sig ; sig1 :x; sig2 :x; [ newsig :x;] [ title :x;]} subract sig2 from sig1 and optionally save the result to newsig . If newsig is ommitted the sig1 will be overwritten. The newsig will be labeled with title . { divide-2sig ; sig1 :x; sig2 :x; [ newsig :x;] [ title :x;]} divide sig1 through sig1 and optionally save the result to newsig . If newsig is ommitted the sig1 will be overwritten. The newsig will be labeled with title . { derivative-2sig ; sig1 :x; sig2 :x; [ newsig :x;] [ title :x;]} calculate the derivative of the sig1 y-values using sig2 y-axis as x-axis and optionally save the result to newsig . If newsig is ommitted the sig1 will be overwritten. The newsig will be labeled with title . { integrate-2sig ; sig1 :x; sig2 :x; [ newsig :x;] [ title :x;]} integarte sig1 y-values using sig2 x-axis and optionally save the result to newsig . If newsig is ommitted the sig1 will be overwritten. The newsig will be labeled with title . Examples Example1 The following operation actions listed below measures the open/closed force mobilty transfer function of the Yrot axis. <Operation Name=\"SignalOperation\"> <Value> <anyType xsi:type=\"xsd:string\">remove-points;last:2; sig1:F1S1; sig2:F1S2; sig3:F1S3; sig4:F1S4; sig5:F1S5</anyType> <anyType xsi:type=\"xsd:string\">remove-points;first:2; sig1:F1S1; sig2:F1S2; sig3:F1S3; sig4:F1S4; sig5:F1S5</anyType> <anyType xsi:type=\"xsd:string\">remove-points;index1:20;index2:40; sig1:F1S1; sig2:F1S2; sig3:F1S3; sig4:F1S4; sig5:F1S5</anyType> <anyType xsi:type=\"xsd:string\">xysig; ysig:F1S2; xsig:F1S1; newsig:F1S2M</anyType> <anyType xsi:type=\"xsd:string\">xysig; ysig:F1S3; xsig:F1S1; newsig:F1S3M; title:Polyout-Excitation</anyType> <anyType xsi:type=\"xsd:string\">xysig; ysig:F1S4; xsig:F1S1; newsig:F1S4M</anyType> </Value> </Operation> Example2 <!-- Yrot Axis--> <AutoMeasurent Name=\"FMYrotRawOCL\" IsEnabled=\"true\"> <OperationList> <Operation Name=\"Operation\"> <Value> <anyType xsi:type=\"xsd:string\">individual-loopstatus; velocity:101111</anyType> <anyType xsi:type=\"xsd:string\">clear-cached-measurements;</anyType> <anyType xsi:type=\"xsd:string\">trace-sig;signum:2; type:2; mainindex:4; subindex:-1</anyType> <anyType xsi:type=\"xsd:string\">excit-sig;type:4; mainindex:4; </anyType> <anyType xsi:type=\"xsd:string\">waitms; time:2000;</anyType> <anyType xsi:type=\"xsd:string\">measure;</anyType> <anyType xsi:type=\"xsd:string\">cache-measurement;</anyType> <anyType xsi:type=\"xsd:string\">individual-loopstatus; velocity:111111</anyType> <anyType xsi:type=\"xsd:string\">waitms; time:2000;</anyType> <anyType xsi:type=\"xsd:string\">measure;</anyType> </Value> </Operation> <Operation Name=\"Save\"> <Value> <anyType xsi:type=\"xsd:string\">frf2fig;file:Yrot_Raw_OCL_AW_FRF.idefigure</anyType> <anyType xsi:type=\"xsd:string\">time2fig;file:Yrot_Raw_OCL_AW_TimeSpec.idefigure</anyType> <anyType xsi:type=\"xsd:string\">frf2pic;file:Yrot_Raw_OCL_AW_FRF.png</anyType> <anyType xsi:type=\"xsd:string\">time2pic;file:Yrot_Raw_OCL_AW_TimeSpec.png</anyType> <anyType xsi:type=\"xsd:string\">raw;file:Yrot_Raw_OCL_AW.sidimat19x</anyType> </Value> </Operation> <Operation Name=\"CheckSpec_#FMYr0OCLAW\"> <Value> <anyType xsi:type=\"xsd:string\">cache;file:Yrot_Raw_OCL_AW_FRF.idefigure</anyType> <anyType xsi:type=\"xsd:string\">max; sig:F1P1S2; specmin:18.5; specmax:23.7;rmin:1;rmax:15</anyType> <anyType xsi:type=\"xsd:string\">max-pos; sig:F1P1S2; specmin:2.0; specmax:3.0; rmin:1; rmax:15</anyType> <anyType xsi:type=\"xsd:string\">ocl-lbw; olsig:F1P1S2; clsig:F1P1S1; rmin:1; rmax:14; specmax:1.5</anyType> <anyType xsi:type=\"xsd:string\">ocl-hbw;olsig:F1P1S2; clsig:F1P1S1; specmin:11; rmin:1; rmax:14;</anyType> <anyType xsi:type=\"xsd:string\">ocl-damp;olsig:F1P1S2; clsig:F1P1S1; specmin:17; rmin:1; rmax:14;</anyType> </Value> </Operation> <Operation Name=\"Report\"> <Value> <anyType xsi:type=\"xsd:string\">para3;Yrot Force Mobility at raw input Open/Close Loop</anyType> <anyType xsi:type=\"xsd:string\">text;Here are the force mobility measurements. Measured at the velocity axes raw input</anyType> <anyType xsi:type=\"xsd:string\">pic;Measurements\\ForceMobility\\Raw_OCL_AW\\Yrot_Raw_OCL_AW_FRF.png</anyType> </Value> </Operation> </OperationList> </AutoMeasurent>"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "At Home | SAMBA19x Website",
    "keywords": "Things to Do ============ At Home Mow the cat Feed the lawn At the Office Learn Markdown Use Big-O notation in a clever way digraph finite_state_machine { rankdir=LR; size=\"8,5\" node [shape = doublecircle]; S; node [shape = point ]; qi node [shape = circle]; qi -> S; S -> q1 [ label = \"a\" ]; S -> S [ label = \"a\" ]; q1 -> S [ label = \"a\" ]; q1 -> q2 [ label = \"ddb\" ]; q2 -> q1 [ label = \"b\" ]; q2 -> q2 [ label = \"b\" ]; } digraph G{ A -> B B -> C C -> D } A -> B graph LR; A-->B; A-->C; C-->D; Note this is a note Note this is a note too Warning Warning this ist a warning Tip Important Importatnt message. Warning"
  },
  "samba19xui/LoggValue.html": {
    "href": "samba19xui/LoggValue.html",
    "title": "SiDiMaT19xA auto measurement Logg operation value | SAMBA19x Website",
    "keywords": "SiDiMaT19xA auto measurement Logg operation value The Logg operation basically services to log data from the controller using the logging functionality. Furthermore it prepares the logged data and plots it in a plot-figure. The value of this operation is a collection of the values in the following table (values have to be used without brackets). The value first word \" italic \" is keyword and has to be written correct. Value Description { load-logg-setting-file ;path} Opens logging setting file and send it to controller. Path has the extension .Logg19xConfig . { load-logg-setting-file ;path} Opens logging setting file and send it to controller. Path has the extension .Logg19xConfig . { load-logg-setting-file ;path} Opens logging setting file and send it to controller. Path has the extension .Logg19xConfig ."
  },
  "samba19xui/SaveValue.html": {
    "href": "samba19xui/SaveValue.html",
    "title": "SiDiMaT19xA auto measurement Save operation value | SAMBA19x Website",
    "keywords": "SiDiMaT19xA auto measurement Save operation value The Save operation basically services to save a SiDiMaT19xA measurement or a logging measurement to a file or a picture. The value of this operation is a collection of the values in the following table (values have to be used without brackets). The value first word \" italic \" is keyword and has to be written correct. Value Description { frf2pic ;path} saves the SiDiMaT19xA frequency response measurement to .png file (path). Path has the extension .png. { frf2fig ;path} saves the SiDiMaT19xA frequency response measurement to .IDEFigure file(path). The .IDEFigure format is a kind of matlab format. Path has the extension .IDEFigure. { time2pic ;path} saves the SiDiMaT19xA time/spectrum measurement to .png file(path). Path has the extension .png. { time2fig ;path} saves the frequency response measurement to .png file(path). Path should have the extension .png. { raw ;path} saves the SiDiMaT19xA complete measurement to .sidimat19x file (path). The .IDEFigure format is a kind of matlab format. Path has the extension .sidimat19x. { logg2fig ;path,fignum} saves the logging measurement figure with the number (fignum) to .IDEFigure file (path). If fignum is omitted the first figure is saved. Path has the extension .IDEFigure. { logg2pic ;path,fignum} saves the logging measurement figure with the number (fignum) to .png file. If fignum is omitted, the first figure is saved. Path has the extension .IDEFigure."
  },
  "samba19xui/Sidimat19xA_Operation.html": {
    "href": "samba19xui/Sidimat19xA_Operation.html",
    "title": "Sidimat19xA Auto Measurement Operations | SAMBA19x Website",
    "keywords": "Sidimat19xA Auto Measurement Operations The Sidimat auto measurement operation consist of operation name and an operation value. The value is a collection of objects. Operation name Value (Cmds) Description CheckSpec See CheckSpec Value Checks the specification of one or many curves of an IDEFigure figure. Report see Report Value Writes an entry to the auto measurement report. Its value contains a collection of actions (operations). OpenAndExcuteAutoMeasurementFile { path } Opens the auto measurement file path and excutes it. Save See Save value Save Value Saves an idefigure to file or picture. It also saves a sidimat19x raw measurement. Logg See Logg value Logg Value Handles the internal logging actions. RescalePlots {plots} Rescale the sidimat plots listed is the value plots. The value plots could be one plot or many by space seperated plots from the following plots {Amplitude, Phase, Coherence, Time1, Time2, Spectrum1, Spectrum2}. Measure {None} Evaluates the sidimat19xa measurement. RCICommand {Valid ascii RCI-Command} Sends the ascii RCI-Command to controller. InvokeRCIMethod {Not supported} SetParameter {Not supported} SetExcitSig { } Sets the setting of the excitation signal. SetExcitFil {filnum;type;p1;p2;p3;p4;p5} Sets an excitation file. SetExcitSetting {iosig} Set the injection point of the excitation signal. The value of this operation is from type IOSignalType {type mainindex subindex}. ExcitFilterUsage {filnum fil} Sets an excitation filter using the filter number. The type of fil is FilterType {type par1 par2 par3 par4 par5}. VelIndividualLoopStatus {status} Sets the status of the individual velocity loop. the format of status is binary. OverAllActiveLoopStatus {status} Sets the OverallActive status. The value status could be one from the following states {on, off}. SystemLoopStatus {action} Evaluates an system loop status action. The value action could be one action or many by space seperated actions from the following actions {Read, Cache, Restore, OverAllOff, OverAllOff, FFOn, FFOff, PFFOn, PFFOff, PneumOn, PneumOff}. CacheMeasurement {none} caches the actual sidimat measurement. ClearAllCachedMeasurement {none} clears all cached sidimat measurements. Waitms {ms} Forces the auto measuring thread to sleep for the specific time ms. ms is given in milisecond. ChangeCreateDirectory {path} Sets the auto measurement work directory (WorkPath) to path. The value path could be relative or absolute. ResetDirectory {none} Sets the work-path to the original-path. SaveRawMeasurement {path} Saves Sidimat measurement including the cached measurement to .sidimat19x file (path). The value path has the extension .sidimat19x and could be absolute or relative. SaveFRFFigure {path} Saves the frequency response figure of Sidimat measurement including the cached measurement to .IDEFigure file (path). The value path has the extension .IDEFigure and could be absolute or relative. SaveTimeSpecFigure {path} Saves the time/spectrum figure of Sidimat measurement including the cached measurement to .IDEFigure file (path). The value path has the extension .IDEFigure and could be absolute or relative. SaveFRF2Picture {path} Saves the frequency response figure of Sidimat measurement including the cached measurement to .png file (path). The value path has the extension .png and could be absolute or relative. SaveTimeSpec2Picture {path} Saves the time/spectrum figure of Sidimat measurement including the cached measurement to .png file (path). The value path has the extension .IDEFigure and could be absolute or relative. AddCurveFromCsvFileTo {path;plots} Adds curve x/y-pairs from a simicolon seperated .csv file (path) to sidimat plot. The value path has the extension .csv and could be absolute or relative. The value plots could be one plot or many by space seperated plots from the following plots {Amplitude, Phase, Coherence, Time1, Time2, Spectrum1, Spectrum2}."
  },
  "GuiUserManuals/samba19xui/samba19xui_um_.html": {
    "href": "GuiUserManuals/samba19xui/samba19xui_um_.html",
    "title": "Introduction | SAMBA19x Website",
    "keywords": "SAMBA19xUI User Interface Manual SAMBA19xUI AUTHOR(S): MSHAT REVISION: 08 DATE OF PRINT: December 12, 2017 DOCUMENT CHANGE & HISTORY RECORD Name Last Update Status Version ECR/PR/IP Comment MSHAT 28.01.2016 Draft 00 First version MSHAT 14.09.2016 Draft 01 Modification related to SAMBA19xUI 1.9.0.5, which is a part of the SAMBA1.9.x installation package. MSHAT 02.11.2016 Released 02 Modification related to SAMBA19xUI 1.9.0.6. MSHAT 16.11.2016 Released 03 Modification related to SAMBA19xUI 1.9.0.7. Added Appendix. MSHAT 08.12.2016 Released 04 Modification related to SAMBA19xUI 1.9.0.8. MSHAT 10.04.2017 Released 05 Modification related to SAMBA19xUI 1.9.0.9. MSHAT 25.04.2017 Released 06 Modification related to SAMBA19xUI 1.9.0.10. MSHAT 09.05.2017 Released 07 Modification related to SAMBA19xUI 1.9.0.11. MSHAT 09.05.2017 Released 08 Modification related to SAMBA19xUI RC02 V1.9.0.13. Notice! Although this document has been prepared with the utmost care, errors of any kind cannot be totally discounted. The contents of this document may be periodically revised, amended or changed otherwise by the originator without notice. You are invited to report any deficiencies / recommendations to IDE. Windows 7 ®, Windows 8 ® are registered trademarks of the Microsoft Corporation, USA. © Copyright 2015, Integrated Dynamics Engineering GmbH Introduction Remark : SAMBA19xUI is compatible with firmware version 3.3.00 and higher. Language This manual is originally written in English language. Overview This document describes how to use the “User Interface” for the opticon controller. The “User Interface” allows querying and changing nearly all configurable controller settings. Intended Audience The software and this document is intended for users of an IDE vibration isolation system. Requirements In order to run this software, the following requirements must be met: Windows 7®, Windows 8®, or later version. Personal computer with x86- or x64-based microprocessor 2.8 GHz or higher, 4GB RAM are recommended. SVGA-resolution with a minimum of 1600x900 pixel and 16-Bits high colors. Mouse or compatible pointing device Microsoft .Net Frame work 4.5.2 or higher. Contact Integrated Dynamics Engineering GmbH Hermannstrasse 9-13 65479 Raunheim, GERMANY Phone: +49 (0)6142 9400-0 INSTALLATION Copy the installation package from the CD to your PC. Read the SAMBA19x installation Guide document. Getting Started Your PC can communicate with the opticon controller with a USB connection or serial (RS232) connection. Use an A/B USB cable or a null modem cable. Make sure that the FTDI USB-To-Serial converter driver is installed. This is needed to connect to controller via USB connector. Start the SAMBA19xUI User Interface program with a right-click on the SAMBA19xUI shortcut and select Run as Admin. Note: The SAMBA19xUI has to run with administrative privileges. Otherwise the SAMBA19xUI doesn’t start. Start-Up The SAMBA19xUI uses the communication server like the other SAMBA applications. This means only selected COM Ports in the communication server could be used to talk to controller. Note1 : Ensure that the used com port number is configured “selected” by the “Communication Server Configuration Tool”. Otherwise the connection will not be established. Figure 3.1.1 Communication Server Configuration Tool Note2 : If you connect via the USB port, the port will be shown as an additional com port (Virtual Com Port). Note3 : The standard baud rate for the Opticon controller is 57600. After the start of the SAMBA19xUI choose the com port and confirm with the “Connect” button to establish the connection. Note4 : The used com ports by the CommServer could be configured by SAMBA19xUI version 1.9.0.8 and higher assuming the SAMBA19xUI is running with administrator privileges. (By some PCs with 64Bits operation system this doesn’t work properly). Note5 : SAMBA19xUI version 1.9.0.9 accept command line arguments to adjust the com port and baud rate. Call “SAMBA19xUI.exe 1 57600” to launch SAMBA19xUI and to connect automatically to a controller on com port 1 using 57600 baudrate. The command line arguments structure regarding the com port number and baud rate has been modified up SAMBA19xUI RC02 V1.0.0.1. Com port could be set by “#CP” prefix and baud rate could be set by “#BR” prefix (example: call “SAMBA19xUI #CP 1 #BR 57600”). Furthermore the command line argument accepts SAMBA19xUI configuration files and SAMBA19xUI label files file. Figure 3.1.2: Connection with a controller. Description Overview The SAMBA19xUI like the old SAMBA_UI has a tabs structure the so called menus. Some tabs “main tabs” contains sub-tabs “sub-menus”. In this document the tabs are called pages. The appearance of some pages is dynamic. This means the containing control elements on the page is dependent on the firmware of the connected opticon. Note: SAMBA19xUI configuration files (*.samba19x_config) could be opened by drag and drop. Connect Page The “Connect” page allows you to connect or disconnect to a controller. Figure 4.1.1: Connect Page. Use “ Baud Rate ” combo box to adjust the baud rate. The default baud rate for all opticon controller is 57600. Use “ Connect ” button to establish the connection with the controller. Use “ Disconnect ” button to disconnect the communication. Use “ Terminate Comm Server and Connect ” button to close the Comm Server session, if one is already started and to connect with a new session. This option is recommended after a communication trouble. Use “ Update Comm Ports list ” button to refresh lists of the available com ports. Figure 4.1.2: Connect Page after a successful connection with controller. Context Menu Click the right mouse button to display the SAMBA19xUI context menu. Figure 4.2.1: Context Menu. About Click “ About ” menu item to display the about dialog. It contains info about the SAMBA19xUI version information and build date. Figure 4.2.2: About Window Refresh Timer A couple of status parameters are continuously refreshed from the controller through a timer event. Click “ Refresh Timer ” menu item to Start/Stop the timer. UI Options SAMBA19xUI contains control elements for new firmware features. New firmware version higher than 3.3.102 provides information about the new features. The info about the new features is included in parameter “ System Configuration Info ”. The SAMBA19xUI reads those info. Then it adjusts its control components regarding to the system configuration info. Click “ UI Options ” menu item to show the “ UI Setting ” window. Figure 4.2.3: UI Setting. Figure 4.2.4: UI Setting. The system configuration info could be modified manually. The modification applies only for the SAMBA19xUI but not for the connected firmware. Disable “ Load System Configuration from Controller ” check box to change the user interface setting manually. Enable “ Auto Loop Switch ” option when the firmware supports the automatic loop switching. Enable “ Non Linear Position Control ” option when the firmware supports the nonlinear position control feature. Enable “ Cascaded Position Control ” option when the firmware supports the cascaded position control feature. Enable “ Event Logging ” option when the firmware supports the event logging feature. Enable “ System Safety Routine ” option when the firmware supports the system safety feature. Enable “ EtherCat Support ” option when the firmware supports the EtherCat communication. Enable “ Pneumatic Ramp Support ” option when the firmware supports the Pneumatic Ramp Support. Enable “ Temperature Sensor Support ” option when the firmware supports the temperature sensor AD-Mapping. Enable “ Safety and Earth Quake Monitor Support ” option when the firmware supports this feature. Enable “ Extended ADC-Channels Support ” option when the firmware supports all existing AD-Channels signals. Enable “ Position and Pneumatic Individual Loop Status Support ” option if the firmware supports the position and pneumatic individual loop status. Enable “ Reference Metrology System Support ” option if the firmware supports the reference metrology system. Enable “ Polynomial System Support ” option if the firmware supports the polynomial system. Enable “ Offset Support for all Linear Motors ” option if the firmware supports the offset for all 12 linear motors. Remark : It is strongly recommended to enable the “ Load System Configuration from Controller ” option to load the system “Firmware” configuration from controller. This option should deactivated only for firmware version older than 3.3.103 which doesn’t contains system configuration info and they supports special features. Controller Page The controller page consists of a couple sub-pages “system setting page, AD/DA setting page and motor protection Page”. System Settings Page The “System Setting” page contains a global parameters setting. Figure 4.3.1: System Setting with EtherCat Support. Figure 4.3.2: System Setting without EtherCat Support. Loops Configuration Use “ Loops Configuration ” to configure the various control loops. Only configured control loops are processed in the firmware. The velocity loop is in the firmware fixed configured. Note : Configuring additional loops loads the processor, therefore please take care about the system load “processor load” by changing the loop configuration. System loop shouldn’t exceeds 80%. Control Item Description Shows whether the velocity feedback loop is configured or not. Toggles the configuration status of the position loop on/off. It also shows the configuration status of the position loop. Toggles the configuration status of the pneumatic loop on/off. It also shows the configuration status of the pneumatic loop. Toggles the configuration status of the whole standard feed forward subsystem “FF-Subsystem” on/off. It also shows the configuration status of the complete FF-Subsystem. Toggles the configuration status of the stage part of FF-Subsystem “SFF” on/off. This contains the first 4 feed forward control channels. It also shows the configuration status of the SFF-Subsystem. Toggles the configuration status of the floor part of FF-Subsystem “FFF” on/off. This contains the last 3 feed forward control channels. It also shows the configuration status of the FFF-Subsystem. Toggles the configuration status of the pneumatic FF-Subsystem “PFF”. It also shows the configuration status of the PFF-Subsystem. Table 4.3.1: Loop Configuration Control Items. Performance Monitor Setting Use “ Performance Monitor Setting ” to specifies the performance monitor signal and the configuration parameters. The actual performance status is shown here. Control Item Description Specifies the I/O-Signal “monitor signal” which should be monitored as performance indicator. Specifies the threshold for a good performance. Specifies the minimal trigger time. The monitor signal has to exceed the threshold value at least for this time to toggles the performance status to not okay. Specifies the hold time duration for the performance status “Not Okay”. Shows the actual performance status. Shows the counter of the trigger time and the countdown of the hold time. Table 4.3.2: Performance Monitor Setting Control Item. Switch Criterion Setting Use “ Switch Criterion Setting ” group box to configure the parameters for the automatic loop switching. If the criterion is fulfilled and the “ Loop Switch Setting ” “Auto” is active the velocity loop will be deactivated and the position loop activated for a specific time “ Hold Time ”. The “ Switch criterion Setting ” group box is optional (not always present) and firmware dependent. It is present only for firmware which supports the “ Auto Loop Switch ” routine. Control Item Description Specifies the I/O-Signal “monitor signal” which should be monitored for the automatic loop switching. Specifies the threshold for the monitor signal. Specifies the minimal trigger time. The monitor signal has to exceed the trigger level at least for this time to trigger the auto loop switching. Specifies the hold time duration for the loop switching. Shows the counter of the trigger time and the countdown of the hold time. Table 4.3.3: Switch Criterion Setting Control Items. Loop Switch Setting Figure 4.3.3: System Setting Page with comments. Control Item Description The above button specifies whether the velocity loop status is always running (doesn’t mean it is active). The below LED shows whether the velocity loop is active. The above button specifies whether the position loop status is always running (doesn’t mean it is active). The below LED shows whether the position loop is active. Toggles the automatic loop parameter on/off and it shows its status. If it is on then the velocity and the position always running status are off. Automatic loop on. When velocity loop and position loop always running (see the left above picture), it is not possible to switch off the position loop by its button. Clicking the position button leads to switch the position always running status but it doesn’t switch the position loop off (see left middle picture). Click auto button to activate the auto loop switch and also to switch the position loop off (see the left below picture). Table 4.3.4: Loop Switch Setting Control Items. Stage FF-Signals The stage FF-Signal group box contains some settings which belong the stage FF-Signal. Control Item Description Specifies whether the type of the stage FF-Signal is analogue or digital. This option is valid only for firmware version older than 3.2.29. This is an option for a special customer solution. It is valid only for firmware older than 3.2.x. Table 4.3.5: Stage FF-Signals Control Items. EtherCat Setting The “ EtherCat Setting ” group box is firmware dependent. It is present just for firmware with EtherCat support. Control Item Description This option leads to overwrite the stage FF-Signals through the FF-Signals, which are provided by the EtherCat master. When this option is on, then the motors values which are provided by the EtherCat master are added to the motor outputs. Table 4.3.6: EtherCat Setting Control Items. Ramp Setting Use the “ Ramp Setting ” to configure the behaviour of the linear motor at startup phase. Control Item Description Specifies the type of outputs ramp. Specifies the ramp time for the linear motors respectively for the velocity axes outputs. Table 4.3.7: Ramp Setting Control Items. Sample Frequency/System Load Here the controller sample frequency could be adjusted. Furthermore the processor load is displayed. Control Item Description Specifies the controller sample frequency value. Click this button to accept the modified sample frequency value. Take care about the system “processor” load before increasing the sample frequency. For a certain operation system load shouldn’t exceeds 80%. Shows the system load. Table 4.3.8: Sample Frequency/System Load Control Items. AD/DA Mapping Page The appearance of the AD/DA-Mapping page is firmware dependent. Use the “ AD/DA Mapping ” page to change the AD- and DA-Mapping of the input signals and output signals. Change “ Used ADC Num ” to change the number of the AD-Inputs which will be read by the firmware. Note : The value of input signals with AD-Mapping-Number equals to 44 are set to zero. Note : Reading additional AD-Inputs loads the processor “DSP” performance and could leads to crash the firmware. Therefore take care about the system load by increasing the used ADC-Number. For a certain operation system load shouldn’t exceeds 80%. Note : See appendix for the right AD-Mapping for the temperature sensors. Figure 4.3.4: AD/DA-Mapping Page with supporting off all physical inputs (AD-Converter-Channels). Figure 4.3.5: AD/DA-Mapping Page. Motor Protection Page Motor Threshold Setting Group Box Figure 4.3.6: Motor Protection Page. Figure 4.3.7: Motor Protection Page with Offset Support for all Linear Motors. Click “ Set Threshold ” to send the changed threshold values to controller. Click “ Set Offset ” to send the changed threshold values to controller. Motor Overheating Setting Motor Overheating Setting Control Item Description Specifies the smooth factor of the running averaging which is used to calculate the temperature respectively motor overcurrent values. Time period before reactivate the motors after an overheating case. Activate this option to use the motor temperature sensors instead the motor overcurrent values “modelled temperature” Activate to disable all motors in case of overheating of one motors. Table 4.3.9: Motor Overheating Setting Control Items. Status Page The “Status” main menu contains two sub menus (“ Status ” Page and “ Signals Display ” page). Status Page Figure 4.4.1: Status page. Figure 4.4.2: Status Page with position and pneumatic individual loop status. Signals Display Page Up to 16 signals values could be continue displayed in big font. The signals are adjustable (Controller IO-Signal “Inputs, outputs, loops axes value …etc”). Note : The event logging monitor signals are used here as IO-Signals. Changing these IO-Signals here will change automatically the event logging monitor signals and vice versa. Figure 4.4.3: Signals Display Page. Excitation Setting Control Item Description Specifies the IO-Signal which its value will be continue displayed. Saves the event logging configuration parameters, which contains the IO-Signals. Loads the event logging configuration parameters, which contains the IO-Signals. Table 4.4.1: Signals Display Control Items Velocity Page The “ Velocity ” main menu contains two sub menus (“ Tuning ” Page and “ Sensor/Motor Matrix ” page). Velocity Tuning Page Figure 4.5.1: Velocity Tuning Page Velocity Loop Filters Click on any filter button” ” to open the “ Filter Setting Dialog ” and to change its setting. Click “ Update ” button to accept the change for the clicked filter. Click “ Update for all Axes” button to accept the change for the clicked filter number for all axes. Change the “ Axis Limiter ” value to specify the velocity axis output limit. Excitation Use “ Excitation ” group box to configure an excitation signal and its injection point “signal”. Excitation Setting Control Item Description Click “ Accept Change ” button to accept the modification of the excitation setting and to send it to the controller. Specifies the excitation signal type. Specifies the excitation filters. Specifies the injection node “signal” of the excitation signal. Table 4.5.1: Excitation Control Items. Excitation Type Parameters White Noise “Gain [-1,+1]” the gain range [-1,+1] corresponds to [-32000, +32000 digits]. Sine Wave “Gain [-1,+1]” the gain range [-1,+1] corresponds to [-32000, +32000 digits]. Sine wave frequency in Hz. Duty Cycle “Gain [-1,+1]” the gain range [-1,+1] corresponds to [-32000, +32000 digits]. High Period in millisecond. During this period the signal amplitude equals the adjusted “Gain” Low Period in millisecond. During this period the signal amplitude is set to zero Chirp Sine “recursive” “Gain [-1,+1]” the gain range [-1,+1] corresponds to [-32000, +32000 digits]. Start “lowest” frequency of the chirp sine. End “Highest” frequency of the chirp sine. Time Period of the chirp sine in second. Table 4.5.2: Excitation Types and their Parameters. Diagnostic Signals Diagnostic Signals Control Item Description Specifies the IO-Signal which applies to the Diag0 BNC-Box on the controller front panel. Specifies the IO-Signal which applies to the Diag1 BNC-Box on the controller front panel. Table 4.5.3: Diagnostic Signals Control Items. Tuning Helping Hand Use the “ Tuning Helping Hand ” to simplify the configuration of the excitation injection point and diagnostic signals by measuring the frequency response function of the velocity loop axes. Tuning Helping Hand Control Item Description Specifies after which stage the axis will be measured. Click a button to specify the axis which will be measured. Table 4.5.4: Tuning Helping Hand Control Items. Sensor/Motor Matrix Use the “ Sensor/Motor Matrix ” page to configure “build” the velocity logical axes by changing inputs “sensors” respectively outputs “actuators” multipliers (6 degree of freedom). Figure 4.5.2: Velocity Sensor/Motor Matrix Page with 7 sensors. Figure 4.5.3: Velocity Sensor/Motor Matrix Page with 8 sensors. Position page The “ Position ” main menu contains four sub menus. Its appearance is firmware dependent. The axes number, the filters number as well as the number of the proximity offsets are firmware dependent. Tuning page The position “ Tuning ” page has a dynamic appearance. Its appearance depends on the running firmware of the opticon controller. It contains the position filter setting, proximity sensor offsets, excitation group box, and tuning helping hand group box. There is a field, which displays the actual proximity sensor input values and the position error relative to the offsets values. Furthermore it contains the cascaded position and nonlinear position control configuration parameters. The cascaded and nonlinear position control features are firmware dependent. They are not in standard features. Figure 4.6.1: Position Tuning Page Figure 4.6.2: Position Tuning Page (Firmware supports 10 position axes and 6 position filters and position individual loop status). Figure 4.6.3: Position Tuning Page with Nonlinear Position Control Support. Figure 4.6.4: Position Tuning Page with Cascaded Position Control Support Proximity Offsets The proximity offsets values are subtracted from the proximity inputs values to build the proximity without offset inputs. Proximity Offsets Control Item Description Specifies the offset value for the vertical proximity of isolator 1. Specifies the offset value for the vertical proximity of isolator 2. Specifies the offset value for the vertical proximity of isolator 3. Specifies the offset value for the vertical proximity of isolator 4. Specifies the offset value for the horizontal proximity of isolator 1. Specifies the offset value for the horizontal proximity of isolator 2. Specifies the offset value for the horizontal proximity of isolator 3. Specifies the offset value for the horizontal proximity of isolator 4. Table 4.6.1: Proximity Offsets Control Items. Excitation/Diagnostic See sections 4.5.1.2 and 4.5.1.3. Cascaded Position Setting The cascaded position control is firmware dependent. It is supported only in special firmware versions. The cascaded position control is used to get more position stability and accuracy. The vertical position is controlled by a cascaded control loop. The cascaded control loop consists of two control loops one is the position loop and the other is the pneumatic loop. Only the first 3 position axes are used. The cascaded control Cascaded Position Setting Control Item Description Specifies the hysteresis value for switching between cascaded and normal position control. Specifies the pre-filter between the position loop and pneumatic loop. Table 4.6.2: Cascaded Position Setting Control Items. Nonlinear Position Setting The nonlinear position is firmware dependent. It is supported only in special firmware versions. It is applies for the first three position loop axes. The nonlinear position supports the pneumatic loop to stabilize the payload position by low frequency systems with nonlinear floatation behaviour. Nonlinear Position Setting Control Item Description Specifies the operation type of the nonlinear position control. AtOutput: the position axes output are used to switch nonlinear on/off. AtOutput: the position axes input are used to switch nonlinear on/off. None: nonlinear position control off. Activates resetting the position filters by toggling the nonlinear position control. Specifies the position window where the nonlinear position control is switched off. Specifies the position window where the nonlinear position control is switched on. Table 4.6.3: Nonlinear Position Control Items. Tuning Helping Hand Use the “ Tuning Helping Hand ” to simplify the configuration of the excitation injection point and diagnostic signals by measuring the frequency response function of the position loop axes. Tuning Helping Hand Control Item Description Specifies after which stage the axis will be measured. Click a button to specify the axis which will be measured. Table 4.6.4: Position Tuning Helping Hand Control Items. Sensor Matrix Page Figure 4.6.5: Sensor Matrix Page with 6 axes. Figure 4.6.6: Sensor Matrix Page with 8 axes. Use “ Sensor Matrix ” to specifies the inputs “devices” used by the position loop and their multipliers. Motor Matrix Page Figure 4.6.7: Motor Matrix Page with 6 axes. Figure 4.6.8: Motor Matrix Page with 8 axes. Use “ Motor Matrix ” to specifies the outputs “devices” used by the position loop and their multipliers. Proxy Adjustment Page The “Proxy Adjustment” page is displaying the proximity sensors values in a big font. It is intended to help adjusting the proximity sensors by manufacturing the systems. Figure 4.6.9: Proximity Adjustment Page. Pneumatic Page The “ Pneumatic ” page contains just one submenu “ Tuning Page ”. Its appearance depends on the running firmware. The number of valve outputs and the inputs number are firmware dependent. Furthermore the payload floatation setting depends on the firmware. Pneumatic Tuning page Figure 4.7.1: Pneumatic Tuning Page Figure 4.7.2: Pneumatic Tuning Page with 8 inputs, 8 outputs and pneumatic ramp. Figure 4.7.3: Pneumatic Tuning Page with 8 inputs, 8 outputs and pneumatic ramp. Use “ Sensor Matrix ” and “ Valve Matrix ” to configure the pneumatic logical axes (the vertical 3 degrees of freedom “Ztrans, Xrot and Yrot). Use “ Pneumatic Filter ” group box to change the axes filter settings by clicking on the filter button. Use “ Valve Offset ” group box to specify resp. modify the Up- and Down-Offset values. Change “ Isolator Offsets ” values to change the isolator floatation heights separately “isolator wise”. Control Item Description Click this button to drive the system up “floatation”. Click this button to drive the system down “deflating”. Click this button to accept the actual valve outputs as valve up-offsets. Click this button to accept the actual valve outputs as valve down-offsets. Toggles the pneumatic loop status On/Off. Toggles “ Use the setpoint for all axes ” option on/off. Toggles the valve dithering on/off. Toggles the move system up after startup “controller power cycle” On/Off. Table 4.7.1: Pneumatic Loop common Control Items. Floatation Config Use “ Floatation Config ” group box to configure the system floatation settings. Floatation Config Control Item Description Specifies the value which will be added to the initial proximity value to build the reference height “RefPoint” for down state. Specifies the set point “floatation height” for the payload. Specifies the position error tolerance value. Table 4.7.2: Floatation Config Control Items. Dithering Config Use “ Dithering Config ” group box to configure the dither signal, which is added to the valve output. The dither signal is a sine wave signal with adjustable amplitude “Amount” and frequency. Dithering Config Control Item Description Specifies the amplitude value of the dither sine wave signal. Specifies the frequency value of the dither sine wave signal. Specifies the learning constant for the dither compensation adaptive filter “Alpha” could be specified. Table 4.7.3: Dither Config Control Items. Pneumatic Ramp Setting Use “Pneumatic Ramp Setting” to specify the value of the pneumatic ramp parameter. Pneumatic Ramp Setting Control Item Description Specifies the running average smooth factor used to calculate the isolator’s height from of the proximity values. Specifies the gradient value for the reference point “RefPoint” by moving the system up. Specifies the gradient value for the reference point “RefPoint” by moving the system down. This is the time period to drive the valve output from Down-Offset to Up-Offset values. Table 4.7.4: Pneumatic Ramp Setting Control Items. Feed Forward Page The “ Feed Forward ” page contains two subpages “ FF Tuning, FF Gains ”. FF Tuning Page The “ FF Tuning ” page contains nearly all configuration “tuning” parameters for the standard feed forward control channels. Figure 4.8.1: FF Tuning Page. FF Global Setting Control Item Description Specifies the reference input signal of the FF-Channel. Specifies the adaptive “learning” constant of the “LMS-Algorithm” for the FF-Channel. Toggles the FF-Channel-Output for the corresponding axis On/Off. . Those are the reference filters. They are associated to the FF-Channel. They are used to pre-filter the input signals. Click on the filter button to change its setting. Those are the secondary filters. They are associated to the FF-Channel. They are used to pre-filter the input signal used by the LMS-Algorithm. Click on the filter button to change its setting. Those are the error filters. They are associated to the velocity axes. They are used to pre-filter the velocity axis. Table 4.8.1: FF Global Setting Control Items. Stage Signal Multipliers Use “ Stage Signal Multipliers ” group box to adjust the stage signals multipliers. The multipliers manipulate the stage signals levels and also the tuning of the stage FF-Subsystem. Stage Signal Multipliers Control Item Description Specifies the multiplier value of the stage signal XPos. Specifies the multiplier value of the stage signal XAcc. Specifies the multiplier value of the stage signal YPos. Specifies the multiplier value of the stage signal YAcc. Table 4.8.2: Stage Signal Multipliers Control Items. Stage Signal Offsets Use “ Stage Signal Offsets ” group box to configure the offset values for stage position signals. The offsets values influence the stage signal level of the stage position signals and also the calculated stage FF-Signals “ZrXacc and ZrYacc”. Stage Signal Offsets Control Item Description Specifies the offset value of the stage signal XPos. Specifies the offset value of the stage signal YPos. Table 4.8.3: Stage Signal Offset Control Items. Stage Signal Maximums Use “ Stage Signal Maximums ” group box to configure the max values for the stage position signals. The maxima values the calculated stage FF-Signals “ZrXacc and ZrYacc”. Stage Signal Maximums Control Item Description Specifies the maximum value of the stage signal XPos. Specifies the maximum value of the stage signal YPos. Table 4.8.4: Stage Signal Maxima Control Items. Threshold/Gains Number Use “ Threshold/Gains Number” group box to adjust the FF-Output threshold value and the used gains number and to toggles the FF-Subsystem, the adaptive status and using the raw axis input on/off. Threshold/Gains Number Control Item Description Specifies the maximum value for axis output part coming from the FF-Subsystem. Specifies the gains “coefficients” number of all FIR-Filters. Toggles the FF-Subsystem On/Off. Toggles the FIR-Coefficients adaption On/Off. This options specifies whether the velocity axis raw input or the filtered velocity axis signal after is used as error signal. Table 4.8.5: Threshold/Gains Num Control Items. FF Gains Page On the FF Gains the user is able to edit respectively modify the FIR-Filter gains “coefficients” manually. Click the respective “ Source ” button to access the gains of its FF-Channel. Table 4.8.6: FF Gains Page. Pneumatic FF Page The “ Pneumatic FF ” page contains two subpages “ PFF Tuning, PFF Gains ”. PFF Tuning Page The “ PFF Tuning ” page contains nearly all configuration “tuning” parameters for the pneumatic feed forward control channels. Figure 4.9.1: PFF Tuning Page. PFF Global Setting Control Item Description Specifies the reference input signal of the pneumatic feed forward channel “PFF-Channel”. Specifies the adaptive “learning” constant of the “LMS-Algorithm” for the PFF-Channel. Toggles the PFF-Channel-Output for the corresponding pneumatic axis On/Off. Those are the reference filters. They are associated to the PFF-Channel. They are used to pre-filter the input signals. Click on the filter button to change its setting. Those are the secondary filters. They are associated to the PFF-Channel. They are used to pre-filter the input signal used by the LMS-Algorithm. Click on the filter button to change its setting. Those are the error filters. They are associated to pneumatic axes. They are used to pre-filter the pneumatic axis. Table 4.9.1: PFF Global Setting Control Items. Threshold/Gains Number Threshold/Gains Number Control Item Description Specifies the maximum value for pneumatic axis output part coming from the PFF-Subsystem. Specifies the gains “coefficients” number of all FIR-Filters. Toggles the PFF-Subsystem On/Off. Toggles the FIR-Coefficients adaption On/Off. Table 4.9.2: Threshold/Gains number Control Items. PFF Gains Page On the “PFF Gains” page the user is able to show respectively modify the FIR-Filter gains “coefficients” manually. Click the respective “ Source ” button to access gains of its PFF-Channels. Figure 4.9.2: PFF Gains Page. Save/Load Setup The “ Save/Load Setup ” page contains only one subpage “ Save/Load ”. Figure 4.10.1: Save/Load Page Save/Load/Clear NVRAM Control Item Description Click this button to save the actual parameters setting into the NVRAM. Click this button to load the parameters setting from the NVRAM. Click this button to clear the already saved parameters setting from NVRAM. Click this button to save the actual parameters setting to a setup “xml” file. Click this button to load the actual parameters setting from a setup “xml” file. This action doesn’t mean the loaded parameters are saved automatically into NVRAM. If this is desired then click the corresponding button . Toggles the NVRAM-Protection On/Off. By active NVRAM-Protection both button clear NVRAM and save into NVRAM are disabled. Table 4.10.1: Save/Load/Clear NVRAM Control Items. Save/Load File Control Item Description Click this button to save the actual parameters setting to a setup “xml” file. Click this button to load the actual parameters setting from a setup “xml” file. This action doesn’t mean the loaded parameters are saved automatically into NVRAM. If this is desired then click the corresponding button . Table 4.10.2: Save/Load File. NVRAM Areas Check Sum Information. Note : The NVRAM check sum information are not automatically loaded from the controller by activating the save/Load-Page like by the old SAMBA_UI. Furthermore the check sum numbers are not build automatically by saving into NVRAM like the old SAMBA_UI. Control Item Description Shows the saved and the actual check sum numbers of the various NVRAM areas (monitor, firmware and configuration). Calculate the NVRAM areas check sum numbers and save them into NVRAM. Read the saved check sum numbers. Table 4.10.2: Save/Load File. Set/Generate Label File The label file contains labels for the user interface control items like the labels for the velocity loop inputs and outputs, input signals names, physical signals names (ADC-Signals) … etc. It influences the appearance of the user interface. If there is no label file specified the SAMBA19x_UI uses the hard coded default labels. Control Item Description Shows the actual adjusted label file. Click this button to generate a default label file. Click this button to reset the labels to the default labels. (Modification requires restart ofSAMBA19x_UI). Click this button to set the labels to specific label file. (Modification requires restart ofSAMBA19x_UI). Table 4.10.3: Set/Generate Label File Note : By changing the label file a SAMBA19xUI restart is required to enable the new labels. Special Page The special page is firmware dependent. It could be empty or it could has many pages which are containing a customized features. Safety Page The safety page contains the setting for the safety routine “performance routine” and earth quake detection routine. The safety routine could be called a performance monitoring routine, because it monitor the performance of the system regarding to its vibration and position. Figure 4.11.1: Safety Page. The safety routine uses the “root mean square” RMS-Values of the geophone and proximity sensors to detect a safety respectively performance mal function. The earth quake routine uses the RMS-Values of the floor geophone sensors, which are placed on the ground, to detect an earth quake. Safety and Earth Quake Status Control Item Description Shows the vibration status ok or not ok. Shows the vibration status ok or not ok. Shows if an earth quake has been detected or not. Table 4.11.1: Safety and Earth Quake Status. Safety Setting Safety Setting Control Item Description Geophone Limit Specifies the limit value for the geophone sensor RMS-Values, which shouldn’t be exceeded. Otherwise the vibration status becomes not okay. Proximity Limit Specifies the limit value for the proximity sensor RMS-Values, which shouldn’t be exceeded. Otherwise the position status becomes not okay. RMS Time Window Specifies the time period for the safety RMS-Values. Table 4.11.2: Safety Setting Control Items. Earth Quake Setting Earth Quake Setting Control Item Description Geophone Limit Specifies the limit value for the floor geophone sensor RMS-Values, which shouldn’t be exceeded. Otherwise the earth quake status becomes on. RMS Time Window Specifies the time period for the earth quake RMS-Values. Table 4.11.3: Earth Quake Setting Control Items. System Safety Page The system safety page contains the configuration data of the performance monitoring system. The vibration of velocity loop axes and the position of the position loop axes are monitored. For each velocity and position loop axis there is an adjustable threshold value. By the vibration monitoring the root mean square values of the velocity axes raw inputs about 1 seconds are built. By the position monitoring the position axes values after last filter are used. The vibration status is Ok when all RMS-Values of the velocity axes are below their threshold values. Otherwise it is not ok. The position status is Ok when all values of the position axes are below their threshold values. Otherwise it is not ok. Figure 4.11.2: System safety Page. Not all Firmware supports getting the position loop axes actual values. By such a firmware the safety system looks like the below figure. Figure 4.11.3: System safety without position axes values. Polynomial Page The polynomial page contains the configuration data of the polynomial system. Figure 4.11.4: Polynomial Page Polynomial Configuration Earth Quake Setting Control Item Description Toggles the polynomial processing status and overall active status on off. Saves the current polynomial configurations to a file. Loads an already saved polynomial configuration from file. Specifies the input signal of a specific polynomial. Specifies the output signal of a specific polynomial. Displays the current value of the input signal of a specific polynomial. Displays the current value of the output signal of a specific polynomial. Specifies the first coefficient value of a specific polynomial. Specifies the second coefficient value of a specific polynomial. Specifies the third coefficient value of a specific polynomial. Specifies the limiter value for a specific polynomial. Toggles a specific polynomial on/off. Table 4.11.4: Polynomial Setting Control Items. Troubleshooting Can’t run SAMBA19xUI Ensure that the .Net framework 4.5.2 or higher is installed. Run the SAMBA19xUI as administrator. No Communication. Check if the controller is powered on and the monitor LED is blinking. Check if either a USB cable or a serial cable connects the controller with the PC. Check if the used com port is selected by the “Communication Server ” Use “ Terminate Comm Server and Connect ” button to establish the connection. SAMBA19xUI hangs up during connecting to controller By a communication failure with the controller and disconnecting, the communication server could hang up. When one try to reconnect to the controller using the “ Connect ” button the SAMBA19xUI hangs up. Solution: Terminate the SAMB19xUI using the task manager. Restart SAMBA19xUI and connect to the controller using “ Terminate Comm Server and Connect ”. SAMBA19xUI doesn’t refresh the status parameters from controller The SAMBA19xUI is connected to controller but it doesn’t refresh the status parameters like the loop status, individual loop status, pneumatic floating status parameters and position values. Solution: Enable the refresh timer from the context menu. Sometimes you have to do it twice to enable. SAMBA19xUI doesn’t start or it rises with and error message If the SAMBA19xUI doesn’t start. Solution: Start SAMBA19xUI with administrator privileges. Ensure the required .Net framework is installed. If a failure occurs that cannot be solved, contact our technical support. Phone: +49 (0) 6142 94000 Known Bugs and Problems The following section lists the currently known bugs. These bugs will be resolved in future versions of the software. Description Date Version Status Solved When the application runs for a rather long time “days”, it might happen that the communication with the controller stops. 1.9.0.4 Bug, open No SAMBA19xUI version 1.9.0.4 is not able to communicate with firmware version older 3.3.0. (It is still not recommended to use the SAMBA19xUI for firmware older 3.3.0). 1.9.0.4 Known issue Solved in 1.9.0.5 During loading all parameters from the controller by saving the actual parameters to xml file. The loading status window freezes after loading a couple of parameters. Work around: Wait until loading all parameters from controller is finished and go on with saving to the xml file. 1.9.0.4 Known Issue No Note: For more Information about software bugs and issues see the SAMBA19x “Software Revision History.pdf”. Appendix Temperature Sensors AD-Mapping Sensor ADC Channel Number Standard Opticon 19 Zoll front panel Opticon OutX1Temp 44 44 OutY1Temp 26 28 OutZ1Temp 27 29 OutX2Temp 28 30 OutY2Temp 44 44 OutZ2Temp 29 31 OutX3Temp 44 44 OutY3Temp 30 32 OutZ3Temp 31 33 OutX4Temp 32 34 OutY4Temp 44 44 OutZ4Temp 33 35 Table 7.1.1: AD-Mapping for the temperature sensors."
  },
  "firmware/RCI2/commands/filter-get.html": {
    "href": "firmware/RCI2/commands/filter-get.html",
    "title": "Set stage filter command | SAMBA19x Website",
    "keywords": "Set stage filter command This command specifies the filter's parameters of a determined system component. The componentType, Index1 and Index2 define which status value will be set. CommandID 2 Command length: 10 Description : Specifies a status value of a determined system component. Parameter Type Range Default Remark Input : ComponentType uint16 0x0-max_component_type - ComponentNum uint16 0x0-0xF - ComponentAxis uint16 0x0-0xFF - ComponentElement uint32 0x0-0xFF - Output : FiltType uint32 MaxFiltType - FiltParam1 float - - FiltParam2 float - - FiltParam3 float - - FiltParam4 float - - FiltParam5 float - - How to get filter parameters: the following table gives overview how to set the command parameters componentType , ComponentNum , ComponentAxis and ComponentElement to set a specific filter configuration. Status parameter | ComponentType | ComponentNum | ComponentAxis | ComponentElem | Remark -- | -- | -- | -- | -- | -- Velocity Filter | comp_velloop | - | NumVelAxes | NumVelFilter | - Position Filter | comp_posloop | - | NumPosAxes | NumPosFilter | - Pneumatic Filter | comp_pneuloop | - | NumPneumAxes | NumPneumFilter | - FF Filter | comp_system_setting | NumFFSource | - | - Pneum FF Filter | comp_ffsystem | NumFFSource | - | specifies the status value of the output matrix of a specific feed forward source. Noise Filter | comp_pffsystem | NumPFFSource | - | specifies the status value of the output matrix of a specific pneumatic feed forward source."
  },
  "GuiUserManuals/view3d19x/view3d19x_um.html": {
    "href": "GuiUserManuals/view3d19x/view3d19x_um.html",
    "title": "Introduction | SAMBA19x Website",
    "keywords": "Integraded Dynamics Engineering View3D19x User Manual View3D19x AUTHOR(S): Moneer Shatat-Herres REVISION: 01 DATE OF PRINT: December 12, 2017 DOCUMENT CHANGE & HISTORY RECORD Name Last Update Status Version ECR/PR/IP Comment MSHAT 30.05.2017 Draft 00 First version MSHAT 06.12.2017 Released 01 Modification related to View3D19x RC02 V1.0.0.1 Notice! Although this document has been prepared with the utmost care, errors of any kind cannot be totally discounted. The contents of this document may be periodically revised, amended or changed otherwise by the originator without notice. You are invited to report any deficiencies / recommendations to IDE. Windows 7 ®, Windows 8 ® are registered trademarks of the Microsoft Corporation, USA. © Copyright 2015, Integrated Dynamics Engineering GmbH Introduction Remark : View3D19x application is compatible with firmware version 3.3.00 and higher. Language This manual is originally written in English language. Document This document describes how to use the View3D19x application for the opticon controller. View3D19x allows a 3D-Visualisation of the platform of the insulated mass of the vibration isolation systems. Intended Audience The software and this document is intended for users of an IDE vibration isolation system. Requirements In order to run this software, the following requirements must be met: Windows 7®, Windows 8®, or later version. Personal computer with x86- or x64-based microprocessor 2.8 GHz or higher, 4GB RAM are recommended. SVGA-resolution with a minimum of 1600x900 pixel and 16-Bits high colors. Mouse or compatible pointing device Microsoft .Net Frame work 4.5.2 or higher. Contact Integrated Dynamics Engineering GmbH Hermannstrasse 9-13 65479 Raunheim, GERMANY Phone: +49 (0)6142 9400-0 INSTALLATION Copy the installation package from the CD to your PC. Read the SAMBA19x installation Guide document. Getting Started Your PC can communicate with the opticon controller with a USB connection or serial (RS232) connection. Use an A/B USB cable or a null modem cable. Make sure that the FTDI USB-To-Serial converter driver is installed. This is needed to connect to controller via USB connector. Start the View3D19x program with a right-click on the View3D19x shortcut and select Run as Admin. Note: The View3D19x has to run with administrative privileges. Otherwise it doesn’t start. Start-Up Like all other SAMBA applications the View3D19x uses the communication server. This means only selected COM Ports in the communication server could be used to talk to controller. Note1 : Ensure that the used com port number is configured “selected” by the “Communication Server Configuration Tool”. Otherwise the connection will not be established. Figure 3.1.1 Communication Server Configuration Tool Note2 : If you connect via the USB port, the port will be shown as an additional com port (Virtual Com Port). Note3 : The standard baud rate for the Opticon controller is 57600. After the start of the View3D19x choose the com port and confirm with the “Connect” button to establish the connection. Note4 : The used com ports by the CommServer could be configured by View3D19x version RC 1.0.0.1 and higher assuming the View3D19x is running with administrator privileges. (By some PCs with 64Bits operation system this doesn’t work properly). Note5 : View3D19x version RC 1.0.0.1 accept command line arguments to adjust the com port and baud rate. Call “View3D19x.exe 1 57600” to launch View3D19x and to connect automatically to a controller on com port 1 using 57600 baudrate. The command line arguments structure regarding the com port number and baud rate has been modified up View3D19x RC02 V1.0.0.1. Com port could be set by “#CP” prefix and baud rate could be set by “#BR” prefix (example: call “View3D19x.exe #CP 1 #BR 57600”). Furthermore the command line argument accepts View3D19x record file and View3D19x settings file. Figure 3.1.2: Connection with a controller. Description Overview The View3D19x application visualizes the movement of the insulated payload of the vibration isolation system in the horizontal and vertical direction. It uses the proximity sensor values to calculate the movement of the platform. It allows also the user to record the movement for specific time into a file, which could be replayed back. Note: View3D19x record files (*.v3drecjson and *v3drecxml) and View3D19x settings files (*.view3d19xconfig) could be opened by drag and drop. Mainly the program is divided into three sections (3DArea, Contol-Panel and the Icons Toolbar). Figure 4.1.1: View3D19x Overview. Icon Toolbar Control Item Description Starts the 3D visualisation. Starts recording of the 3D visualisation. By stopping the recording the recorded data could be saved to a file. There are two file format available to save the data. JSON format with the extension “ V3DRecJson ” and xml format with the extension “ V3DRecXml ”. Replay the 3D-Visualisation from a file ( V3DRecJson or V3DRecXml ). Plots the proximity sensor values from an already saved 3D-Visualisation data from a file ( V3DRecJson or V3DRecXml ). Copies the 3DArea to clipboard. Saves the 3DArea to a .png file. Table 4.2.1: Icons-Toolbar control items. Control Panel The control panel consists of many expandable tabs. Connection Tab The “Connect” tab allows you to connect or disconnect to a controller. Figure 4.3.1: Connection Tab. Use “ Baud Rate ” combo box to adjust the baud rate. The default baud rate for all opticon controller is 57600. Use “ Connect ” button to establish the connection with the controller. Use “ Disconnect ” button to disconnect the communication. Use “ Terminate Comm Server and Connect ” button to close the Comm Server session, if one is already started and to connect with a new session. This option is recommended after a communication trouble. Use “ Update Comm Ports List ” button to check the available comm ports on the running machine and to update comm ports list. Figure 4.3.2: Connection tab after a successful connection with controller. Options Tab Figure 4.3.3: Options Tab. Control Item Description Set the maximal possible duration for a 3D-Visualisation record. After this time the record stops. Specifies the colour of the system platform. Specifies the background colour of the 3DArea. Table 4.3.1: Option Tab control items. System Geometry Figure 4.3.4: System Geometry Tab. Control Item Description Specifies the length of the system platform in the x direction. Specifies the length of the system platform in the y direction. Specifies the height of the system platform in the z direction. Specifies the location of the centre of gravity. Location of the proximity sensor1. (Not used). Location of the proximity sensor2. (Not used). Location of the proximity sensor3. (Not used). Location of the proximity sensor4. (Not used). Table 4.3.2: System Geometry Tab control items. Sensor Matrix Tab The sensor matrix tab configures the matrix to build the logical axes (6 degree of freedom) from the proximity sensors. The elements of this matrix influence the visualized movement of payload. Wrong values lead to a visualisation failure. Figure 4.3.5: Sensor Matrix Tab. Scale and Tolerance Tab Figure 4.3.6: Scale and Tolerance Tab. Control Item Description Zooms the movement of the payload (movement sensitivity). Specifies the tolerance for a good position window. This influences the green tolerance window in the 3D-Area. Specifies the tolerance for a bad position window. This influences the red tolerance window in the 3D-Area. Table 4.3.3: Scale and Tolerance Tab control items. Statistic and SI-Unit Tab Figure 4.3.7: Statistic and SI-Unit tab. This tab displays the current values and the minimum and maximum values of proximity sensors in micro meter SI-Unit. It allows also to specify the conversion factor of the SI-Unit. Control Item Description Displays the current proximity sensor value. Displays the minimum value of the proximity sensor. Displays the maximum value of the proximity sensor. Specifies the conversion factor for the SI-Unit (Micro meter). Resets the minimum and maximum values. Not implemented. Table 4.3.4: Statistic and SI-Unit Tab control items. Position Offset Tab Figure 4.3.8: Position Offset Tab. This tab shows the adjusted proximity sensor offsets. Those values are system configuration values and influence the system behaviour. Note : Ensure that changing of those values doesn’t influences the system behaviour negative before changing them. Control Item Description Specifies the offset value of the vertical proximity sensor number 1. Specifies the offset value of the vertical proximity sensor number 2. Specifies the offset value of the vertical proximity sensor number 3. Specifies the offset value of the vertical proximity sensor number 4. Specifies the offset value of the horizontal proximity sensor number 1. Specifies the offset value of the horizontal proximity sensor number 2. Specifies the offset value of the horizontal proximity sensor number 3. Specifies the offset value of the horizontal proximity sensor number 4. This will set the proximity offset value to the current proximity sensors values. Table 4.3.5: Position Offset Tab control items. Save/Load System Setting Tab This tab allows to save respectively load the all most View3D19x settings into respectively from xml file (View3d19xConfig). Figure 4.3.9: Save/Load System Setting Tab. Excitation/Diag Tab The Excitation/Diag tab allows the user to excite the system with a specific signal (Sine wave, white noise …etc). Please take a look to “SAMBA19x User Interface Manual.pdf” to get more information about it. Figure 4.3.10: Exciatation/Diag Tab. Loop Status Tab Figure 4.3.11: Loop Status Tab. Shows the individual loop status of the velocity FB-Loop. 3DArea The 3DArea shows the payload (here green), the good position window (green), the bad position window (red) and the isolator’s proximity sensor pair value (vertical; horizontal). Figure 4.4.1: 3DArea. 3D figure operation Short cut Zoom Zooming could be done by: Mouse wheel. Ctrl + right mouse + mouse moving up/down. Rotate Rotate the figure through: right mouse + mouse moving Move The figure could be moved by: Shift + right mouse + mouse moving. Table 4.4.1: Zoom, Rotate and Move the 3D-Figure . Troubleshooting Can’t run View3D19x Ensure that the .Net framework 4.5.2 or higher is installed. Run the View3D19x as administrator. No Communication. Check if the controller is powered on and the monitor LED is blinking. Check if either a USB cable or a serial cable connects the controller with the PC. Check if the used com port is selected by the “Communication Server ” Use “ Terminate Comm Server and Connect ” button to establish the connection. View3D19x hangs up during connecting to controller By a communication failure with the controller and disconnecting, the communication server could hang up. When one try to reconnect to the controller using the “ Connect ” button the View3D19x hangs up. Solution: Terminate the View3D19x using the task manager. Restart it again and connect to the controller using “ Terminate Comm Server and Connect ”. View3D19x doesn’t start or it rises with and error message If the View3D19x doesn’t start. Solution: Start View3D19x with administrator privileges. Ensure the required .Net framework 4.5.2 is installed. If a failure occurs that cannot be solved, contact our technical support. Phone: +49 (0) 6142 94000 Known Bugs and Problems The following section lists the currently known bugs. These bugs will be resolved in future versions of the software. Description Date Version Status Solved Communication status in title bar doesn’t auto update by disconnecting. Excitation setting doesn’t auto update correctly by reconnecting. RC V1.0.0.1 Bug Solved in RC02 V1.0.0.1 Note: For more Information about software bugs and issues see the SAMBA19x “Software Revision History.pdf”."
  },
  "GuiUserManuals/sidimat19xa/automeasurement_um.html": {
    "href": "GuiUserManuals/sidimat19xa/automeasurement_um.html",
    "title": "Common | SAMBA19x Website",
    "keywords": "Integraded Dynamics Engineering SiDiMaT19xA User Manual SiDiMaT19xA AUTHOR(S): Moneer Shatat-Herres REVISION: 00 DATE OF PRINT: December 12, 2017 DOCUMENT CHANGE & HISTORY RECORD Name Last Update Status Version ECR/PR/IP Comment MSHAT 12.12.2017 Released 00 Modification related to SiDiMaT19xA RC02 1.0.0.0 Common The SiDiMaT19xA tool allows user to take auto measurements to check the system functionality. The new auto-measurement functionality is intended to: take auto-measurements of the system. check measurement specification and save check results. generate a report including measurement graphs, specification check results. The sidimat19xa uses a kind of script file \"sam-file\" consists of a collection of actions \" sam-operations \", which are sequencly sent to the controller to be executed. The sam-file supports two file formats a xml-format with the extension \" .SiDiMaTAMF \" and a json-format with the extension \" .SiDiMaTAMFjson \". The xml-format sam-file doesn't support definition of derictives \"global variables\" and will not be supported in the future. [!Info] It is recommended to use the json file format, because it is extendable. sam-file consists of: FileVersion: the sam-file version number. AutoMeasurementOperations : solid auto-measurement structure it could be ignored. AutoMeasurementAndSpecificationList : a collection of auto-measurements where its operation-list could contains a specification-checks. AutoMeasurementList : a collection of auto-measurements where its operation-list shoudn't contains a specification-checks. diectives: collection of global variable could be used in the same sam-file and the other called sam-files inside the main sam-file (not supported by \" .SiDiMaTAMF \" files). sam-file -example . sam-operations This section describes all auto measurement operation \"sam-operation\" , which could be included in the sidimat19xa auto measurement file \"sam-file\" . The next table lists all sam-operations. An operation consists of a operation name and a value. The value is a collection of one or many command strings, which triggers an action. Note sam-operations CheckSpec - and Report -Name has to be uniq in the hole auto measurement procedure. sam-operation name Value (sam-cmd) Description Execute-Sam-File { filepath } Opens the auto measurement file filepath and excutes it. The filepath has the extension .SiDiMaTAMF . SamCommands See SamCommands CheckSpec_#{uniq-name} See CheckSpec Checks the specification of one or many curves of an IDEFigure figure. Report_#{uniq-name} see Report Writes an entry to the auto measurement report. Its value contains a collection of actions (operations). SamCommands sam-operation The SamCommands sam-operation contains a varios auto measurement actions. It's value consists of a collection of auto measurement commands sam-cmd . A \" sam-cmd \" consists of cmd-name \" italic , polt \" and list of cmd-config seperated by a semicolon \";\" or semicolon+space \"; \". A cmd-config consists of a keyword \" polt \" and a value, they are seperated by a colon \":\" or by a colon+space \": \". Some cmd_configs are valueless. The following table describes all possible sam-cmds of the SamCommands sam-operation . SamCommands sam-operation sam-cmds sam-cmd Description { measure } start sidimat measurement. { rci-command ; command : rci1-cmd } send rci1-cmd to controller as ASCII rci-command. { cache-figure-signals-to-dic ; file1 : filepath ; file2 : filepath ; ... } load measurements curves (series) from a .IDEFigure files {file1:first file, file2: second file, ...}. The curves are added \"saved\" into a dictionary. The curves in the dictionary are identified by their label which is consisting of three letters and three numbers sample (F1P2S2: this is signal#2 of plot#2 of file#1). path1, path2 ... are optional. { sig-man ; loggmanxml-file :[filepath]path} manipolate dictionary signals and replot them using .LoggManXml file. { pneum-system ; move :{up|down}; setpoint :val; tolerance :val; softupheight : val; timeout : val; wait-for :{ok|down|up|oktime#TimeInSeconds}; cache :{setpoint|softupheigh|tolerance}; restore :{setpoint|softupheigh|tolerance} } excute a pneumatic system actions see description . { trace-setting ; samples :samplesnum; undersample :undersamplingnum; average :averagenum; anti-aliasing :(on/off) } set the trace settings. { trace-sig ; signum :x; type :x; mainindex :x; subindex :x } config a trace signal, x starts by zero. { excit-sig ; type :x; mainindex :x; subindex :x } config injection point signal, x starts by zero. { excit-filter ; filnum :FilterNumber; type :FilterType; par1 :FilterParameter1; par2 :FilterParameter2; par3 :FilterParameter3; par4 :FilterParameter4; par5 :FilterParameter5 } configures an excitation filter. { excit-setting ; type :ExcitationType; par1 :ExcitationParameter1; par2 :ExcitationParameter2; par3 :ExcitationParameter3; par4 :ExcitationParameter4; filterusage :{on|off} } config the excitation signal setting. { system-loopstatus ; status : S1 S2 ... Sn} toggles a control loop on/off. status parameters should be one or many by a space seperated sytem-loop-status-actions . { individual-loopstatus ; velocity :x; position :x; pneumatic :x } set the individual loop status of one or many control loops. x is a binary value. { prompt-message ; message :messsage} prompt a message box with gives message, this stops auto measurement until the user click the message box. { cache-measurement ;} cache the actual sidimat measurement. { clear-measurement ; x } clear the chached sidimat measurement, x is one of {measurements1, measurement2, ... }. If x is omitted the last cached measurement will be cleared. { clear-cached-measurements ; } clear all chached sidimat measurements . { waitms ; time :ms} wait the time period ms. ms is millisecond. { directory ; reset :dummy; file : path} changes the working directory to file or reset the working directory to original-directory. the value of reset is ignored. { rescale-measurement-plot ; plot1 : plotname; plot2 :plotname; ...} rescale the listed sidimat19xa plots with the given plotnames. plotname is one of {Amplitude, Phase, Coherence, Time1, Time2, Spectrum1, Spectrum2}. { rescale-measurement ; measurement : measurementname; } rescale the sidimat19xa measurement with the given measurementname. measurementname is one of {frf, time}. { restyle-measurement ; measurement : measurementname; loggmanxml-file: filepath } restyle and manipulate the sidimat19xa measurement with the given measurementname using a .loggmanxml . measurementname is one of {frf, time}. { add-from-csv ; file : filepath ; title :; plot1 : plotname; plot2 :plotname; ...} Adds curve x/y-pairs from a simicolon seperated .csv file (filepath) to a sidimat plot listed here. The plotname is one of {Amplitude, Phase, Coherence, Time1, Time2, Spectrum1, Spectrum2}. title is optional and specifies the curve name. { spec-failed-action ; action : x} sets the action which should be triggered by failed specification check. x is one of { inform-user , user-confirmation-to-continue , stop-auto-measurement , none } { open-measurement ; file : filepath } open a .sidimat19x raw measurement. { add-measurement ; file : filepath } add a .sidimat19x raw measurement. { save ; type : savetype ; [ fignum : NumberOfFigure;] [ plotnum : NumberOfPlot;] file : filepath } saves figure, figure-plot or sidimat measurement to .idefigure or picture file. { logg-par ; signum : MonitorSignalNumber;{ type : TBD}} configures the logging parameter.EventType {0:OverCurrentEvent | 1:EventSignalLogging | 2:standard logging} { monitor-sig ; signum : num; type : x; mainindex : x; subindex : x}} configures a monitor signal. { load-logg-setting-file ; file : path} Opens logging setting file and send it to controller. Path has the extension .Logg19xConfig . { start-logging ; file : path} Starts the logging. { stop-logging ; file : path} Stops the logging. { wait-to-finish-logging ; timeout : TimeInSecond} waits to finish the logging but not more than timeout. { wait-for-event-trace ; tracenum :num; timeout : TimeInSecond} waits to finish the event logging but not more than timeout. { get-logg-data ; file : path; loggmanxml-file : plotfile} loads logg data from controller, saves to file and optionally plots the data using loggmanxml . { plot-logg-data ; file : path; loggmanxml-file : plotfile} loads logg data from file and plots the data using loggmanxml . { close-loggfig ; fignum : NumberOfFigure; } closes a figure. { rescale-loggfig ; fignum : NumberOfFigure; } rescales the plots of a figure. { restyle-loggfig ; fignum : NumberOfFigure; loggmanxml-file : plotfile} restyle the plots of a figure using the loggmanxml-file . { event ; { threshold : ThresholdValue; trig-samples : TriggerSamplesNumber; type : x; mainindex : x; subindex : x; } configures the event for the event logging. { system-setting ; command : x; file : path} loads/saves/save to nvram/delete nvram/restore nvram. command is one of { loadfile : load a samba19xui_config file \" file \" to controller; savefile : loads the setting from controller and saves it to a samba19x_config file \" file \"; savenvram : save parameters to nvram; restorenvram : restores paraneters from nvram; clearnvram : clear parameters from nvram } { add-2-val ; value1 : value_name; value2 : value_name; result : result_name; mainindex : x; subindex : x; } adds value1 and value2 from the directive dictionary and save the result back to the directive dictionary. value_name and result_name has to start with dollar mark \"$\". { mult-2-val ; value1 : value_name; value2 : value_name; result : result_name; mainindex : x; subindex : x; } multiplies value1 and value2 from the directive dictionary and save the result back to the directive dictionary. value_name and result_name has to start with dollar mark \"$\". { sub-2-val ; value1 : value_name; value2 : value_name; result : result_name; mainindex : x; subindex : x; } subtracts value2 from value1 from the directive dictionary and save the result back to the directive dictionary. value_name and result_name has to start with dollar mark \"$\". { divide-2-val ; value1 : value_name; value2 : value_name; result : result_name; mainindex : x; subindex : x; } divides value1 through value2 from the directive dictionary and save the result back to the directive dictionary. value_name and result_name has to start with dollar mark \"$\". Save Types Save Type description frf2pic saves the SiDiMaT19xA frequency response measurement to .png file. time2pic saves the SiDiMaT19xA time/spectrum measurement to .png file. frfmag2pic saves the SiDiMaT19xA frequency response magnitude to .png file. frfphase2pic saves the SiDiMaT19xA frequency response phase to .png file. frfcoherence2pic saves the SiDiMaT19xA frequency response coherence to .png file. sig1time2pic saves the SiDiMaT19xA time measurement of signal1 to .png file. sig2time2pic saves the SiDiMaT19xA time measurement of signal2 to .png file. sig1spec2pic saves the SiDiMaT19xA spectrum measurement of signal1 to .png file. sig2spec2pic saves the SiDiMaT19xA spectrum measurement of signal2 to .png file. frf2fig saves the SiDiMaT19xA frequency response measurement to .IDEFigure file. time2fig saves the SiDiMaT19xA time/spectrum measurement to .IDEFigure file. raw saves the SiDiMaT19xA complete measurement to .sidimat19x file. The .sidimat19x format is a kind of matlab format. loggfig2fig saves the logging measurement figure with the number (fignum) to .IDEFigure file. If fignum is omitted the first figure is saved. loggfig2pic saves the logging measurement figure with the number (fignum) to .png file. If fignum is omitted, the first figure is saved. loggplot2pic saves the logging measurement plot number (plotnum) of figure number (fignum) to .png file. If fignum is omitted, the first figure is taken and if the plotnum is omitted then the first plot of the figure is saved. sam-results saves the actual SiDiMaT19xA auto measurement specification results to the specific \"SpecCheckResult.SAMResultjson\" file. pneum-system sam-configs sam-config description move moves the pneumatic system up, down, possible sam-config's value [up,down] cache-par caches the space seperated listed parameters, possibles parameters [ setpoint : pneumatic setpoint, tolerance : mode tolerance, softupheight : pneumatic softupheight, isooffset : isolator height's offset \"vrefup\"] restore-par caches the space seperated listed parameters, possibles parameters [ setpoint : pneumatic setpoint, tolerance : mode tolerance, softupheight : pneumatic softupheight, isooffset : isolator height's offset \"vrefup\"] change-par changes the space seperated listed parameters, the parameter and its value are seperated by the number sign '#'. Possibles parameters [ setpoint : pneumatic setpoint, tolerance : mode tolerance, softupheight : pneumatic softupheight, isooffset : isolator height's offset, values are seperated with number sign '#' ] timeout sets the time out for the pneumatic actions this is needed for wait actions. the value is gives in seconds. waitfor waits to finish pneumatic actions. possible actions to wait for are [ up : wait for pneumatic up status, down : wait for pneumatic down status, ok : wait for pneumatic ok status, *oktime#*val: wait for ok time to reach its val, oktime and its value are seperated by number sign '#']. Examples Example1 The following operation actions listed below measures the open/closed force mobilty transfer function of the Yrot axis. { \"Name\": \"Operation\", \"Value\": [ \"individual-loopstatus; velocity:110111\", \"excit-setting;type:$WhiteNoise; par1:$ZtExcitGain; filterusage:on\", \"clear-cached-measurements;\", \"trace-sig;signum:2; type:$Velocity; mainindex:$VelZtrans; subindex:$MeasureAfterStage\", \"excit-sig;type:$VelAxesOutput; mainindex:$VelZtrans;\", \"waitms; time:$WaitTimeAfterExcit;\", //measure is a sam-config-less sam-cmd \"measure;\", \"cache-measurement;\", \"individual-loopstatus; velocity:111111\", \"waitms; time:$WaitTimeBetweenOpenClosed;\", \"measure;\", //Add amplitude, phase and coherence help curve \"add-from-csv; file: ForceMobility\\\\coherence-help-curve.csv; plot: Coherence ; title: Coherence-Limit;\", \"add-from-csv; file: ForceMobility\\\\phase-help-curve.csv; plot: Phase ; title: Phase-Limit;\", \"add-from-csv; file: ForceMobility\\\\amplitude-help-curve.csv; plot: Amplitude ; title: Amplitude-Limit;\", //wait time to give the gui chance to render the added graphs, otherwise the curves disappeared in the picture. \"waitms; time: 2000\" ] } Example2 { \"Name\": \"FMXtransStage7OCL\", \"IsEnabled\": true, \"OperationList\": [ { \"Name\": \"SamCommands\", \"Value\": [ \"individual-loopstatus; velocity:111110\", \"excit-setting;type:$WhiteNoise; par1:$XtExcitGain; filterusage:on\", \"clear-cached-measurements;\", \"trace-sig;signum:2; type:$Velocity; mainindex:$VelXtrans; subindex:$MeasureAfterStage\", \"excit-sig;type:$VelAxesOutput; mainindex:$VelXtrans; \", \"waitms; time:$WaitTimeAfterExcit;\", \"measure;\", \"cache-measurement;\", \"individual-loopstatus; velocity:111111\", \"waitms; time:$WaitTimeBetweenOpenClosed;\", \"measure;\", //Add amplitude, phase and coherence help curve \"add-from-csv; file: ForceMobility\\\\coherence-help-curve.csv; plot: Coherence ; title: Coherence-Limit;\", \"add-from-csv; file: ForceMobility\\\\phase-help-curve.csv; plot: Phase ; title: Phase-Limit;\", \"add-from-csv; file: ForceMobility\\\\amplitude-help-curve.csv; plot: Amplitude ; title: Amplitude-Limit;\", //wait time to give the gui chance to render the added graphs, otherwise the curves disappeared in the picture. \"waitms; time: 2000\", \"save; type: frf2fig; file: Measurements\\\\ForceMobility\\\\Stage7_OCL_AW\\\\Xtrans_Stage7_OCL_AW_FRF.idefigure\", \"save; type: time2fig; file: Measurements\\\\ForceMobility\\\\Stage7_OCL_AW\\\\Xtrans_Stage7_OCL_AW_TimeSpec.idefigure\", \"save; type: frf2pic; file: Measurements\\\\ForceMobility\\\\Stage7_OCL_AW\\\\Xtrans_Stage7_OCL_AW_FRF.png\", \"save; type: time2pic; file: Measurements\\\\ForceMobility\\\\Stage7_OCL_AW\\\\Xtrans_Stage7_OCL_AW_TimeSpec.png\", \"save; type: raw; file: Measurements\\\\ForceMobility\\\\Stage7_OCL_AW\\\\Xtrans_Stage7_OCL_AW.sidimat19x\" ] }, { //the name of CheckSpec sam-operation has to be unique //each check sam-cmd keyword has to be unique inside one CheckSpec sam-operation \"Name\": \"CheckSpec_#FMXt7OCLAW\", \"Value\": [ \"cache;file: Measurements\\\\ForceMobility\\\\Stage7_OCL_AW\\\\Xtrans_Stage7_OCL_AW_FRF.idefigure\", \"max_#1; sig:F1P1S2; specmin:$XtResonanceMagSpecmin; specmax:$XtResonanceMagSpecmax;rmin:$ResonanceRmin;rmax:$ResonanceRmax\", \"max_#2; sig:F1P1S2; specmin:$XtResonanceMagSpecmin; specmax:$XtResonanceMagSpecmax;rmin:$ResonanceRmin;rmax:$ResonanceRmax\", \"max-pos; sig:F1P1S2; specmin:$XtResonanceFreqSpecmin; specmax:$XtResonanceFreqSpecmax; rmin:$ResonanceRmin; rmax:$ResonanceRmax\", \"ocl-lbw; olsig:F1P1S2; clsig:F1P1S1; specmax:$XtLowBandWidthSpecmax; rmin:$LowBandWidthRmin; rmax:$LowBandWidthRmax\", \"ocl-hbw;olsig:F1P1S2; clsig:F1P1S1; specmin:$XtHighBandWidthSpecmin; rmin:$HighBandWidthRmin; rmax:$HighBandWidthRmax;\", \"ocl-damp;olsig:F1P1S2; clsig:F1P1S1; specmin:$XtResonanceMagDampSpecmin; rmin:$ResonanceRmin; rmax:$ResonanceRmax\", //Coherence Check \"avg; sig:F1P3S1; specmin:$CoherenceSpecmin; rmin:$CoherenceRmin;rmax:$CoherenceRmax\", ] }, { //the name of Report sam-operation has to be unique if it contains add-setting-table sam-cmd //the add-setting-table sam-cmd keyword has to be unique inside one Report sam-operation // add-setting-table example // \"add-setting-table; excitation-setting; excitation-filter; velocity-sensor; velocity-motor; velocity-filter; position-sensor; position-motor; position-filter; pneumatic-sensor; pneumatic-motor; pneumatic-filter;system-status;velocity-axes-status;position-axes-status,pneumatic-axes-status\", \"Name\": \"Report_#FMXt7OCLAW\", \"Value\": [ \"para1;Force Mobility Axis Wise Open/Closed Loop Measurements after Stage7 \", \"para2;Force mobility loop settings\", \"add-setting-table#1; velocity-sensor; velocity-motor; velocity-filter; \", \"para2;Force Mobility Measurements\", \"add-setting-table#2; excitation-setting; excitation-filter; system-status;velocity-axes-status;\", \"para3;Xtrans \", \"pic;Measurements\\\\ForceMobility\\\\Stage7_OCL_AW\\\\Xtrans_Stage7_OCL_AW_FRF.png\", ] } ] } Report sam-operation The Report operation basically services to generate a report containing SiDiMaT19xA measurement or a logging measurement graphs. It also supports adding measurement specification result tables. The value of this operation is a collection of the values in the following table (values have to be used without brackets). The value first word \" italic \" is a keyword and has to be written correct. Value Description { par1 ;text} add the text to the markdown string as paragraph1 (header1). { par2 ;text} add the text to the markdown string as paragraph2. { par3 ;text} add the text to the markdown string as paragraph3. { par4 ;text} add the text to the markdown string as paragraph4. { par5 ;text} add the text to the markdown string as paragraph5. { par6 ;text} add the text to the markdown string as paragraph6. { text ;text} add the text to the markdown string. { pic ;path} add a picture to the markdown string. when Path is not absolute then it is relative to the first evaluated auto measurement file path (original-path). { tableheader ;colh1;colh2; ...} add a table header with the headers {colh1, colh2, ...}. { tablerow ;cell1;cell2; ...} add a new row to the table with the cells content {result1, result2, ....}. Cells content is a text or a specification result (see description below). The table rows have to directly follow the table header. { save ;path} save the mardown string to .md file (filename) and convert the markdown string to a html. furthermore it convert the html file to a pdf file. { excute ;cmd} excutes the command line cmd. The excuting path is the original-path. If cmd is a .bat file then the file will be executed. Report operation examples 1 Example { \"Name\": \"Report\", \"Value\": [ \"para1;Force Mobility Axis Wise Open/Closed Loop Measurements after Stage7 \", \"para2;Force mobility loop settings\", \"add-setting-table; velocity-sensor; velocity-motor; velocity-filter; \", \"para2;Force Mobility Measurements\", \"add-setting-table; excitation-setting; excitation-filter; system-status;velocity-axes-status;\", \"para3;Xtrans \", \"pic;Measurements\\\\ForceMobility\\\\Stage7_OCL_AW\\\\Xtrans_Stage7_OCL_AW_FRF.png\", ] } 2 Example { \"Name\": \"Report\", \"Value\": [ \"para2;Force mobility specification result tables\", \"para3;System eigen-frequency\", \"tableheader;Axis;Min;Max;Unit;Measured Value;Result\", \"tablerow;Xtrans;CheckSpec_#FMXt7OCLAW.max-pos.specmin;CheckSpec_#FMXt7OCLAW.max-pos.specmax;Hz;CheckSpec_#FMXt7OCLAW.max-pos.measured;CheckSpec_#FMXt7OCLAW.max-pos.result\", \"tablerow;Ytrans;CheckSpec_#FMYt7OCLAW.max-pos.specmin;CheckSpec_#FMYt7OCLAW.max-pos.specmax;Hz;CheckSpec_#FMYt7OCLAW.max-pos.measured;CheckSpec_#FMYt7OCLAW.max-pos.result\", \"tablerow;Ztrans;CheckSpec_#FMZt7OCLAW.max-pos.specmin;CheckSpec_#FMZt7OCLAW.max-pos.specmax;Hz;CheckSpec_#FMZt7OCLAW.max-pos.measured;CheckSpec_#FMZt7OCLAW.max-pos.result\", \"tablerow;Xrot;CheckSpec_#FMXr7OCLAW.max-pos.specmin;CheckSpec_#FMXr7OCLAW.max-pos.specmax;Hz;CheckSpec_#FMXr7OCLAW.max-pos.measured;CheckSpec_#FMXr7OCLAW.max-pos.result\", \"tablerow;Yrot;CheckSpec_#FMYr7OCLAW.max-pos.specmin;CheckSpec_#FMYr7OCLAW.max-pos.specmax;Hz;CheckSpec_#FMYr7OCLAW.max-pos.measured;CheckSpec_#FMYr7OCLAW.max-pos.result\", \"tablerow;Zrot;CheckSpec_#FMZr7OCLAW.max-pos.specmin;CheckSpec_#FMZr7OCLAW.max-pos.specmax;Hz;CheckSpec_#FMZr7OCLAW.max-pos.measured;CheckSpec_#FMZr7OCLAW.max-pos.result\", ] }, { \"Name\": \"Report_#Add2Summary\", \"Value\": [ \"para2;Force mobility specification result tables\", \"para3;System eigen-frequency\", \"tableheader;Axis;Min;Max;Unit;Measured Value;Result\", \"tablerow;Xtrans;CheckSpec_#FMXt7OCLAW.max-pos.specmin;CheckSpec_#FMXt7OCLAW.max-pos.specmax;Hz;CheckSpec_#FMXt7OCLAW.max-pos.measured;CheckSpec_#FMXt7OCLAW.max-pos.result\", \"tablerow;Ytrans;CheckSpec_#FMYt7OCLAW.max-pos.specmin;CheckSpec_#FMYt7OCLAW.max-pos.specmax;Hz;CheckSpec_#FMYt7OCLAW.max-pos.measured;CheckSpec_#FMYt7OCLAW.max-pos.result\", \"tablerow;Ztrans;CheckSpec_#FMZt7OCLAW.max-pos.specmin;CheckSpec_#FMZt7OCLAW.max-pos.specmax;Hz;CheckSpec_#FMZt7OCLAW.max-pos.measured;CheckSpec_#FMZt7OCLAW.max-pos.result\", \"tablerow;Xrot;CheckSpec_#FMXr7OCLAW.max-pos.specmin;CheckSpec_#FMXr7OCLAW.max-pos.specmax;Hz;CheckSpec_#FMXr7OCLAW.max-pos.measured;CheckSpec_#FMXr7OCLAW.max-pos.result\", \"tablerow;Yrot;CheckSpec_#FMYr7OCLAW.max-pos.specmin;CheckSpec_#FMYr7OCLAW.max-pos.specmax;Hz;CheckSpec_#FMYr7OCLAW.max-pos.measured;CheckSpec_#FMYr7OCLAW.max-pos.result\", \"tablerow;Zrot;CheckSpec_#FMZr7OCLAW.max-pos.specmin;CheckSpec_#FMZr7OCLAW.max-pos.specmax;Hz;CheckSpec_#FMZr7OCLAW.max-pos.measured;CheckSpec_#FMZr7OCLAW.max-pos.result\", ] } CheckSpec sam-operation The CheckSpec sam-operation basically services to check a specification of a SiDiMaT19xA measurement or a logging measurement which is saved in .IDEFigure file. CheckSpec sam-operation contains a varios auto measurement actions. It's value consists of a collection of auto measurement commands sam-cmd . An \" sam-cmd \" consists of cmd-name \" italic , polt \" and list of cmd-config seperated by a semicolon \";\" or semicolon+space \"; \". A cmd-config consists of a keyword \" polt \" and a value, they are seperated by a colon \":\" or by a colon+space \": \". Some cmd_configs are valueless. The following table describes all possible sam-cmds of the CheckSpec sam-operation . sam-cmd Description { cache ; file1 : filepath ; file2 : filepath ; ... } load measurements curves (series) from a .IDEFigure files {file1:first file, file2: second file, ...}. The curves are added \"saved\" into a dictionary. The curves in the dictionary are identified by their label which is consisting of three letters and three number sample (F1P2S2: this signal#2 of plot#2 of file#1). path1, path2 ... are optional. { check-point ; sig : sig; point : point; rmin : rmin; rmax : rmax; specmin : specmin; specmax : specmax} checks whether the y-value at x-axis-point point meets the specification range [specmin specmax].Only values inside x-axis range [rmin - rmax] are considered. { check-value ; value : $Param; specmin : specmin; specmax : specmax} checks whether the value of the parameter $Param meets the specification range [specmin specmax]. $Param is one of the parameter in the directive dictionary. { check-upper-spec-curve ; sig : sig; specsig : specsig; specfile : filepath; rmin : rmin; rmax : rmax;} check if the curve sig is lower than specsig curve or the curve loaded from csv file filepath.Only values inside x-axis range [rmin - rmax] are considered. { check-lower-spec-curve ; sig : sig; specsig : specsig; specfile : filepath; rmin : rmin; rmax : rmax;} check if the curve sig is higher than specsig curve or the curve loaded from csv file filepath.Only values inside x-axis range [rmin - rmax] are considered. { check-envelope-spec-curve ; sig : sig; { specsig : specsig| specfile : filepath}; envelope : envelopewidth; rmin : rmin; rmax : rmax;} check if the curve sig lies inside the envelope of specsig curve or the curve loaded from csv file filepath.Only values inside x-axis range [rmin - rmax] are considered. { max ; sig : sig; mult : mult; rmin : rmin; rmax : rmax; specmin : specmin; specmax : specmax} builds the average of the sig y-values inside x-axis range [rmin rmax] and checks whether the average value meets the specification range [specmin specmax]. checks if the sig maximum y-value lies in the range [ss - se].Only values inside x-axis range [rs - re] are used. rs and re are optional. { min ; sig : sig; mult : mult; rmin : rmin; rmax : rmax; specmin : specmin; specmax : specmax} builds the average of the sig y-values inside x-axis range [rmin rmax] and checks whether the average value meets the specification range [specmin specmax]. { avg ; sig : sig; mult : mult; rmin : rmin; rmax : rmax; specmin : specmin; specmax : specmax} builds the average of the sig y-values inside x-axis range [rmin rmax] and checks whether the average value meets the specification range [specmin specmax]. mult gives opportunity to multiply the y-value with a factor bevore building the average value. { abs-avg ; sig : sig; mult : mult; rmin : rmin; rmax : rmax; specmin : specmin; specmax : specmax} builds the absolute average of the sig y-values inside x-axis range [rmin rmax] and checks whether the average value meets the specification range [specmin specmax]. mult gives opportunity to multiply the y-value with a factor bevore building the average value. { std ; sig : sig; mult : mult; rmin : rmin; rmax : rmax; specmin : specmin; specmax : specmax} builds the standard deviation value of the sig y-values lay inside x-axis range [rmin rmax] and checks whether the value meets the specification range [specmin specmax]. mult gives opportunity to multiply the y-value with a factor bevore building the average value. { pkpk ; sig : sig; rmin : rmin; rmax : rmax; specmin : specmin; specmax : specmax} builds the peak-to-peak value of the sig y-values inside x-axis range [rmin rmax] and checks whether the average value meets the specification range [specmin specmax]. { max-pos ; sig : sig; mult : mult; rmin : rmin; rmax : rmax; specmin : specmin; specmax : specmax} builds the average of the sig y-values inside x-axis range [rmin rmax] and checks whether the average value meets the specification range [specmin specmax].checks the x-axis position of the y-maximum value.Only values inside x-axis range [rs - re] are used. rs and re are optional. { ocl-lbw ; olsig :sig; clsig :sig ; rmin : rmin; rmax : rmax; specmin : specmin; specmax : specmax} finds the open/closed-loop active bandwidth lower point and checks if it's value lies inside the specification range [specmin specmax]. olsig :open-loop curve; clsig : closed-loop curve; Only values inside x-axis range [rmin - rmax] are considered. { ocl-hbw ; olsig :sig; clsig :sig ; rmin : rmin; rmax : rmax; specmin : specmin; specmax : specmax} finds the open/closed-loop active bandwidth higher point and checks if it's value lies inside the specification range [specmin specmax]. olsig :open-loop curve; clsig : closed-loop curve; Only values inside x-axis range [rmin - rmax] are considered. { ocl-damp ; olsig :sig; clsig :sig ; rmin : rmin; rmax : rmax; specmin : specmin; specmax : specmax} Checks the open/closed-loop active damping lies in [specmin - specmax]. olsig : open loop curve; clsig2 : closed loop curve. Only values inside x-axis range [rmin - rmax] are considered. Specification results Here is a list with possible specification result could be used as table cell content. Specification result starts with a specification opeartion name (spec-op-name) followed by dot (.) followed by specicfication operation value keyword (spec-op-key) followed by dot (.) followed by specification parameter (spec-par) which will be the cell content. Syntax: { cmd-name . spec-op-key . spec-par } spec_name : the name of the SpeckCheck operation example (CheckSpec_#VelXtrasOl). spec-op-key : one of the following specification check operations: max : the maximum y-value. max-pos : the x-position of the maximum y-value. ocl-lbw : the isolation lower active band width value. ocl-hbw : the isolation lower active band width value. ocl-damp : the isolation active damping. check-point : the y-value at a specific point at the x-axis. min : the minimum y-value. pk-pk : the peak to peak y-value. check-upper-spec-curve : check if a curve \"signal\" lies under a spec-curve. spec-par : one of the following parameter: rmin , rmax : the specification range [rmin rmax]. measured : measured value. result : specification check status of the spec-op-key the result is one from {Passed, Failed}. \" Logg \" operation The Logg sam-operation basically services to log data from the controller using the logging functionality. Furthermore, it prepares the logged data and plots it. It's value consists of a collection of auto measurement commands sam-cmd . An \" sam-cmd \" consists of cmd-name \" italic , polt \" and list of cmd-config seperated by a semicolon \";\" or semicolon+space \"; \". A cmd-config consists of a keyword \" polt \" and a value, they are seperated by a colon \":\" or by a colon+space \": \". Some cmd_configs are valueless. The following table describes all possible sam-cmds of the Logg sam-operation . sam-cmd Description { load-logg-setting-file ; file : path} Opens logging setting file and send it to controller. Path has the extension .Logg19xConfig . { start-logging ; file : path} Starts the logging. { stop-logging ; file : path} Stops the logging. { waitms ; time : TimeInMilliSecond;} waits the time of milli second. { wait-to-finish-logging ; timeout : TimeInSecond} waits to finish the logging but not more than timeout. { wait-for-event-trace ; tracenum :num; timeout : TimeInSecond} waits to finish the event logging but not more than timeout. { system-loopstatus } see description of system-loopstatus by Operation sam-operation. { individual-loopstatus ; velocity :x; position :x; pneumatic :x } set the individual loop status of one or many control loops. { get-logg-data ; file : path; loggmanxml-file : plotfile} loads logg data from controller, saves to file and optionally plots the data using loggmanxml . { plot-logg-data ; file : path; loggmanxml-file : plotfile} loads logg data from file and plots the data using loggmanxml . { loggfig2fig ; fignum : NumberOfFigure; file : filename} saves figure to .idefigure file. { loggfig2pic _; fignum : NumberOfFigure; file : filename} saves figure to .png file. { loggplot2pic _; fignum : NumberOfFigure; plotnum : NumberOfPlot; file : filename} saves plot to .png file. { close-loggfig ; fignum : NumberOfFigure; } closes a figure. { rescale-loggfig ; fignum : NumberOfFigure; } rescales the plots of a figure. { restyle-loggfig ; fignum : NumberOfFigure; loggmanxml-file : plotfile} restyle the plots of a figure using the loggmanxml-file . { event ; { threshold : ThresholdValue; trig-samples : TriggerSamplesNumber; type : x; mainindex : x; subindex : x; } configures the event for the event logging. { monitor-sig ; signum : num; type : x; mainindex : x; subindex : x}} configures a monitor signal. { logg-par ; signum : MonitorSignalNumber;{ type : TBD}} configures the logging parameter.EventType {0:OverCurrentEvent|1:} { directory } see description of directory by Operation sam-operation. { pneum-system } see description of pneum-system by Operation sam-operation. { excit-sig } see description of excit-sig by Operation sam-operation. { excit-filter } see description of excit-filter by Operation sam-operation. { excit-setting } see description of excit-setting by Operation sam-operation. { spec-failed-action } see description of spec-failed-action by Operation sam-operation. save sam-cmd types The save sam-cmd basically services to save a SiDiMaT19xA measurement or a logging measurement to a file or a picture. The value of this operation is a collection of the values in the following table (values have to be used without brackets). The value first word \" italic \" is keyword and has to be written correct. Value Description { frf2pic ; file :path} saves the SiDiMaT19xA frequency response measurement to .png file (path). Path has the extension .png. { frf2fig ; file :path} saves the SiDiMaT19xA frequency response measurement to .IDEFigure file(path). The .IDEFigure format is a kind of matlab format. Path has the extension .IDEFigure. { time2pic ; file :path} saves the SiDiMaT19xA time/spectrum measurement to .png file(path). Path has the extension .png. { time2fig ; file :path} saves the frequency response measurement to .png file(path). Path should have the extension .png. { raw ; file :path} saves the SiDiMaT19xA complete measurement to .sidimat19x file (path). The .IDEFigure format is a kind of matlab format. Path has the extension .sidimat19x. { logg2fig ; file :path, fignum :x} saves the logging measurement figure with the number (fignum) to .IDEFigure file (path). If fignum is omitted the first figure is saved. Path has the extension .IDEFigure. { logg2pic ; file :path, fignum :x} saves the logging measurement figure with the number (fignum) to .png file. If fignum is omitted, the first figure is saved. Path has the extension .IDEFigure. { frfmag2pic ; file :path; width :x; height :x; resol :x} saves the SiDiMaT19xA frequency response magnitude graph to .png file (path). Path has the extension .png. Optionaly picture width, height and resolution could be set. { frfphase2pic ; file :path; width :x; height :x; resol :x} saves the SiDiMaT19xA frequency response phase graph to .png file (path). Path has the extension .png. Optionaly picture width, height and resolution could be set. { frfcoherence2pic ; file :path; width :x; height :x; resol :x} saves the SiDiMaT19xA frequency response coherence graph to .png file (path). Path has the extension .png. Optionaly picture width, height and resolution could be set. { sig1time2pic ; file :path; width :x; height :x; resol :x} saves the SiDiMaT19xA trace signal1 time graph to .png file (path). Path has the extension .png. Optionaly picture width, height and resolution could be set. { sig2time2pic ; file :path; width :x; height :x; resol :x} saves the SiDiMaT19xA trace signal2 time graph to .png file (path). Path has the extension .png. Optionaly picture width, height and resolution could be set. { sig1spec2pic ; file :path; width :x; height :x; resol :x} saves the SiDiMaT19xA trace signal1 spectrum graph to .png file (path). Path has the extension .png. Optionaly picture width, height and resolution could be set. { sig2spec2pic ; file :path; width :x; height :x; resol :x} saves the SiDiMaT19xA trace signal2 spectrum graph to .png file (path). Path has the extension .png. Optionaly picture width, height and resolution could be set. Definitions Here are some definitions and abbreviations related to the sidimat auto measurement. sam [!Info] sam : sidimat19xA auto measurement. sam-file [!Info] sam-file : this is a sidimat19xA auto measurement file with the file extension .SiDiMaTAMF . Basically it consists of a collection of AutoMeasurement-Objects Automeasurement . Each AutoMeasurement-object consists of a collections of operations the so called \"sam-operation\" . sam-operation Note sam-operation : contains different auto measurement actions. It basically consists of a collection of operation-name and optionally a value. It's value contains a list of sam commands \" sam-cmd \". Note Some sam-operation are valueless. sam-cmd Note sam-cmd : consists of cmd-name \" italic , polt \" and optionally a list of cmd-config objects seperated by a semicolon \";\" or semicolon+space \"; \". cmd-name and cmd_config objects are seperated by a semicolon \";\" or semicolon+space \"; \". Some sam-cmd are cmd-config-less. cmd-config Note cmd-config : consists of config-keyword \" polt \" and its config-value the config-keyword and its value are seperated by colon \":\" or colon+space \": \". Some cmd_configs are valueless. They don't have a value. filepath Note filepath : If filepath string contains a colon ':' or start with backslash \"\\\" , then absolute path is assummed, otherwise the path is assumed to be relative to the working-directory . Relative paths shouldn't start with dot, slash or backslash. path Note path : If path string contains a colon ':' or start with backslash \"\\\" , then absolute path is assummed, otherwise the path is assumed to be relative to the working-directory . Relative paths shouldn't start with dot, slash or backslash. original-directory Note original-directory : the directory from where the first sam-file is opened and executed. working-directory Note working-directory : the working directory for sam-operation . By starting the a sam file the working-directory is set to the original-directory . working-directory is per sam-operation changeable. system-loop-status-actions Note sytem-loop-status-actions : READ, CACHE, RESTORE, OVERALLON, OVFFON, PFFON, PNEUMON, OVERALLOFF, OVFFOFF, PFFOFF, PNEUMOFF, TEMPSENSORON, TEMPSENSOROFF, ETHERCATSFFON, ETHERCATSFFOFF, ETHERCATMOTON, ETHERCATMOTOFF. spfm-operation spfm: \" S ignals P lots and F igures M anipulation\". Note spfm-operation : contains different auto measurement actions. It basically consists of a collection of operation-name and optionally a value. It's value contains a list of spfm commands \" spfm-cmd \". Note Some spfm-operation are valueless. spfm-cmd Note spfm-cmd : consists of cmd-name \" italic , polt \" and optionally a list of cmd-config objects seperated by a semicolon \";\" or semicolon+space \"; \". cmd-name and cmd_config objects are seperated by a semicolon \";\" or semicolon+space \"; \". Note Some spfm-cmd are cmd-config-less. Appendix { \"AutoMeasurementAndSpecificationList\": [ ], \"directives\": null, \"FileVersion\": 1 }"
  }
}